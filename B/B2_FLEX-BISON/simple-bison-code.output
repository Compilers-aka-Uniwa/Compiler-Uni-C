Nonterminals useless in grammar

    physical_line


Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "&"
    "\\"
    UNKNOWN


Rules useless in grammar

  114 physical_line: logic_line NEWLINE


State 28 conflicts: 1 shift/reduce
State 93 conflicts: 2 reduce/reduce
State 95 conflicts: 2 reduce/reduce
State 96 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: logic_line

    2 logic_line: decl_statements
    3           | logic_line ";"
    4           | logic_line NEWLINE

    5 decl_var: type var

    6 type: SINT
    7     | SFLOAT
    8     | SDOUBLE
    9     | SSHORT
   10     | SLONG

   11 var: IDENTIFIER
   12    | var "," var

   13 pos_elem: IDENTIFIER "[" INTEGER "]"
   14         | IDENTIFIER "[" IDENTIFIER "]"

   15 arr_elements: "[" "]"
   16             | "[" integ "]"
   17             | "[" fl "]"
   18             | "[" str "]"

   19 integ: INTEGER
   20      | integ "," integ

   21 fl: FLOAT
   22   | fl "," fl

   23 str: STRING
   24    | str "," str

   25 build_func: func

   26 func: SSCAN "(" scan_params ")"
   27     | SLEN "(" len_params ")"
   28     | SCMP "(" cmp_params ")"
   29     | SPRINT "(" print_params ")"

   30 scan_params: IDENTIFIER

   31 len_params: arr_elements
   32           | STRING
   33           | IDENTIFIER

   34 cmp_params: STRING
   35           | IDENTIFIER
   36           | cmp_params "," cmp_params

   37 print_params: STRING
   38             | IDENTIFIER
   39             | INTEGER
   40             | FLOAT
   41             | func
   42             | pos_elem
   43             | print_params "," print_params

   44 decl_func: name_func decl_statement

   45 name_func: SFUNC
   46          | name_func IDENTIFIER params NEWLINE

   47 call_func: name_func "(" print_params ")"

   48 params: "(" ")"
   49       | "(" type_params ")"

   50 type_params: type IDENTIFIER
   51            | type_params "," type_params

   52 sign: INTEGER
   53     | FLOAT
   54     | "+" sign
   55     | "-" sign

   56 arithm_expr: sign
   57            | IDENTIFIER
   58            | arithm_expr "+" arithm_expr
   59            | arithm_expr "-" arithm_expr
   60            | arithm_expr "*" arithm_expr
   61            | arithm_expr "/" arithm_expr
   62            | arithm_expr "%" arithm_expr

   63 number: INTEGER
   64       | FLOAT
   65       | pos_elem

   66 assign: var "=" val
   67       | var "=" cmp_expr
   68       | var "=" arithm_expr
   69       | var "=" merge_arr

   70 oper_eq: var "++"
   71        | var "--"
   72        | "++" var
   73        | "--" var
   74        | var "+=" number
   75        | var "-=" number
   76        | var "*=" number
   77        | var "/=" number

   78 val: number
   79    | IDENTIFIER
   80    | STRING
   81    | arr_elements
   82    | val "," val

   83 cmp_expr: INTEGER
   84         | FLOAT
   85         | IDENTIFIER
   86         | cmp_expr ">" cmp_expr
   87         | cmp_expr "<" cmp_expr
   88         | cmp_expr "<=" cmp_expr
   89         | cmp_expr ">=" cmp_expr
   90         | cmp_expr "==" cmp_expr
   91         | cmp_expr "!=" cmp_expr
   92         | cmp_expr "||" cmp_expr
   93         | cmp_expr "&&" cmp_expr
   94         | "!" cmp_expr

   95 merge_arr: arr_elements "+" arr_elements

   96 decl_statements: decl_statement
   97                | decl_statements decl_statement

   98 decl_statement: if_statement
   99               | while_statement
  100               | for_statement
  101               | decl_var ";"
  102               | build_func ";"
  103               | decl_func
  104               | call_func ";"
  105               | assign ";"
  106               | block_statement
  107               | NEWLINE

  108 if_statement: SIF condition decl_statement

  109 condition: cmp_expr
  110          | "(" condition ")"

  111 block_statement: "{" decl_statements "}"

  112 while_statement: SWHILE condition decl_statement

  113 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <sval> (258) 11 13 14 30 33 35 38 46 50 57 79 85
    STRING <sval> (259) 23 32 34 37 80
    INTEGER <ival> (260) 13 19 39 52 63 83
    FLOAT <fval> (261) 21 40 53 64 84
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 108
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 8
    SINT <sval> (268) 6
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 45
    SELSE <sval> (271)
    SLONG <sval> (272) 10
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 7
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279) 113
    SSHORT <sval> (280) 9
    SWHILE <sval> (281) 112
    "+" (282) 54 58 95
    "*=" (283) 76
    "--" (284) 71 73
    "-" (285) 55 59
    "/=" (286) 77
    "<" (287) 87
    "*" (288) 60
    "!" (289) 94
    ">" (290) 86
    "/" (291) 61
    "&&" (292) 93
    "<=" (293) 88
    "%" (294) 62
    "||" (295) 92
    ">=" (296) 89
    "=" (297) 66 67 68 69
    "==" (298) 90
    "&" (299)
    "+=" (300) 74
    "!=" (301) 91
    "-=" (302) 75
    "++" (303) 70 72
    "(" (304) 26 27 28 29 47 48 49 110 113
    ")" (305) 26 27 28 29 47 48 49 110 113
    "[" (306) 13 14 15 16 17 18
    "]" (307) 13 14 15 16 17 18
    "{" (308) 111
    "}" (309) 111
    "," (310) 12 20 22 24 36 43 51 82
    "\\" (311)
    ";" (312) 3 101 102 104 105 113
    SSCAN (313) 26
    SPRINT (314) 29
    SLEN (315) 27
    SCMP (316) 28
    NEWLINE (317) 4 46 107
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program <sval> (65)
        on left: 1
        on right: 0
    logic_line <sval> (66)
        on left: 2 3 4
        on right: 1 3 4
    decl_var <sval> (67)
        on left: 5
        on right: 101
    type <sval> (68)
        on left: 6 7 8 9 10
        on right: 5 50
    var <sval> (69)
        on left: 11 12
        on right: 5 12 66 67 68 69 70 71 72 73 74 75 76 77
    pos_elem <sval> (70)
        on left: 13 14
        on right: 42 65
    arr_elements <sval> (71)
        on left: 15 16 17 18
        on right: 31 81 95
    integ <sval> (72)
        on left: 19 20
        on right: 16 20
    fl <sval> (73)
        on left: 21 22
        on right: 17 22
    str <sval> (74)
        on left: 23 24
        on right: 18 24
    build_func <sval> (75)
        on left: 25
        on right: 102
    func <sval> (76)
        on left: 26 27 28 29
        on right: 25 41
    scan_params <sval> (77)
        on left: 30
        on right: 26
    len_params <sval> (78)
        on left: 31 32 33
        on right: 27
    cmp_params <sval> (79)
        on left: 34 35 36
        on right: 28 36
    print_params <sval> (80)
        on left: 37 38 39 40 41 42 43
        on right: 29 43 47
    decl_func <sval> (81)
        on left: 44
        on right: 103
    name_func <sval> (82)
        on left: 45 46
        on right: 44 46 47
    call_func <sval> (83)
        on left: 47
        on right: 104
    params <sval> (84)
        on left: 48 49
        on right: 46
    type_params <sval> (85)
        on left: 50 51
        on right: 49 51
    sign <sval> (86)
        on left: 52 53 54 55
        on right: 54 55 56
    arithm_expr <sval> (87)
        on left: 56 57 58 59 60 61 62
        on right: 58 59 60 61 62 68
    number <sval> (88)
        on left: 63 64 65
        on right: 74 75 76 77 78
    assign <sval> (89)
        on left: 66 67 68 69
        on right: 105 113
    oper_eq <sval> (90)
        on left: 70 71 72 73 74 75 76 77
        on right: 113
    val <sval> (91)
        on left: 78 79 80 81 82
        on right: 66 82
    cmp_expr <sval> (92)
        on left: 83 84 85 86 87 88 89 90 91 92 93 94
        on right: 67 86 87 88 89 90 91 92 93 94 109 113
    merge_arr <sval> (93)
        on left: 95
        on right: 69
    decl_statements <sval> (94)
        on left: 96 97
        on right: 2 97 111
    decl_statement <sval> (95)
        on left: 98 99 100 101 102 103 104 105 106 107
        on right: 44 96 97 108 112 113
    if_statement <sval> (96)
        on left: 108
        on right: 98
    condition <sval> (97)
        on left: 109 110
        on right: 108 110 112
    block_statement <sval> (98)
        on left: 111
        on right: 106
    while_statement <sval> (99)
        on left: 112
        on right: 99
    for_statement <sval> (100)
        on left: 113
        on right: 100


State 0

    0 $accept: • program $end

    IDENTIFIER  shift, and go to state 1
    SIF         shift, and go to state 2
    SDOUBLE     shift, and go to state 3
    SINT        shift, and go to state 4
    SFUNC       shift, and go to state 5
    SLONG       shift, and go to state 6
    SFLOAT      shift, and go to state 7
    SFOR        shift, and go to state 8
    SSHORT      shift, and go to state 9
    SWHILE      shift, and go to state 10
    "{"         shift, and go to state 11
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15
    NEWLINE     shift, and go to state 16

    program          go to state 17
    logic_line       go to state 18
    decl_var         go to state 19
    type             go to state 20
    var              go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    call_func        go to state 26
    assign           go to state 27
    decl_statements  go to state 28
    decl_statement   go to state 29
    if_statement     go to state 30
    block_statement  go to state 31
    while_statement  go to state 32
    for_statement    go to state 33


State 1

   11 var: IDENTIFIER •

    $default  reduce using rule 11 (var)


State 2

  108 if_statement: SIF • condition decl_statement

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37
    "("         shift, and go to state 38

    cmp_expr   go to state 39
    condition  go to state 40


State 3

    8 type: SDOUBLE •

    $default  reduce using rule 8 (type)


State 4

    6 type: SINT •

    $default  reduce using rule 6 (type)


State 5

   45 name_func: SFUNC •

    $default  reduce using rule 45 (name_func)


State 6

   10 type: SLONG •

    $default  reduce using rule 10 (type)


State 7

    7 type: SFLOAT •

    $default  reduce using rule 7 (type)


State 8

  113 for_statement: SFOR • "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement

    "("  shift, and go to state 41


State 9

    9 type: SSHORT •

    $default  reduce using rule 9 (type)


State 10

  112 while_statement: SWHILE • condition decl_statement

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37
    "("         shift, and go to state 38

    cmp_expr   go to state 39
    condition  go to state 42


State 11

  111 block_statement: "{" • decl_statements "}"

    IDENTIFIER  shift, and go to state 1
    SIF         shift, and go to state 2
    SDOUBLE     shift, and go to state 3
    SINT        shift, and go to state 4
    SFUNC       shift, and go to state 5
    SLONG       shift, and go to state 6
    SFLOAT      shift, and go to state 7
    SFOR        shift, and go to state 8
    SSHORT      shift, and go to state 9
    SWHILE      shift, and go to state 10
    "{"         shift, and go to state 11
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15
    NEWLINE     shift, and go to state 16

    decl_var         go to state 19
    type             go to state 20
    var              go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    call_func        go to state 26
    assign           go to state 27
    decl_statements  go to state 43
    decl_statement   go to state 29
    if_statement     go to state 30
    block_statement  go to state 31
    while_statement  go to state 32
    for_statement    go to state 33


State 12

   26 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 44


State 13

   29 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 45


State 14

   27 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 46


State 15

   28 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 47


State 16

  107 decl_statement: NEWLINE •

    $default  reduce using rule 107 (decl_statement)


State 17

    0 $accept: program • $end

    $end  shift, and go to state 48


State 18

    1 program: logic_line •
    3 logic_line: logic_line • ";"
    4           | logic_line • NEWLINE

    ";"      shift, and go to state 49
    NEWLINE  shift, and go to state 50

    $default  reduce using rule 1 (program)


State 19

  101 decl_statement: decl_var • ";"

    ";"  shift, and go to state 51


State 20

    5 decl_var: type • var

    IDENTIFIER  shift, and go to state 1

    var  go to state 52


State 21

   12 var: var • "," var
   66 assign: var • "=" val
   67       | var • "=" cmp_expr
   68       | var • "=" arithm_expr
   69       | var • "=" merge_arr

    "="  shift, and go to state 53
    ","  shift, and go to state 54


State 22

  102 decl_statement: build_func • ";"

    ";"  shift, and go to state 55


State 23

   25 build_func: func •

    $default  reduce using rule 25 (build_func)


State 24

  103 decl_statement: decl_func •

    $default  reduce using rule 103 (decl_statement)


State 25

   44 decl_func: name_func • decl_statement
   46 name_func: name_func • IDENTIFIER params NEWLINE
   47 call_func: name_func • "(" print_params ")"

    IDENTIFIER  shift, and go to state 56
    SIF         shift, and go to state 2
    SDOUBLE     shift, and go to state 3
    SINT        shift, and go to state 4
    SFUNC       shift, and go to state 5
    SLONG       shift, and go to state 6
    SFLOAT      shift, and go to state 7
    SFOR        shift, and go to state 8
    SSHORT      shift, and go to state 9
    SWHILE      shift, and go to state 10
    "("         shift, and go to state 57
    "{"         shift, and go to state 11
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15
    NEWLINE     shift, and go to state 16

    decl_var         go to state 19
    type             go to state 20
    var              go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    call_func        go to state 26
    assign           go to state 27
    decl_statement   go to state 58
    if_statement     go to state 30
    block_statement  go to state 31
    while_statement  go to state 32
    for_statement    go to state 33


State 26

  104 decl_statement: call_func • ";"

    ";"  shift, and go to state 59


State 27

  105 decl_statement: assign • ";"

    ";"  shift, and go to state 60


State 28

    2 logic_line: decl_statements •
   97 decl_statements: decl_statements • decl_statement

    IDENTIFIER  shift, and go to state 1
    SIF         shift, and go to state 2
    SDOUBLE     shift, and go to state 3
    SINT        shift, and go to state 4
    SFUNC       shift, and go to state 5
    SLONG       shift, and go to state 6
    SFLOAT      shift, and go to state 7
    SFOR        shift, and go to state 8
    SSHORT      shift, and go to state 9
    SWHILE      shift, and go to state 10
    "{"         shift, and go to state 11
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15
    NEWLINE     shift, and go to state 16

    NEWLINE   [reduce using rule 2 (logic_line)]
    $default  reduce using rule 2 (logic_line)

    decl_var         go to state 19
    type             go to state 20
    var              go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    call_func        go to state 26
    assign           go to state 27
    decl_statement   go to state 61
    if_statement     go to state 30
    block_statement  go to state 31
    while_statement  go to state 32
    for_statement    go to state 33


State 29

   96 decl_statements: decl_statement •

    $default  reduce using rule 96 (decl_statements)


State 30

   98 decl_statement: if_statement •

    $default  reduce using rule 98 (decl_statement)


State 31

  106 decl_statement: block_statement •

    $default  reduce using rule 106 (decl_statement)


State 32

   99 decl_statement: while_statement •

    $default  reduce using rule 99 (decl_statement)


State 33

  100 decl_statement: for_statement •

    $default  reduce using rule 100 (decl_statement)


State 34

   85 cmp_expr: IDENTIFIER •

    $default  reduce using rule 85 (cmp_expr)


State 35

   83 cmp_expr: INTEGER •

    $default  reduce using rule 83 (cmp_expr)


State 36

   84 cmp_expr: FLOAT •

    $default  reduce using rule 84 (cmp_expr)


State 37

   94 cmp_expr: "!" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 62


State 38

  110 condition: "(" • condition ")"

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37
    "("         shift, and go to state 38

    cmp_expr   go to state 39
    condition  go to state 63


State 39

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
  109 condition: cmp_expr •

    "<"   shift, and go to state 64
    ">"   shift, and go to state 65
    "&&"  shift, and go to state 66
    "<="  shift, and go to state 67
    "||"  shift, and go to state 68
    ">="  shift, and go to state 69
    "=="  shift, and go to state 70
    "!="  shift, and go to state 71

    $default  reduce using rule 109 (condition)


State 40

  108 if_statement: SIF condition • decl_statement

    IDENTIFIER  shift, and go to state 1
    SIF         shift, and go to state 2
    SDOUBLE     shift, and go to state 3
    SINT        shift, and go to state 4
    SFUNC       shift, and go to state 5
    SLONG       shift, and go to state 6
    SFLOAT      shift, and go to state 7
    SFOR        shift, and go to state 8
    SSHORT      shift, and go to state 9
    SWHILE      shift, and go to state 10
    "{"         shift, and go to state 11
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15
    NEWLINE     shift, and go to state 16

    decl_var         go to state 19
    type             go to state 20
    var              go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    call_func        go to state 26
    assign           go to state 27
    decl_statement   go to state 72
    if_statement     go to state 30
    block_statement  go to state 31
    while_statement  go to state 32
    for_statement    go to state 33


State 41

  113 for_statement: SFOR "(" • assign ";" cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 1

    var     go to state 21
    assign  go to state 73


State 42

  112 while_statement: SWHILE condition • decl_statement

    IDENTIFIER  shift, and go to state 1
    SIF         shift, and go to state 2
    SDOUBLE     shift, and go to state 3
    SINT        shift, and go to state 4
    SFUNC       shift, and go to state 5
    SLONG       shift, and go to state 6
    SFLOAT      shift, and go to state 7
    SFOR        shift, and go to state 8
    SSHORT      shift, and go to state 9
    SWHILE      shift, and go to state 10
    "{"         shift, and go to state 11
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15
    NEWLINE     shift, and go to state 16

    decl_var         go to state 19
    type             go to state 20
    var              go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    call_func        go to state 26
    assign           go to state 27
    decl_statement   go to state 74
    if_statement     go to state 30
    block_statement  go to state 31
    while_statement  go to state 32
    for_statement    go to state 33


State 43

   97 decl_statements: decl_statements • decl_statement
  111 block_statement: "{" decl_statements • "}"

    IDENTIFIER  shift, and go to state 1
    SIF         shift, and go to state 2
    SDOUBLE     shift, and go to state 3
    SINT        shift, and go to state 4
    SFUNC       shift, and go to state 5
    SLONG       shift, and go to state 6
    SFLOAT      shift, and go to state 7
    SFOR        shift, and go to state 8
    SSHORT      shift, and go to state 9
    SWHILE      shift, and go to state 10
    "{"         shift, and go to state 11
    "}"         shift, and go to state 75
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15
    NEWLINE     shift, and go to state 16

    decl_var         go to state 19
    type             go to state 20
    var              go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    call_func        go to state 26
    assign           go to state 27
    decl_statement   go to state 61
    if_statement     go to state 30
    block_statement  go to state 31
    while_statement  go to state 32
    for_statement    go to state 33


State 44

   26 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 76

    scan_params  go to state 77


State 45

   29 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 78
    STRING      shift, and go to state 79
    INTEGER     shift, and go to state 80
    FLOAT       shift, and go to state 81
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15

    pos_elem      go to state 82
    func          go to state 83
    print_params  go to state 84


State 46

   27 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 85
    STRING      shift, and go to state 86
    "["         shift, and go to state 87

    arr_elements  go to state 88
    len_params    go to state 89


State 47

   28 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 90
    STRING      shift, and go to state 91

    cmp_params  go to state 92


State 48

    0 $accept: program $end •

    $default  accept


State 49

    3 logic_line: logic_line ";" •

    $default  reduce using rule 3 (logic_line)


State 50

    4 logic_line: logic_line NEWLINE •

    $default  reduce using rule 4 (logic_line)


State 51

  101 decl_statement: decl_var ";" •

    $default  reduce using rule 101 (decl_statement)


State 52

    5 decl_var: type var •
   12 var: var • "," var

    ","  shift, and go to state 54

    $default  reduce using rule 5 (decl_var)


State 53

   66 assign: var "=" • val
   67       | var "=" • cmp_expr
   68       | var "=" • arithm_expr
   69       | var "=" • merge_arr

    IDENTIFIER  shift, and go to state 93
    STRING      shift, and go to state 94
    INTEGER     shift, and go to state 95
    FLOAT       shift, and go to state 96
    "+"         shift, and go to state 97
    "-"         shift, and go to state 98
    "!"         shift, and go to state 37
    "["         shift, and go to state 87

    pos_elem      go to state 99
    arr_elements  go to state 100
    sign          go to state 101
    arithm_expr   go to state 102
    number        go to state 103
    val           go to state 104
    cmp_expr      go to state 105
    merge_arr     go to state 106


State 54

   12 var: var "," • var

    IDENTIFIER  shift, and go to state 1

    var  go to state 107


State 55

  102 decl_statement: build_func ";" •

    $default  reduce using rule 102 (decl_statement)


State 56

   11 var: IDENTIFIER •
   46 name_func: name_func IDENTIFIER • params NEWLINE

    "("  shift, and go to state 108

    $default  reduce using rule 11 (var)

    params  go to state 109


State 57

   47 call_func: name_func "(" • print_params ")"

    IDENTIFIER  shift, and go to state 78
    STRING      shift, and go to state 79
    INTEGER     shift, and go to state 80
    FLOAT       shift, and go to state 81
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15

    pos_elem      go to state 82
    func          go to state 83
    print_params  go to state 110


State 58

   44 decl_func: name_func decl_statement •

    $default  reduce using rule 44 (decl_func)


State 59

  104 decl_statement: call_func ";" •

    $default  reduce using rule 104 (decl_statement)


State 60

  105 decl_statement: assign ";" •

    $default  reduce using rule 105 (decl_statement)


State 61

   97 decl_statements: decl_statements decl_statement •

    $default  reduce using rule 97 (decl_statements)


State 62

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
   94         | "!" cmp_expr •

    $default  reduce using rule 94 (cmp_expr)


State 63

  110 condition: "(" condition • ")"

    ")"  shift, and go to state 111


State 64

   87 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 112


State 65

   86 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 113


State 66

   93 cmp_expr: cmp_expr "&&" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 114


State 67

   88 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 115


State 68

   92 cmp_expr: cmp_expr "||" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 116


State 69

   89 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 117


State 70

   90 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 118


State 71

   91 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 119


State 72

  108 if_statement: SIF condition decl_statement •

    $default  reduce using rule 108 (if_statement)


State 73

  113 for_statement: SFOR "(" assign • ";" cmp_expr ";" oper_eq ")" decl_statement

    ";"  shift, and go to state 120


State 74

  112 while_statement: SWHILE condition decl_statement •

    $default  reduce using rule 112 (while_statement)


State 75

  111 block_statement: "{" decl_statements "}" •

    $default  reduce using rule 111 (block_statement)


State 76

   30 scan_params: IDENTIFIER •

    $default  reduce using rule 30 (scan_params)


State 77

   26 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 121


State 78

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   38 print_params: IDENTIFIER •

    "["  shift, and go to state 122

    $default  reduce using rule 38 (print_params)


State 79

   37 print_params: STRING •

    $default  reduce using rule 37 (print_params)


State 80

   39 print_params: INTEGER •

    $default  reduce using rule 39 (print_params)


State 81

   40 print_params: FLOAT •

    $default  reduce using rule 40 (print_params)


State 82

   42 print_params: pos_elem •

    $default  reduce using rule 42 (print_params)


State 83

   41 print_params: func •

    $default  reduce using rule 41 (print_params)


State 84

   29 func: SPRINT "(" print_params • ")"
   43 print_params: print_params • "," print_params

    ")"  shift, and go to state 123
    ","  shift, and go to state 124


State 85

   33 len_params: IDENTIFIER •

    $default  reduce using rule 33 (len_params)


State 86

   32 len_params: STRING •

    $default  reduce using rule 32 (len_params)


State 87

   15 arr_elements: "[" • "]"
   16             | "[" • integ "]"
   17             | "[" • fl "]"
   18             | "[" • str "]"

    STRING   shift, and go to state 125
    INTEGER  shift, and go to state 126
    FLOAT    shift, and go to state 127
    "]"      shift, and go to state 128

    integ  go to state 129
    fl     go to state 130
    str    go to state 131


State 88

   31 len_params: arr_elements •

    $default  reduce using rule 31 (len_params)


State 89

   27 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 132


State 90

   35 cmp_params: IDENTIFIER •

    $default  reduce using rule 35 (cmp_params)


State 91

   34 cmp_params: STRING •

    $default  reduce using rule 34 (cmp_params)


State 92

   28 func: SCMP "(" cmp_params • ")"
   36 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 133
    ","  shift, and go to state 134


State 93

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   57 arithm_expr: IDENTIFIER •
   79 val: IDENTIFIER •
   85 cmp_expr: IDENTIFIER •

    "["  shift, and go to state 122

    "+"       reduce using rule 57 (arithm_expr)
    "-"       reduce using rule 57 (arithm_expr)
    "*"       reduce using rule 57 (arithm_expr)
    "/"       reduce using rule 57 (arithm_expr)
    "%"       reduce using rule 57 (arithm_expr)
    ","       reduce using rule 79 (val)
    ";"       reduce using rule 57 (arithm_expr)
    ";"       [reduce using rule 79 (val)]
    ";"       [reduce using rule 85 (cmp_expr)]
    $default  reduce using rule 85 (cmp_expr)


State 94

   80 val: STRING •

    $default  reduce using rule 80 (val)


State 95

   52 sign: INTEGER •
   63 number: INTEGER •
   83 cmp_expr: INTEGER •

    "+"       reduce using rule 52 (sign)
    "-"       reduce using rule 52 (sign)
    "*"       reduce using rule 52 (sign)
    "/"       reduce using rule 52 (sign)
    "%"       reduce using rule 52 (sign)
    ","       reduce using rule 63 (number)
    ";"       reduce using rule 52 (sign)
    ";"       [reduce using rule 63 (number)]
    ";"       [reduce using rule 83 (cmp_expr)]
    $default  reduce using rule 83 (cmp_expr)


State 96

   53 sign: FLOAT •
   64 number: FLOAT •
   84 cmp_expr: FLOAT •

    "+"       reduce using rule 53 (sign)
    "-"       reduce using rule 53 (sign)
    "*"       reduce using rule 53 (sign)
    "/"       reduce using rule 53 (sign)
    "%"       reduce using rule 53 (sign)
    ","       reduce using rule 64 (number)
    ";"       reduce using rule 53 (sign)
    ";"       [reduce using rule 64 (number)]
    ";"       [reduce using rule 84 (cmp_expr)]
    $default  reduce using rule 84 (cmp_expr)


State 97

   54 sign: "+" • sign

    INTEGER  shift, and go to state 135
    FLOAT    shift, and go to state 136
    "+"      shift, and go to state 97
    "-"      shift, and go to state 98

    sign  go to state 137


State 98

   55 sign: "-" • sign

    INTEGER  shift, and go to state 135
    FLOAT    shift, and go to state 136
    "+"      shift, and go to state 97
    "-"      shift, and go to state 98

    sign  go to state 138


State 99

   65 number: pos_elem •

    $default  reduce using rule 65 (number)


State 100

   81 val: arr_elements •
   95 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 139

    $default  reduce using rule 81 (val)


State 101

   56 arithm_expr: sign •

    $default  reduce using rule 56 (arithm_expr)


State 102

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   68 assign: var "=" arithm_expr •

    "+"  shift, and go to state 140
    "-"  shift, and go to state 141
    "*"  shift, and go to state 142
    "/"  shift, and go to state 143
    "%"  shift, and go to state 144

    $default  reduce using rule 68 (assign)


State 103

   78 val: number •

    $default  reduce using rule 78 (val)


State 104

   66 assign: var "=" val •
   82 val: val • "," val

    ","  shift, and go to state 145

    $default  reduce using rule 66 (assign)


State 105

   67 assign: var "=" cmp_expr •
   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 64
    ">"   shift, and go to state 65
    "&&"  shift, and go to state 66
    "<="  shift, and go to state 67
    "||"  shift, and go to state 68
    ">="  shift, and go to state 69
    "=="  shift, and go to state 70
    "!="  shift, and go to state 71

    $default  reduce using rule 67 (assign)


State 106

   69 assign: var "=" merge_arr •

    $default  reduce using rule 69 (assign)


State 107

   12 var: var • "," var
   12    | var "," var •

    $default  reduce using rule 12 (var)


State 108

   48 params: "(" • ")"
   49       | "(" • type_params ")"

    SDOUBLE  shift, and go to state 3
    SINT     shift, and go to state 4
    SLONG    shift, and go to state 6
    SFLOAT   shift, and go to state 7
    SSHORT   shift, and go to state 9
    ")"      shift, and go to state 146

    type         go to state 147
    type_params  go to state 148


State 109

   46 name_func: name_func IDENTIFIER params • NEWLINE

    NEWLINE  shift, and go to state 149


State 110

   43 print_params: print_params • "," print_params
   47 call_func: name_func "(" print_params • ")"

    ")"  shift, and go to state 150
    ","  shift, and go to state 124


State 111

  110 condition: "(" condition ")" •

    $default  reduce using rule 110 (condition)


State 112

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   87         | cmp_expr "<" cmp_expr •
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 87 (cmp_expr)


State 113

   86 cmp_expr: cmp_expr • ">" cmp_expr
   86         | cmp_expr ">" cmp_expr •
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 86 (cmp_expr)


State 114

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
   93         | cmp_expr "&&" cmp_expr •

    "<"   shift, and go to state 64
    ">"   shift, and go to state 65
    "<="  shift, and go to state 67
    ">="  shift, and go to state 69
    "=="  shift, and go to state 70
    "!="  shift, and go to state 71

    $default  reduce using rule 93 (cmp_expr)


State 115

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   88         | cmp_expr "<=" cmp_expr •
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 88 (cmp_expr)


State 116

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   92         | cmp_expr "||" cmp_expr •
   93         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 64
    ">"   shift, and go to state 65
    "&&"  shift, and go to state 66
    "<="  shift, and go to state 67
    ">="  shift, and go to state 69
    "=="  shift, and go to state 70
    "!="  shift, and go to state 71

    $default  reduce using rule 92 (cmp_expr)


State 117

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   89         | cmp_expr ">=" cmp_expr •
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 89 (cmp_expr)


State 118

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   90         | cmp_expr "==" cmp_expr •
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 64
    ">"   shift, and go to state 65
    "<="  shift, and go to state 67
    ">="  shift, and go to state 69

    $default  reduce using rule 90 (cmp_expr)


State 119

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   91         | cmp_expr "!=" cmp_expr •
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 64
    ">"   shift, and go to state 65
    "<="  shift, and go to state 67
    ">="  shift, and go to state 69

    $default  reduce using rule 91 (cmp_expr)


State 120

  113 for_statement: SFOR "(" assign ";" • cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 34
    INTEGER     shift, and go to state 35
    FLOAT       shift, and go to state 36
    "!"         shift, and go to state 37

    cmp_expr  go to state 151


State 121

   26 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 26 (func)


State 122

   13 pos_elem: IDENTIFIER "[" • INTEGER "]"
   14         | IDENTIFIER "[" • IDENTIFIER "]"

    IDENTIFIER  shift, and go to state 152
    INTEGER     shift, and go to state 153


State 123

   29 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 29 (func)


State 124

   43 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 78
    STRING      shift, and go to state 79
    INTEGER     shift, and go to state 80
    FLOAT       shift, and go to state 81
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15

    pos_elem      go to state 82
    func          go to state 83
    print_params  go to state 154


State 125

   23 str: STRING •

    $default  reduce using rule 23 (str)


State 126

   19 integ: INTEGER •

    $default  reduce using rule 19 (integ)


State 127

   21 fl: FLOAT •

    $default  reduce using rule 21 (fl)


State 128

   15 arr_elements: "[" "]" •

    $default  reduce using rule 15 (arr_elements)


State 129

   16 arr_elements: "[" integ • "]"
   20 integ: integ • "," integ

    "]"  shift, and go to state 155
    ","  shift, and go to state 156


State 130

   17 arr_elements: "[" fl • "]"
   22 fl: fl • "," fl

    "]"  shift, and go to state 157
    ","  shift, and go to state 158


State 131

   18 arr_elements: "[" str • "]"
   24 str: str • "," str

    "]"  shift, and go to state 159
    ","  shift, and go to state 160


State 132

   27 func: SLEN "(" len_params ")" •

    $default  reduce using rule 27 (func)


State 133

   28 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 28 (func)


State 134

   36 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 90
    STRING      shift, and go to state 91

    cmp_params  go to state 161


State 135

   52 sign: INTEGER •

    $default  reduce using rule 52 (sign)


State 136

   53 sign: FLOAT •

    $default  reduce using rule 53 (sign)


State 137

   54 sign: "+" sign •

    $default  reduce using rule 54 (sign)


State 138

   55 sign: "-" sign •

    $default  reduce using rule 55 (sign)


State 139

   95 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 87

    arr_elements  go to state 162


State 140

   58 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 163
    INTEGER     shift, and go to state 135
    FLOAT       shift, and go to state 136
    "+"         shift, and go to state 97
    "-"         shift, and go to state 98

    sign         go to state 101
    arithm_expr  go to state 164


State 141

   59 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 163
    INTEGER     shift, and go to state 135
    FLOAT       shift, and go to state 136
    "+"         shift, and go to state 97
    "-"         shift, and go to state 98

    sign         go to state 101
    arithm_expr  go to state 165


State 142

   60 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 163
    INTEGER     shift, and go to state 135
    FLOAT       shift, and go to state 136
    "+"         shift, and go to state 97
    "-"         shift, and go to state 98

    sign         go to state 101
    arithm_expr  go to state 166


State 143

   61 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 163
    INTEGER     shift, and go to state 135
    FLOAT       shift, and go to state 136
    "+"         shift, and go to state 97
    "-"         shift, and go to state 98

    sign         go to state 101
    arithm_expr  go to state 167


State 144

   62 arithm_expr: arithm_expr "%" • arithm_expr

    IDENTIFIER  shift, and go to state 163
    INTEGER     shift, and go to state 135
    FLOAT       shift, and go to state 136
    "+"         shift, and go to state 97
    "-"         shift, and go to state 98

    sign         go to state 101
    arithm_expr  go to state 168


State 145

   82 val: val "," • val

    IDENTIFIER  shift, and go to state 169
    STRING      shift, and go to state 94
    INTEGER     shift, and go to state 170
    FLOAT       shift, and go to state 171
    "["         shift, and go to state 87

    pos_elem      go to state 99
    arr_elements  go to state 172
    number        go to state 103
    val           go to state 173


State 146

   48 params: "(" ")" •

    $default  reduce using rule 48 (params)


State 147

   50 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 174


State 148

   49 params: "(" type_params • ")"
   51 type_params: type_params • "," type_params

    ")"  shift, and go to state 175
    ","  shift, and go to state 176


State 149

   46 name_func: name_func IDENTIFIER params NEWLINE •

    $default  reduce using rule 46 (name_func)


State 150

   47 call_func: name_func "(" print_params ")" •

    $default  reduce using rule 47 (call_func)


State 151

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
  113 for_statement: SFOR "(" assign ";" cmp_expr • ";" oper_eq ")" decl_statement

    "<"   shift, and go to state 64
    ">"   shift, and go to state 65
    "&&"  shift, and go to state 66
    "<="  shift, and go to state 67
    "||"  shift, and go to state 68
    ">="  shift, and go to state 69
    "=="  shift, and go to state 70
    "!="  shift, and go to state 71
    ";"   shift, and go to state 177


State 152

   14 pos_elem: IDENTIFIER "[" IDENTIFIER • "]"

    "]"  shift, and go to state 178


State 153

   13 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 179


State 154

   43 print_params: print_params • "," print_params
   43             | print_params "," print_params •

    $default  reduce using rule 43 (print_params)


State 155

   16 arr_elements: "[" integ "]" •

    $default  reduce using rule 16 (arr_elements)


State 156

   20 integ: integ "," • integ

    INTEGER  shift, and go to state 126

    integ  go to state 180


State 157

   17 arr_elements: "[" fl "]" •

    $default  reduce using rule 17 (arr_elements)


State 158

   22 fl: fl "," • fl

    FLOAT  shift, and go to state 127

    fl  go to state 181


State 159

   18 arr_elements: "[" str "]" •

    $default  reduce using rule 18 (arr_elements)


State 160

   24 str: str "," • str

    STRING  shift, and go to state 125

    str  go to state 182


State 161

   36 cmp_params: cmp_params • "," cmp_params
   36           | cmp_params "," cmp_params •

    $default  reduce using rule 36 (cmp_params)


State 162

   95 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 95 (merge_arr)


State 163

   57 arithm_expr: IDENTIFIER •

    $default  reduce using rule 57 (arithm_expr)


State 164

   58 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr "+" arithm_expr •
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 142
    "/"  shift, and go to state 143
    "%"  shift, and go to state 144

    $default  reduce using rule 58 (arithm_expr)


State 165

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   59            | arithm_expr "-" arithm_expr •
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 142
    "/"  shift, and go to state 143
    "%"  shift, and go to state 144

    $default  reduce using rule 59 (arithm_expr)


State 166

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   60            | arithm_expr "*" arithm_expr •
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 60 (arithm_expr)


State 167

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   61            | arithm_expr "/" arithm_expr •
   62            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 61 (arithm_expr)


State 168

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   62            | arithm_expr "%" arithm_expr •

    $default  reduce using rule 62 (arithm_expr)


State 169

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   79 val: IDENTIFIER •

    "["  shift, and go to state 122

    $default  reduce using rule 79 (val)


State 170

   63 number: INTEGER •

    $default  reduce using rule 63 (number)


State 171

   64 number: FLOAT •

    $default  reduce using rule 64 (number)


State 172

   81 val: arr_elements •

    $default  reduce using rule 81 (val)


State 173

   82 val: val • "," val
   82    | val "," val •

    $default  reduce using rule 82 (val)


State 174

   50 type_params: type IDENTIFIER •

    $default  reduce using rule 50 (type_params)


State 175

   49 params: "(" type_params ")" •

    $default  reduce using rule 49 (params)


State 176

   51 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 3
    SINT     shift, and go to state 4
    SLONG    shift, and go to state 6
    SFLOAT   shift, and go to state 7
    SSHORT   shift, and go to state 9

    type         go to state 147
    type_params  go to state 183


State 177

  113 for_statement: SFOR "(" assign ";" cmp_expr ";" • oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 1
    "--"        shift, and go to state 184
    "++"        shift, and go to state 185

    var      go to state 186
    oper_eq  go to state 187


State 178

   14 pos_elem: IDENTIFIER "[" IDENTIFIER "]" •

    $default  reduce using rule 14 (pos_elem)


State 179

   13 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 13 (pos_elem)


State 180

   20 integ: integ • "," integ
   20      | integ "," integ •

    $default  reduce using rule 20 (integ)


State 181

   22 fl: fl • "," fl
   22   | fl "," fl •

    $default  reduce using rule 22 (fl)


State 182

   24 str: str • "," str
   24    | str "," str •

    $default  reduce using rule 24 (str)


State 183

   51 type_params: type_params • "," type_params
   51            | type_params "," type_params •

    $default  reduce using rule 51 (type_params)


State 184

   73 oper_eq: "--" • var

    IDENTIFIER  shift, and go to state 1

    var  go to state 188


State 185

   72 oper_eq: "++" • var

    IDENTIFIER  shift, and go to state 1

    var  go to state 189


State 186

   12 var: var • "," var
   70 oper_eq: var • "++"
   71        | var • "--"
   74        | var • "+=" number
   75        | var • "-=" number
   76        | var • "*=" number
   77        | var • "/=" number

    "*="  shift, and go to state 190
    "--"  shift, and go to state 191
    "/="  shift, and go to state 192
    "+="  shift, and go to state 193
    "-="  shift, and go to state 194
    "++"  shift, and go to state 195
    ","   shift, and go to state 54


State 187

  113 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq • ")" decl_statement

    ")"  shift, and go to state 196


State 188

   12 var: var • "," var
   73 oper_eq: "--" var •

    ","  shift, and go to state 54

    $default  reduce using rule 73 (oper_eq)


State 189

   12 var: var • "," var
   72 oper_eq: "++" var •

    ","  shift, and go to state 54

    $default  reduce using rule 72 (oper_eq)


State 190

   76 oper_eq: var "*=" • number

    IDENTIFIER  shift, and go to state 197
    INTEGER     shift, and go to state 170
    FLOAT       shift, and go to state 171

    pos_elem  go to state 99
    number    go to state 198


State 191

   71 oper_eq: var "--" •

    $default  reduce using rule 71 (oper_eq)


State 192

   77 oper_eq: var "/=" • number

    IDENTIFIER  shift, and go to state 197
    INTEGER     shift, and go to state 170
    FLOAT       shift, and go to state 171

    pos_elem  go to state 99
    number    go to state 199


State 193

   74 oper_eq: var "+=" • number

    IDENTIFIER  shift, and go to state 197
    INTEGER     shift, and go to state 170
    FLOAT       shift, and go to state 171

    pos_elem  go to state 99
    number    go to state 200


State 194

   75 oper_eq: var "-=" • number

    IDENTIFIER  shift, and go to state 197
    INTEGER     shift, and go to state 170
    FLOAT       shift, and go to state 171

    pos_elem  go to state 99
    number    go to state 201


State 195

   70 oper_eq: var "++" •

    $default  reduce using rule 70 (oper_eq)


State 196

  113 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" • decl_statement

    IDENTIFIER  shift, and go to state 1
    SIF         shift, and go to state 2
    SDOUBLE     shift, and go to state 3
    SINT        shift, and go to state 4
    SFUNC       shift, and go to state 5
    SLONG       shift, and go to state 6
    SFLOAT      shift, and go to state 7
    SFOR        shift, and go to state 8
    SSHORT      shift, and go to state 9
    SWHILE      shift, and go to state 10
    "{"         shift, and go to state 11
    SSCAN       shift, and go to state 12
    SPRINT      shift, and go to state 13
    SLEN        shift, and go to state 14
    SCMP        shift, and go to state 15
    NEWLINE     shift, and go to state 16

    decl_var         go to state 19
    type             go to state 20
    var              go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    call_func        go to state 26
    assign           go to state 27
    decl_statement   go to state 202
    if_statement     go to state 30
    block_statement  go to state 31
    while_statement  go to state 32
    for_statement    go to state 33


State 197

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"

    "["  shift, and go to state 122


State 198

   76 oper_eq: var "*=" number •

    $default  reduce using rule 76 (oper_eq)


State 199

   77 oper_eq: var "/=" number •

    $default  reduce using rule 77 (oper_eq)


State 200

   74 oper_eq: var "+=" number •

    $default  reduce using rule 74 (oper_eq)


State 201

   75 oper_eq: var "-=" number •

    $default  reduce using rule 75 (oper_eq)


State 202

  113 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement •

    $default  reduce using rule 113 (for_statement)
