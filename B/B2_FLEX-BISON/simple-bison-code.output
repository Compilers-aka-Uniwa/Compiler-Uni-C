Terminals unused in grammar

    SBREAK
    SDO
    SIF
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    SFOR
    SWHILE
    "*="
    "--"
    "/="
    "!"
    "&&"
    "%"
    "||"
    "&"
    "+="
    "-="
    "++"
    "\\"
    UNKNOWN


State 3 conflicts: 1 reduce/reduce
State 4 conflicts: 1 reduce/reduce
State 5 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program build_func NEWLINE
    3        | program decl_func NEWLINE
    4        | program decl_ops NEWLINE
    5        | program NEWLINE
    6        | ε

    7 decl_var: type var ";"

    8 type: SINT
    9     | SFLOAT
   10     | SDOUBLE
   11     | SSHORT
   12     | SLONG

   13 var: IDENTIFIER
   14    | var "," var

   15 pos_elem: IDENTIFIER "[" INTEGER "]"

   16 arr_elements: "[" "]"
   17             | "[" integ "]"
   18             | "[" fl "]"
   19             | "[" str "]"

   20 integ: INTEGER
   21      | integ "," integ

   22 fl: FLOAT
   23   | fl "," fl

   24 str: STRING
   25    | str "," str

   26 build_func: func ";"

   27 func: SSCAN "(" scan_params ")"
   28     | SLEN "(" len_params ")"
   29     | SCMP "(" cmp_params ")"
   30     | SPRINT "(" print_params ")"

   31 scan_params: IDENTIFIER

   32 len_params: arr_elements
   33           | STRING
   34           | IDENTIFIER

   35 cmp_params: STRING
   36           | IDENTIFIER
   37           | cmp_params "," cmp_params

   38 print_params: STRING
   39             | IDENTIFIER
   40             | INTEGER
   41             | FLOAT
   42             | func
   43             | pos_elem
   44             | print_params "," print_params

   45 decl_func: name_func code_func

   46 name_func: IDENTIFIER
   47          | SFUNC name_func params NEWLINE

   48 params: "(" ")"
   49       | "(" type_params ")"

   50 type_params: type IDENTIFIER
   51            | type_params "," type_params

   52 code_func: "{" NEWLINE "}"

   53 decl_ops: arithm_expr NEWLINE
   54         | assign NEWLINE
   55         | cmp_expr NEWLINE
   56         | merge_arr NEWLINE

   57 sign: INTEGER
   58     | FLOAT
   59     | "+" sign
   60     | "-" sign

   61 arithm_expr: sign
   62            | IDENTIFIER
   63            | arithm_expr "+" arithm_expr
   64            | arithm_expr "-" arithm_expr
   65            | arithm_expr "*" arithm_expr
   66            | arithm_expr "/" arithm_expr

   67 assign: var "=" val ";"

   68 val: INTEGER
   69    | FLOAT
   70    | STRING
   71    | arr_elements
   72    | val "," val

   73 cmp_expr: INTEGER
   74         | FLOAT
   75         | IDENTIFIER
   76         | cmp_expr ">" cmp_expr
   77         | cmp_expr "<" cmp_expr
   78         | cmp_expr "<=" cmp_expr
   79         | cmp_expr ">=" cmp_expr
   80         | cmp_expr "==" cmp_expr
   81         | cmp_expr "!=" cmp_expr

   82 merge_arr: arr_elements "+" arr_elements


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <sval> (258) 13 15 31 34 36 39 46 50 62 75
    STRING <sval> (259) 24 33 35 38 70
    INTEGER <ival> (260) 15 20 40 57 68 73
    FLOAT <fval> (261) 22 41 58 69 74
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264)
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 10
    SINT <sval> (268) 8
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 47
    SELSE <sval> (271)
    SLONG <sval> (272) 12
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 9
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279)
    SSHORT <sval> (280) 11
    SWHILE <sval> (281)
    "+" (282) 59 63 82
    "*=" (283)
    "--" (284)
    "-" (285) 60 64
    "/=" (286)
    "<" (287) 77
    "*" (288) 65
    "!" (289)
    ">" (290) 76
    "/" (291) 66
    "&&" (292)
    "<=" (293) 78
    "%" (294)
    "||" (295)
    ">=" (296) 79
    "=" (297) 67
    "==" (298) 80
    "&" (299)
    "+=" (300)
    "!=" (301) 81
    "-=" (302)
    "++" (303)
    "(" (304) 27 28 29 30 48 49
    ")" (305) 27 28 29 30 48 49
    "[" (306) 15 16 17 18 19
    "]" (307) 15 16 17 18 19
    "{" (308) 52
    "}" (309) 52
    "," (310) 14 21 23 25 37 44 51 72
    "\\" (311)
    ";" (312) 7 26 67
    SSCAN (313) 27
    SPRINT (314) 30
    SLEN (315) 28
    SCMP (316) 29
    NEWLINE (317) 1 2 3 4 5 47 52 53 54 55 56
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program <sval> (65)
        on left: 1 2 3 4 5 6
        on right: 0 1 2 3 4 5
    decl_var <sval> (66)
        on left: 7
        on right: 1
    type <sval> (67)
        on left: 8 9 10 11 12
        on right: 7 50
    var <sval> (68)
        on left: 13 14
        on right: 7 14 67
    pos_elem <sval> (69)
        on left: 15
        on right: 43
    arr_elements <sval> (70)
        on left: 16 17 18 19
        on right: 32 71 82
    integ <sval> (71)
        on left: 20 21
        on right: 17 21
    fl <sval> (72)
        on left: 22 23
        on right: 18 23
    str <sval> (73)
        on left: 24 25
        on right: 19 25
    build_func <sval> (74)
        on left: 26
        on right: 2
    func <sval> (75)
        on left: 27 28 29 30
        on right: 26 42
    scan_params <sval> (76)
        on left: 31
        on right: 27
    len_params <sval> (77)
        on left: 32 33 34
        on right: 28
    cmp_params <sval> (78)
        on left: 35 36 37
        on right: 29 37
    print_params <sval> (79)
        on left: 38 39 40 41 42 43 44
        on right: 30 44
    decl_func <sval> (80)
        on left: 45
        on right: 3
    name_func <sval> (81)
        on left: 46 47
        on right: 45 47
    params <sval> (82)
        on left: 48 49
        on right: 47
    type_params <sval> (83)
        on left: 50 51
        on right: 49 51
    code_func <sval> (84)
        on left: 52
        on right: 45
    decl_ops <sval> (85)
        on left: 53 54 55 56
        on right: 4
    sign <sval> (86)
        on left: 57 58 59 60
        on right: 59 60 61
    arithm_expr <sval> (87)
        on left: 61 62 63 64 65 66
        on right: 53 63 64 65 66
    assign <sval> (88)
        on left: 67
        on right: 54
    val <sval> (89)
        on left: 68 69 70 71 72
        on right: 67 72
    cmp_expr <sval> (90)
        on left: 73 74 75 76 77 78 79 80 81
        on right: 55 76 77 78 79 80 81
    merge_arr <sval> (91)
        on left: 82
        on right: 56


State 0

    0 $accept: • program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • build_func NEWLINE
    3        | program • decl_func NEWLINE
    4        | program • decl_ops NEWLINE
    5        | program • NEWLINE

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SDOUBLE     shift, and go to state 6
    SINT        shift, and go to state 7
    SFUNC       shift, and go to state 8
    SLONG       shift, and go to state 9
    SFLOAT      shift, and go to state 10
    SSHORT      shift, and go to state 11
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13
    "["         shift, and go to state 14
    SSCAN       shift, and go to state 15
    SPRINT      shift, and go to state 16
    SLEN        shift, and go to state 17
    SCMP        shift, and go to state 18
    NEWLINE     shift, and go to state 19

    decl_var      go to state 20
    type          go to state 21
    var           go to state 22
    arr_elements  go to state 23
    build_func    go to state 24
    func          go to state 25
    decl_func     go to state 26
    name_func     go to state 27
    decl_ops      go to state 28
    sign          go to state 29
    arithm_expr   go to state 30
    assign        go to state 31
    cmp_expr      go to state 32
    merge_arr     go to state 33


State 2

    0 $accept: program $end •

    $default  accept


State 3

   13 var: IDENTIFIER •
   46 name_func: IDENTIFIER •
   62 arithm_expr: IDENTIFIER •
   75 cmp_expr: IDENTIFIER •

    "+"       reduce using rule 62 (arithm_expr)
    "-"       reduce using rule 62 (arithm_expr)
    "*"       reduce using rule 62 (arithm_expr)
    "/"       reduce using rule 62 (arithm_expr)
    "="       reduce using rule 13 (var)
    "{"       reduce using rule 46 (name_func)
    ","       reduce using rule 13 (var)
    NEWLINE   reduce using rule 62 (arithm_expr)
    NEWLINE   [reduce using rule 75 (cmp_expr)]
    $default  reduce using rule 75 (cmp_expr)

    reduce/reduce conflict on token NEWLINE:
       62 arithm_expr: IDENTIFIER •
       75 cmp_expr: IDENTIFIER •
      Example: IDENTIFIER • NEWLINE
      First reduce derivation
        decl_ops
        ↳ 53: arithm_expr        NEWLINE
              ↳ 62: IDENTIFIER •
      Second reduce derivation
        decl_ops
        ↳ 55: cmp_expr           NEWLINE
              ↳ 75: IDENTIFIER •



State 4

   57 sign: INTEGER •
   73 cmp_expr: INTEGER •

    "+"       reduce using rule 57 (sign)
    "-"       reduce using rule 57 (sign)
    "*"       reduce using rule 57 (sign)
    "/"       reduce using rule 57 (sign)
    NEWLINE   reduce using rule 57 (sign)
    NEWLINE   [reduce using rule 73 (cmp_expr)]
    $default  reduce using rule 73 (cmp_expr)

    reduce/reduce conflict on token NEWLINE:
       57 sign: INTEGER •
       73 cmp_expr: INTEGER •
      Example: INTEGER • NEWLINE
      First reduce derivation
        decl_ops
        ↳ 53: arithm_expr           NEWLINE
              ↳ 61: sign
                    ↳ 57: INTEGER •
      Second reduce derivation
        decl_ops
        ↳ 55: cmp_expr        NEWLINE
              ↳ 73: INTEGER •



State 5

   58 sign: FLOAT •
   74 cmp_expr: FLOAT •

    "+"       reduce using rule 58 (sign)
    "-"       reduce using rule 58 (sign)
    "*"       reduce using rule 58 (sign)
    "/"       reduce using rule 58 (sign)
    NEWLINE   reduce using rule 58 (sign)
    NEWLINE   [reduce using rule 74 (cmp_expr)]
    $default  reduce using rule 74 (cmp_expr)

    reduce/reduce conflict on token NEWLINE:
       58 sign: FLOAT •
       74 cmp_expr: FLOAT •
      Example: FLOAT • NEWLINE
      First reduce derivation
        decl_ops
        ↳ 53: arithm_expr         NEWLINE
              ↳ 61: sign
                    ↳ 58: FLOAT •
      Second reduce derivation
        decl_ops
        ↳ 55: cmp_expr      NEWLINE
              ↳ 74: FLOAT •



State 6

   10 type: SDOUBLE •

    $default  reduce using rule 10 (type)


State 7

    8 type: SINT •

    $default  reduce using rule 8 (type)


State 8

   47 name_func: SFUNC • name_func params NEWLINE

    IDENTIFIER  shift, and go to state 34
    SFUNC       shift, and go to state 8

    name_func  go to state 35


State 9

   12 type: SLONG •

    $default  reduce using rule 12 (type)


State 10

    9 type: SFLOAT •

    $default  reduce using rule 9 (type)


State 11

   11 type: SSHORT •

    $default  reduce using rule 11 (type)


State 12

   59 sign: "+" • sign

    INTEGER  shift, and go to state 36
    FLOAT    shift, and go to state 37
    "+"      shift, and go to state 12
    "-"      shift, and go to state 13

    sign  go to state 38


State 13

   60 sign: "-" • sign

    INTEGER  shift, and go to state 36
    FLOAT    shift, and go to state 37
    "+"      shift, and go to state 12
    "-"      shift, and go to state 13

    sign  go to state 39


State 14

   16 arr_elements: "[" • "]"
   17             | "[" • integ "]"
   18             | "[" • fl "]"
   19             | "[" • str "]"

    STRING   shift, and go to state 40
    INTEGER  shift, and go to state 41
    FLOAT    shift, and go to state 42
    "]"      shift, and go to state 43

    integ  go to state 44
    fl     go to state 45
    str    go to state 46


State 15

   27 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 47


State 16

   30 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 48


State 17

   28 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 49


State 18

   29 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 50


State 19

    5 program: program NEWLINE •

    $default  reduce using rule 5 (program)


State 20

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 51


State 21

    7 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 52

    var  go to state 53


State 22

   14 var: var • "," var
   67 assign: var • "=" val ";"

    "="  shift, and go to state 54
    ","  shift, and go to state 55


State 23

   82 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 56


State 24

    2 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 57


State 25

   26 build_func: func • ";"

    ";"  shift, and go to state 58


State 26

    3 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 59


State 27

   45 decl_func: name_func • code_func

    "{"  shift, and go to state 60

    code_func  go to state 61


State 28

    4 program: program decl_ops • NEWLINE

    NEWLINE  shift, and go to state 62


State 29

   61 arithm_expr: sign •

    $default  reduce using rule 61 (arithm_expr)


State 30

   53 decl_ops: arithm_expr • NEWLINE
   63 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr • "-" arithm_expr
   65            | arithm_expr • "*" arithm_expr
   66            | arithm_expr • "/" arithm_expr

    "+"      shift, and go to state 63
    "-"      shift, and go to state 64
    "*"      shift, and go to state 65
    "/"      shift, and go to state 66
    NEWLINE  shift, and go to state 67


State 31

   54 decl_ops: assign • NEWLINE

    NEWLINE  shift, and go to state 68


State 32

   55 decl_ops: cmp_expr • NEWLINE
   76 cmp_expr: cmp_expr • ">" cmp_expr
   77         | cmp_expr • "<" cmp_expr
   78         | cmp_expr • "<=" cmp_expr
   79         | cmp_expr • ">=" cmp_expr
   80         | cmp_expr • "==" cmp_expr
   81         | cmp_expr • "!=" cmp_expr

    "<"      shift, and go to state 69
    ">"      shift, and go to state 70
    "<="     shift, and go to state 71
    ">="     shift, and go to state 72
    "=="     shift, and go to state 73
    "!="     shift, and go to state 74
    NEWLINE  shift, and go to state 75


State 33

   56 decl_ops: merge_arr • NEWLINE

    NEWLINE  shift, and go to state 76


State 34

   46 name_func: IDENTIFIER •

    $default  reduce using rule 46 (name_func)


State 35

   47 name_func: SFUNC name_func • params NEWLINE

    "("  shift, and go to state 77

    params  go to state 78


State 36

   57 sign: INTEGER •

    $default  reduce using rule 57 (sign)


State 37

   58 sign: FLOAT •

    $default  reduce using rule 58 (sign)


State 38

   59 sign: "+" sign •

    $default  reduce using rule 59 (sign)


State 39

   60 sign: "-" sign •

    $default  reduce using rule 60 (sign)


State 40

   24 str: STRING •

    $default  reduce using rule 24 (str)


State 41

   20 integ: INTEGER •

    $default  reduce using rule 20 (integ)


State 42

   22 fl: FLOAT •

    $default  reduce using rule 22 (fl)


State 43

   16 arr_elements: "[" "]" •

    $default  reduce using rule 16 (arr_elements)


State 44

   17 arr_elements: "[" integ • "]"
   21 integ: integ • "," integ

    "]"  shift, and go to state 79
    ","  shift, and go to state 80


State 45

   18 arr_elements: "[" fl • "]"
   23 fl: fl • "," fl

    "]"  shift, and go to state 81
    ","  shift, and go to state 82


State 46

   19 arr_elements: "[" str • "]"
   25 str: str • "," str

    "]"  shift, and go to state 83
    ","  shift, and go to state 84


State 47

   27 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 85

    scan_params  go to state 86


State 48

   30 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 87
    STRING      shift, and go to state 88
    INTEGER     shift, and go to state 89
    FLOAT       shift, and go to state 90
    SSCAN       shift, and go to state 15
    SPRINT      shift, and go to state 16
    SLEN        shift, and go to state 17
    SCMP        shift, and go to state 18

    pos_elem      go to state 91
    func          go to state 92
    print_params  go to state 93


State 49

   28 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 94
    STRING      shift, and go to state 95
    "["         shift, and go to state 14

    arr_elements  go to state 96
    len_params    go to state 97


State 50

   29 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 98
    STRING      shift, and go to state 99

    cmp_params  go to state 100


State 51

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 52

   13 var: IDENTIFIER •

    $default  reduce using rule 13 (var)


State 53

    7 decl_var: type var • ";"
   14 var: var • "," var

    ","  shift, and go to state 55
    ";"  shift, and go to state 101


State 54

   67 assign: var "=" • val ";"

    STRING   shift, and go to state 102
    INTEGER  shift, and go to state 103
    FLOAT    shift, and go to state 104
    "["      shift, and go to state 14

    arr_elements  go to state 105
    val           go to state 106


State 55

   14 var: var "," • var

    IDENTIFIER  shift, and go to state 52

    var  go to state 107


State 56

   82 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 14

    arr_elements  go to state 108


State 57

    2 program: program build_func NEWLINE •

    $default  reduce using rule 2 (program)


State 58

   26 build_func: func ";" •

    $default  reduce using rule 26 (build_func)


State 59

    3 program: program decl_func NEWLINE •

    $default  reduce using rule 3 (program)


State 60

   52 code_func: "{" • NEWLINE "}"

    NEWLINE  shift, and go to state 109


State 61

   45 decl_func: name_func code_func •

    $default  reduce using rule 45 (decl_func)


State 62

    4 program: program decl_ops NEWLINE •

    $default  reduce using rule 4 (program)


State 63

   63 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 110
    INTEGER     shift, and go to state 36
    FLOAT       shift, and go to state 37
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13

    sign         go to state 29
    arithm_expr  go to state 111


State 64

   64 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 110
    INTEGER     shift, and go to state 36
    FLOAT       shift, and go to state 37
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13

    sign         go to state 29
    arithm_expr  go to state 112


State 65

   65 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 110
    INTEGER     shift, and go to state 36
    FLOAT       shift, and go to state 37
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13

    sign         go to state 29
    arithm_expr  go to state 113


State 66

   66 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 110
    INTEGER     shift, and go to state 36
    FLOAT       shift, and go to state 37
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13

    sign         go to state 29
    arithm_expr  go to state 114


State 67

   53 decl_ops: arithm_expr NEWLINE •

    $default  reduce using rule 53 (decl_ops)


State 68

   54 decl_ops: assign NEWLINE •

    $default  reduce using rule 54 (decl_ops)


State 69

   77 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 115
    INTEGER     shift, and go to state 116
    FLOAT       shift, and go to state 117

    cmp_expr  go to state 118


State 70

   76 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 115
    INTEGER     shift, and go to state 116
    FLOAT       shift, and go to state 117

    cmp_expr  go to state 119


State 71

   78 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 115
    INTEGER     shift, and go to state 116
    FLOAT       shift, and go to state 117

    cmp_expr  go to state 120


State 72

   79 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 115
    INTEGER     shift, and go to state 116
    FLOAT       shift, and go to state 117

    cmp_expr  go to state 121


State 73

   80 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 115
    INTEGER     shift, and go to state 116
    FLOAT       shift, and go to state 117

    cmp_expr  go to state 122


State 74

   81 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 115
    INTEGER     shift, and go to state 116
    FLOAT       shift, and go to state 117

    cmp_expr  go to state 123


State 75

   55 decl_ops: cmp_expr NEWLINE •

    $default  reduce using rule 55 (decl_ops)


State 76

   56 decl_ops: merge_arr NEWLINE •

    $default  reduce using rule 56 (decl_ops)


State 77

   48 params: "(" • ")"
   49       | "(" • type_params ")"

    SDOUBLE  shift, and go to state 6
    SINT     shift, and go to state 7
    SLONG    shift, and go to state 9
    SFLOAT   shift, and go to state 10
    SSHORT   shift, and go to state 11
    ")"      shift, and go to state 124

    type         go to state 125
    type_params  go to state 126


State 78

   47 name_func: SFUNC name_func params • NEWLINE

    NEWLINE  shift, and go to state 127


State 79

   17 arr_elements: "[" integ "]" •

    $default  reduce using rule 17 (arr_elements)


State 80

   21 integ: integ "," • integ

    INTEGER  shift, and go to state 41

    integ  go to state 128


State 81

   18 arr_elements: "[" fl "]" •

    $default  reduce using rule 18 (arr_elements)


State 82

   23 fl: fl "," • fl

    FLOAT  shift, and go to state 42

    fl  go to state 129


State 83

   19 arr_elements: "[" str "]" •

    $default  reduce using rule 19 (arr_elements)


State 84

   25 str: str "," • str

    STRING  shift, and go to state 40

    str  go to state 130


State 85

   31 scan_params: IDENTIFIER •

    $default  reduce using rule 31 (scan_params)


State 86

   27 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 131


State 87

   15 pos_elem: IDENTIFIER • "[" INTEGER "]"
   39 print_params: IDENTIFIER •

    "["  shift, and go to state 132

    $default  reduce using rule 39 (print_params)


State 88

   38 print_params: STRING •

    $default  reduce using rule 38 (print_params)


State 89

   40 print_params: INTEGER •

    $default  reduce using rule 40 (print_params)


State 90

   41 print_params: FLOAT •

    $default  reduce using rule 41 (print_params)


State 91

   43 print_params: pos_elem •

    $default  reduce using rule 43 (print_params)


State 92

   42 print_params: func •

    $default  reduce using rule 42 (print_params)


State 93

   30 func: SPRINT "(" print_params • ")"
   44 print_params: print_params • "," print_params

    ")"  shift, and go to state 133
    ","  shift, and go to state 134


State 94

   34 len_params: IDENTIFIER •

    $default  reduce using rule 34 (len_params)


State 95

   33 len_params: STRING •

    $default  reduce using rule 33 (len_params)


State 96

   32 len_params: arr_elements •

    $default  reduce using rule 32 (len_params)


State 97

   28 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 135


State 98

   36 cmp_params: IDENTIFIER •

    $default  reduce using rule 36 (cmp_params)


State 99

   35 cmp_params: STRING •

    $default  reduce using rule 35 (cmp_params)


State 100

   29 func: SCMP "(" cmp_params • ")"
   37 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 136
    ","  shift, and go to state 137


State 101

    7 decl_var: type var ";" •

    $default  reduce using rule 7 (decl_var)


State 102

   70 val: STRING •

    $default  reduce using rule 70 (val)


State 103

   68 val: INTEGER •

    $default  reduce using rule 68 (val)


State 104

   69 val: FLOAT •

    $default  reduce using rule 69 (val)


State 105

   71 val: arr_elements •

    $default  reduce using rule 71 (val)


State 106

   67 assign: var "=" val • ";"
   72 val: val • "," val

    ","  shift, and go to state 138
    ";"  shift, and go to state 139


State 107

   14 var: var • "," var
   14    | var "," var •

    $default  reduce using rule 14 (var)


State 108

   82 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 82 (merge_arr)


State 109

   52 code_func: "{" NEWLINE • "}"

    "}"  shift, and go to state 140


State 110

   62 arithm_expr: IDENTIFIER •

    $default  reduce using rule 62 (arithm_expr)


State 111

   63 arithm_expr: arithm_expr • "+" arithm_expr
   63            | arithm_expr "+" arithm_expr •
   64            | arithm_expr • "-" arithm_expr
   65            | arithm_expr • "*" arithm_expr
   66            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 65
    "/"  shift, and go to state 66

    $default  reduce using rule 63 (arithm_expr)


State 112

   63 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr • "-" arithm_expr
   64            | arithm_expr "-" arithm_expr •
   65            | arithm_expr • "*" arithm_expr
   66            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 65
    "/"  shift, and go to state 66

    $default  reduce using rule 64 (arithm_expr)


State 113

   63 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr • "-" arithm_expr
   65            | arithm_expr • "*" arithm_expr
   65            | arithm_expr "*" arithm_expr •
   66            | arithm_expr • "/" arithm_expr

    $default  reduce using rule 65 (arithm_expr)


State 114

   63 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr • "-" arithm_expr
   65            | arithm_expr • "*" arithm_expr
   66            | arithm_expr • "/" arithm_expr
   66            | arithm_expr "/" arithm_expr •

    $default  reduce using rule 66 (arithm_expr)


State 115

   75 cmp_expr: IDENTIFIER •

    $default  reduce using rule 75 (cmp_expr)


State 116

   73 cmp_expr: INTEGER •

    $default  reduce using rule 73 (cmp_expr)


State 117

   74 cmp_expr: FLOAT •

    $default  reduce using rule 74 (cmp_expr)


State 118

   76 cmp_expr: cmp_expr • ">" cmp_expr
   77         | cmp_expr • "<" cmp_expr
   77         | cmp_expr "<" cmp_expr •
   78         | cmp_expr • "<=" cmp_expr
   79         | cmp_expr • ">=" cmp_expr
   80         | cmp_expr • "==" cmp_expr
   81         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 77 (cmp_expr)


State 119

   76 cmp_expr: cmp_expr • ">" cmp_expr
   76         | cmp_expr ">" cmp_expr •
   77         | cmp_expr • "<" cmp_expr
   78         | cmp_expr • "<=" cmp_expr
   79         | cmp_expr • ">=" cmp_expr
   80         | cmp_expr • "==" cmp_expr
   81         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 76 (cmp_expr)


State 120

   76 cmp_expr: cmp_expr • ">" cmp_expr
   77         | cmp_expr • "<" cmp_expr
   78         | cmp_expr • "<=" cmp_expr
   78         | cmp_expr "<=" cmp_expr •
   79         | cmp_expr • ">=" cmp_expr
   80         | cmp_expr • "==" cmp_expr
   81         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 78 (cmp_expr)


State 121

   76 cmp_expr: cmp_expr • ">" cmp_expr
   77         | cmp_expr • "<" cmp_expr
   78         | cmp_expr • "<=" cmp_expr
   79         | cmp_expr • ">=" cmp_expr
   79         | cmp_expr ">=" cmp_expr •
   80         | cmp_expr • "==" cmp_expr
   81         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 79 (cmp_expr)


State 122

   76 cmp_expr: cmp_expr • ">" cmp_expr
   77         | cmp_expr • "<" cmp_expr
   78         | cmp_expr • "<=" cmp_expr
   79         | cmp_expr • ">=" cmp_expr
   80         | cmp_expr • "==" cmp_expr
   80         | cmp_expr "==" cmp_expr •
   81         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 69
    ">"   shift, and go to state 70
    "<="  shift, and go to state 71
    ">="  shift, and go to state 72

    $default  reduce using rule 80 (cmp_expr)


State 123

   76 cmp_expr: cmp_expr • ">" cmp_expr
   77         | cmp_expr • "<" cmp_expr
   78         | cmp_expr • "<=" cmp_expr
   79         | cmp_expr • ">=" cmp_expr
   80         | cmp_expr • "==" cmp_expr
   81         | cmp_expr • "!=" cmp_expr
   81         | cmp_expr "!=" cmp_expr •

    "<"   shift, and go to state 69
    ">"   shift, and go to state 70
    "<="  shift, and go to state 71
    ">="  shift, and go to state 72

    $default  reduce using rule 81 (cmp_expr)


State 124

   48 params: "(" ")" •

    $default  reduce using rule 48 (params)


State 125

   50 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 141


State 126

   49 params: "(" type_params • ")"
   51 type_params: type_params • "," type_params

    ")"  shift, and go to state 142
    ","  shift, and go to state 143


State 127

   47 name_func: SFUNC name_func params NEWLINE •

    $default  reduce using rule 47 (name_func)


State 128

   21 integ: integ • "," integ
   21      | integ "," integ •

    $default  reduce using rule 21 (integ)


State 129

   23 fl: fl • "," fl
   23   | fl "," fl •

    $default  reduce using rule 23 (fl)


State 130

   25 str: str • "," str
   25    | str "," str •

    $default  reduce using rule 25 (str)


State 131

   27 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 27 (func)


State 132

   15 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 144


State 133

   30 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 30 (func)


State 134

   44 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 87
    STRING      shift, and go to state 88
    INTEGER     shift, and go to state 89
    FLOAT       shift, and go to state 90
    SSCAN       shift, and go to state 15
    SPRINT      shift, and go to state 16
    SLEN        shift, and go to state 17
    SCMP        shift, and go to state 18

    pos_elem      go to state 91
    func          go to state 92
    print_params  go to state 145


State 135

   28 func: SLEN "(" len_params ")" •

    $default  reduce using rule 28 (func)


State 136

   29 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 29 (func)


State 137

   37 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 98
    STRING      shift, and go to state 99

    cmp_params  go to state 146


State 138

   72 val: val "," • val

    STRING   shift, and go to state 102
    INTEGER  shift, and go to state 103
    FLOAT    shift, and go to state 104
    "["      shift, and go to state 14

    arr_elements  go to state 105
    val           go to state 147


State 139

   67 assign: var "=" val ";" •

    $default  reduce using rule 67 (assign)


State 140

   52 code_func: "{" NEWLINE "}" •

    $default  reduce using rule 52 (code_func)


State 141

   50 type_params: type IDENTIFIER •

    $default  reduce using rule 50 (type_params)


State 142

   49 params: "(" type_params ")" •

    $default  reduce using rule 49 (params)


State 143

   51 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 6
    SINT     shift, and go to state 7
    SLONG    shift, and go to state 9
    SFLOAT   shift, and go to state 10
    SSHORT   shift, and go to state 11

    type         go to state 125
    type_params  go to state 148


State 144

   15 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 149


State 145

   44 print_params: print_params • "," print_params
   44             | print_params "," print_params •

    $default  reduce using rule 44 (print_params)


State 146

   37 cmp_params: cmp_params • "," cmp_params
   37           | cmp_params "," cmp_params •

    $default  reduce using rule 37 (cmp_params)


State 147

   72 val: val • "," val
   72    | val "," val •

    $default  reduce using rule 72 (val)


State 148

   51 type_params: type_params • "," type_params
   51            | type_params "," type_params •

    $default  reduce using rule 51 (type_params)


State 149

   15 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 15 (pos_elem)
