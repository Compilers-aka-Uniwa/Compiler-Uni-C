Nonterminals useless in grammar

    code_block


Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    SFOR
    "*="
    "--"
    "/="
    "!"
    "&&"
    "%"
    "||"
    "&"
    "+="
    "-="
    "++"
    "\\"
    UNKNOWN


Rules useless in grammar

   96 code_block: code
   97           | code_block code


State 3 conflicts: 1 reduce/reduce
State 4 conflicts: 2 reduce/reduce
State 5 conflicts: 2 reduce/reduce
State 86 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program build_func NEWLINE
    3        | program decl_func NEWLINE
    4        | program decl_ops NEWLINE
    5        | program decl_statement NEWLINE
    6        | program NEWLINE
    7        | ε

    8 decl_var: type var ";"

    9 type: SINT
   10     | SFLOAT
   11     | SDOUBLE
   12     | SSHORT
   13     | SLONG

   14 var: IDENTIFIER
   15    | var "," var

   16 pos_elem: IDENTIFIER "[" INTEGER "]"

   17 arr_elements: "[" "]"
   18             | "[" integ "]"
   19             | "[" fl "]"
   20             | "[" str "]"

   21 integ: INTEGER
   22      | integ "," integ

   23 fl: FLOAT
   24   | fl "," fl

   25 str: STRING
   26    | str "," str

   27 build_func: func ";"

   28 func: SSCAN "(" scan_params ")"
   29     | SLEN "(" len_params ")"
   30     | SCMP "(" cmp_params ")"
   31     | SPRINT "(" print_params ")"

   32 scan_params: IDENTIFIER

   33 len_params: arr_elements
   34           | STRING
   35           | IDENTIFIER

   36 cmp_params: STRING
   37           | IDENTIFIER
   38           | cmp_params "," cmp_params

   39 print_params: STRING
   40             | IDENTIFIER
   41             | INTEGER
   42             | FLOAT
   43             | func
   44             | pos_elem
   45             | print_params "," print_params

   46 decl_func: name_func "{" code "}"

   47 name_func: IDENTIFIER
   48          | SFUNC name_func params NEWLINE

   49 params: "(" ")"
   50       | "(" type_params ")"

   51 type_params: type IDENTIFIER
   52            | type_params "," type_params

   53 code: decl_var
   54     | build_func
   55     | decl_ops
   56     | decl_statement
   57     | ε

   58 decl_ops: arithm_expr
   59         | assign
   60         | cmp_expr
   61         | merge_arr

   62 sign: INTEGER
   63     | FLOAT
   64     | "+" sign
   65     | "-" sign

   66 arithm_expr: sign
   67            | IDENTIFIER
   68            | arithm_expr "+" arithm_expr
   69            | arithm_expr "-" arithm_expr
   70            | arithm_expr "*" arithm_expr
   71            | arithm_expr "/" arithm_expr

   72 assign: var "=" val ";"

   73 val: INTEGER
   74    | FLOAT
   75    | STRING
   76    | arr_elements
   77    | val "," val

   78 cmp_expr: INTEGER
   79         | FLOAT
   80         | IDENTIFIER
   81         | cmp_expr ">" cmp_expr
   82         | cmp_expr "<" cmp_expr
   83         | cmp_expr "<=" cmp_expr
   84         | cmp_expr ">=" cmp_expr
   85         | cmp_expr "==" cmp_expr
   86         | cmp_expr "!=" cmp_expr

   87 merge_arr: arr_elements "+" arr_elements

   88 decl_statement: if_statement
   89               | while_statement

   90 if_statement: SIF condition code
   91             | SIF condition "{" code "}"

   92 condition: cmp_expr
   93          | "(" condition ")"

   94 while_statement: SWHILE condition code
   95                | SWHILE condition "{" code "}"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <sval> (258) 14 16 32 35 37 40 47 51 67 80
    STRING <sval> (259) 25 34 36 39 75
    INTEGER <ival> (260) 16 21 41 62 73 78
    FLOAT <fval> (261) 23 42 63 74 79
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 90 91
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 11
    SINT <sval> (268) 9
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 48
    SELSE <sval> (271)
    SLONG <sval> (272) 13
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 10
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279)
    SSHORT <sval> (280) 12
    SWHILE <sval> (281) 94 95
    "+" (282) 64 68 87
    "*=" (283)
    "--" (284)
    "-" (285) 65 69
    "/=" (286)
    "<" (287) 82
    "*" (288) 70
    "!" (289)
    ">" (290) 81
    "/" (291) 71
    "&&" (292)
    "<=" (293) 83
    "%" (294)
    "||" (295)
    ">=" (296) 84
    "=" (297) 72
    "==" (298) 85
    "&" (299)
    "+=" (300)
    "!=" (301) 86
    "-=" (302)
    "++" (303)
    "(" (304) 28 29 30 31 49 50 93
    ")" (305) 28 29 30 31 49 50 93
    "[" (306) 16 17 18 19 20
    "]" (307) 16 17 18 19 20
    "{" (308) 46 91 95
    "}" (309) 46 91 95
    "," (310) 15 22 24 26 38 45 52 77
    "\\" (311)
    ";" (312) 8 27 72
    SSCAN (313) 28
    SPRINT (314) 31
    SLEN (315) 29
    SCMP (316) 30
    NEWLINE (317) 1 2 3 4 5 6 48
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program <sval> (65)
        on left: 1 2 3 4 5 6 7
        on right: 0 1 2 3 4 5 6
    decl_var <sval> (66)
        on left: 8
        on right: 1 53
    type <sval> (67)
        on left: 9 10 11 12 13
        on right: 8 51
    var <sval> (68)
        on left: 14 15
        on right: 8 15 72
    pos_elem <sval> (69)
        on left: 16
        on right: 44
    arr_elements <sval> (70)
        on left: 17 18 19 20
        on right: 33 76 87
    integ <sval> (71)
        on left: 21 22
        on right: 18 22
    fl <sval> (72)
        on left: 23 24
        on right: 19 24
    str <sval> (73)
        on left: 25 26
        on right: 20 26
    build_func <sval> (74)
        on left: 27
        on right: 2 54
    func <sval> (75)
        on left: 28 29 30 31
        on right: 27 43
    scan_params <sval> (76)
        on left: 32
        on right: 28
    len_params <sval> (77)
        on left: 33 34 35
        on right: 29
    cmp_params <sval> (78)
        on left: 36 37 38
        on right: 30 38
    print_params <sval> (79)
        on left: 39 40 41 42 43 44 45
        on right: 31 45
    decl_func <sval> (80)
        on left: 46
        on right: 3
    name_func <sval> (81)
        on left: 47 48
        on right: 46 48
    params <sval> (82)
        on left: 49 50
        on right: 48
    type_params <sval> (83)
        on left: 51 52
        on right: 50 52
    code <sval> (84)
        on left: 53 54 55 56 57
        on right: 46 90 91 94 95
    decl_ops <sval> (85)
        on left: 58 59 60 61
        on right: 4 55
    sign <sval> (86)
        on left: 62 63 64 65
        on right: 64 65 66
    arithm_expr <sval> (87)
        on left: 66 67 68 69 70 71
        on right: 58 68 69 70 71
    assign <sval> (88)
        on left: 72
        on right: 59
    val <sval> (89)
        on left: 73 74 75 76 77
        on right: 72 77
    cmp_expr <sval> (90)
        on left: 78 79 80 81 82 83 84 85 86
        on right: 60 81 82 83 84 85 86 92
    merge_arr <sval> (91)
        on left: 87
        on right: 61
    decl_statement <sval> (92)
        on left: 88 89
        on right: 5 56
    if_statement <sval> (93)
        on left: 90 91
        on right: 88
    condition <sval> (94)
        on left: 92 93
        on right: 90 91 93 94 95
    while_statement <sval> (95)
        on left: 94 95
        on right: 89


State 0

    0 $accept: • program $end

    $default  reduce using rule 7 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • build_func NEWLINE
    3        | program • decl_func NEWLINE
    4        | program • decl_ops NEWLINE
    5        | program • decl_statement NEWLINE
    6        | program • NEWLINE

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SSHORT      shift, and go to state 12
    SWHILE      shift, and go to state 13
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15
    "["         shift, and go to state 16
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20
    NEWLINE     shift, and go to state 21

    decl_var         go to state 22
    type             go to state 23
    var              go to state 24
    arr_elements     go to state 25
    build_func       go to state 26
    func             go to state 27
    decl_func        go to state 28
    name_func        go to state 29
    decl_ops         go to state 30
    sign             go to state 31
    arithm_expr      go to state 32
    assign           go to state 33
    cmp_expr         go to state 34
    merge_arr        go to state 35
    decl_statement   go to state 36
    if_statement     go to state 37
    while_statement  go to state 38


State 2

    0 $accept: program $end •

    $default  accept


State 3

   14 var: IDENTIFIER •
   47 name_func: IDENTIFIER •
   67 arithm_expr: IDENTIFIER •
   80 cmp_expr: IDENTIFIER •

    "+"       reduce using rule 67 (arithm_expr)
    "-"       reduce using rule 67 (arithm_expr)
    "*"       reduce using rule 67 (arithm_expr)
    "/"       reduce using rule 67 (arithm_expr)
    "="       reduce using rule 14 (var)
    "{"       reduce using rule 47 (name_func)
    ","       reduce using rule 14 (var)
    NEWLINE   reduce using rule 67 (arithm_expr)
    NEWLINE   [reduce using rule 80 (cmp_expr)]
    $default  reduce using rule 80 (cmp_expr)


State 4

   62 sign: INTEGER •
   78 cmp_expr: INTEGER •

    "<"       reduce using rule 78 (cmp_expr)
    ">"       reduce using rule 78 (cmp_expr)
    "<="      reduce using rule 78 (cmp_expr)
    ">="      reduce using rule 78 (cmp_expr)
    "=="      reduce using rule 78 (cmp_expr)
    "!="      reduce using rule 78 (cmp_expr)
    "}"       reduce using rule 62 (sign)
    "}"       [reduce using rule 78 (cmp_expr)]
    NEWLINE   reduce using rule 62 (sign)
    NEWLINE   [reduce using rule 78 (cmp_expr)]
    $default  reduce using rule 62 (sign)


State 5

   63 sign: FLOAT •
   79 cmp_expr: FLOAT •

    "<"       reduce using rule 79 (cmp_expr)
    ">"       reduce using rule 79 (cmp_expr)
    "<="      reduce using rule 79 (cmp_expr)
    ">="      reduce using rule 79 (cmp_expr)
    "=="      reduce using rule 79 (cmp_expr)
    "!="      reduce using rule 79 (cmp_expr)
    "}"       reduce using rule 63 (sign)
    "}"       [reduce using rule 79 (cmp_expr)]
    NEWLINE   reduce using rule 63 (sign)
    NEWLINE   [reduce using rule 79 (cmp_expr)]
    $default  reduce using rule 63 (sign)


State 6

   90 if_statement: SIF • condition code
   91             | SIF • condition "{" code "}"

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41
    "("         shift, and go to state 42

    cmp_expr   go to state 43
    condition  go to state 44


State 7

   11 type: SDOUBLE •

    $default  reduce using rule 11 (type)


State 8

    9 type: SINT •

    $default  reduce using rule 9 (type)


State 9

   48 name_func: SFUNC • name_func params NEWLINE

    IDENTIFIER  shift, and go to state 45
    SFUNC       shift, and go to state 9

    name_func  go to state 46


State 10

   13 type: SLONG •

    $default  reduce using rule 13 (type)


State 11

   10 type: SFLOAT •

    $default  reduce using rule 10 (type)


State 12

   12 type: SSHORT •

    $default  reduce using rule 12 (type)


State 13

   94 while_statement: SWHILE • condition code
   95                | SWHILE • condition "{" code "}"

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41
    "("         shift, and go to state 42

    cmp_expr   go to state 43
    condition  go to state 47


State 14

   64 sign: "+" • sign

    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    "+"      shift, and go to state 14
    "-"      shift, and go to state 15

    sign  go to state 50


State 15

   65 sign: "-" • sign

    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    "+"      shift, and go to state 14
    "-"      shift, and go to state 15

    sign  go to state 51


State 16

   17 arr_elements: "[" • "]"
   18             | "[" • integ "]"
   19             | "[" • fl "]"
   20             | "[" • str "]"

    STRING   shift, and go to state 52
    INTEGER  shift, and go to state 53
    FLOAT    shift, and go to state 54
    "]"      shift, and go to state 55

    integ  go to state 56
    fl     go to state 57
    str    go to state 58


State 17

   28 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 59


State 18

   31 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 60


State 19

   29 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 61


State 20

   30 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 62


State 21

    6 program: program NEWLINE •

    $default  reduce using rule 6 (program)


State 22

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 63


State 23

    8 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 64

    var  go to state 65


State 24

   15 var: var • "," var
   72 assign: var • "=" val ";"

    "="  shift, and go to state 66
    ","  shift, and go to state 67


State 25

   87 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 68


State 26

    2 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 69


State 27

   27 build_func: func • ";"

    ";"  shift, and go to state 70


State 28

    3 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 71


State 29

   46 decl_func: name_func • "{" code "}"

    "{"  shift, and go to state 72


State 30

    4 program: program decl_ops • NEWLINE

    NEWLINE  shift, and go to state 73


State 31

   66 arithm_expr: sign •

    $default  reduce using rule 66 (arithm_expr)


State 32

   58 decl_ops: arithm_expr •
   68 arithm_expr: arithm_expr • "+" arithm_expr
   69            | arithm_expr • "-" arithm_expr
   70            | arithm_expr • "*" arithm_expr
   71            | arithm_expr • "/" arithm_expr

    "+"  shift, and go to state 74
    "-"  shift, and go to state 75
    "*"  shift, and go to state 76
    "/"  shift, and go to state 77

    $default  reduce using rule 58 (decl_ops)


State 33

   59 decl_ops: assign •

    $default  reduce using rule 59 (decl_ops)


State 34

   60 decl_ops: cmp_expr •
   81 cmp_expr: cmp_expr • ">" cmp_expr
   82         | cmp_expr • "<" cmp_expr
   83         | cmp_expr • "<=" cmp_expr
   84         | cmp_expr • ">=" cmp_expr
   85         | cmp_expr • "==" cmp_expr
   86         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 78
    ">"   shift, and go to state 79
    "<="  shift, and go to state 80
    ">="  shift, and go to state 81
    "=="  shift, and go to state 82
    "!="  shift, and go to state 83

    $default  reduce using rule 60 (decl_ops)


State 35

   61 decl_ops: merge_arr •

    $default  reduce using rule 61 (decl_ops)


State 36

    5 program: program decl_statement • NEWLINE

    NEWLINE  shift, and go to state 84


State 37

   88 decl_statement: if_statement •

    $default  reduce using rule 88 (decl_statement)


State 38

   89 decl_statement: while_statement •

    $default  reduce using rule 89 (decl_statement)


State 39

   80 cmp_expr: IDENTIFIER •

    $default  reduce using rule 80 (cmp_expr)


State 40

   78 cmp_expr: INTEGER •

    $default  reduce using rule 78 (cmp_expr)


State 41

   79 cmp_expr: FLOAT •

    $default  reduce using rule 79 (cmp_expr)


State 42

   93 condition: "(" • condition ")"

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41
    "("         shift, and go to state 42

    cmp_expr   go to state 43
    condition  go to state 85


State 43

   81 cmp_expr: cmp_expr • ">" cmp_expr
   82         | cmp_expr • "<" cmp_expr
   83         | cmp_expr • "<=" cmp_expr
   84         | cmp_expr • ">=" cmp_expr
   85         | cmp_expr • "==" cmp_expr
   86         | cmp_expr • "!=" cmp_expr
   92 condition: cmp_expr •

    "<"   shift, and go to state 78
    ">"   shift, and go to state 79
    "<="  shift, and go to state 80
    ">="  shift, and go to state 81
    "=="  shift, and go to state 82
    "!="  shift, and go to state 83

    $default  reduce using rule 92 (condition)


State 44

   90 if_statement: SIF condition • code
   91             | SIF condition • "{" code "}"

    IDENTIFIER  shift, and go to state 86
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SSHORT      shift, and go to state 12
    SWHILE      shift, and go to state 13
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15
    "["         shift, and go to state 16
    "{"         shift, and go to state 87
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    $default  reduce using rule 57 (code)

    decl_var         go to state 88
    type             go to state 23
    var              go to state 24
    arr_elements     go to state 25
    build_func       go to state 89
    func             go to state 27
    code             go to state 90
    decl_ops         go to state 91
    sign             go to state 31
    arithm_expr      go to state 32
    assign           go to state 33
    cmp_expr         go to state 34
    merge_arr        go to state 35
    decl_statement   go to state 92
    if_statement     go to state 37
    while_statement  go to state 38


State 45

   47 name_func: IDENTIFIER •

    $default  reduce using rule 47 (name_func)


State 46

   48 name_func: SFUNC name_func • params NEWLINE

    "("  shift, and go to state 93

    params  go to state 94


State 47

   94 while_statement: SWHILE condition • code
   95                | SWHILE condition • "{" code "}"

    IDENTIFIER  shift, and go to state 86
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SSHORT      shift, and go to state 12
    SWHILE      shift, and go to state 13
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15
    "["         shift, and go to state 16
    "{"         shift, and go to state 95
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    $default  reduce using rule 57 (code)

    decl_var         go to state 88
    type             go to state 23
    var              go to state 24
    arr_elements     go to state 25
    build_func       go to state 89
    func             go to state 27
    code             go to state 96
    decl_ops         go to state 91
    sign             go to state 31
    arithm_expr      go to state 32
    assign           go to state 33
    cmp_expr         go to state 34
    merge_arr        go to state 35
    decl_statement   go to state 92
    if_statement     go to state 37
    while_statement  go to state 38


State 48

   62 sign: INTEGER •

    $default  reduce using rule 62 (sign)


State 49

   63 sign: FLOAT •

    $default  reduce using rule 63 (sign)


State 50

   64 sign: "+" sign •

    $default  reduce using rule 64 (sign)


State 51

   65 sign: "-" sign •

    $default  reduce using rule 65 (sign)


State 52

   25 str: STRING •

    $default  reduce using rule 25 (str)


State 53

   21 integ: INTEGER •

    $default  reduce using rule 21 (integ)


State 54

   23 fl: FLOAT •

    $default  reduce using rule 23 (fl)


State 55

   17 arr_elements: "[" "]" •

    $default  reduce using rule 17 (arr_elements)


State 56

   18 arr_elements: "[" integ • "]"
   22 integ: integ • "," integ

    "]"  shift, and go to state 97
    ","  shift, and go to state 98


State 57

   19 arr_elements: "[" fl • "]"
   24 fl: fl • "," fl

    "]"  shift, and go to state 99
    ","  shift, and go to state 100


State 58

   20 arr_elements: "[" str • "]"
   26 str: str • "," str

    "]"  shift, and go to state 101
    ","  shift, and go to state 102


State 59

   28 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 103

    scan_params  go to state 104


State 60

   31 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 105
    STRING      shift, and go to state 106
    INTEGER     shift, and go to state 107
    FLOAT       shift, and go to state 108
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    pos_elem      go to state 109
    func          go to state 110
    print_params  go to state 111


State 61

   29 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 112
    STRING      shift, and go to state 113
    "["         shift, and go to state 16

    arr_elements  go to state 114
    len_params    go to state 115


State 62

   30 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 116
    STRING      shift, and go to state 117

    cmp_params  go to state 118


State 63

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 64

   14 var: IDENTIFIER •

    $default  reduce using rule 14 (var)


State 65

    8 decl_var: type var • ";"
   15 var: var • "," var

    ","  shift, and go to state 67
    ";"  shift, and go to state 119


State 66

   72 assign: var "=" • val ";"

    STRING   shift, and go to state 120
    INTEGER  shift, and go to state 121
    FLOAT    shift, and go to state 122
    "["      shift, and go to state 16

    arr_elements  go to state 123
    val           go to state 124


State 67

   15 var: var "," • var

    IDENTIFIER  shift, and go to state 64

    var  go to state 125


State 68

   87 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 16

    arr_elements  go to state 126


State 69

    2 program: program build_func NEWLINE •

    $default  reduce using rule 2 (program)


State 70

   27 build_func: func ";" •

    $default  reduce using rule 27 (build_func)


State 71

    3 program: program decl_func NEWLINE •

    $default  reduce using rule 3 (program)


State 72

   46 decl_func: name_func "{" • code "}"

    IDENTIFIER  shift, and go to state 86
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SSHORT      shift, and go to state 12
    SWHILE      shift, and go to state 13
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15
    "["         shift, and go to state 16
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    $default  reduce using rule 57 (code)

    decl_var         go to state 88
    type             go to state 23
    var              go to state 24
    arr_elements     go to state 25
    build_func       go to state 89
    func             go to state 27
    code             go to state 127
    decl_ops         go to state 91
    sign             go to state 31
    arithm_expr      go to state 32
    assign           go to state 33
    cmp_expr         go to state 34
    merge_arr        go to state 35
    decl_statement   go to state 92
    if_statement     go to state 37
    while_statement  go to state 38


State 73

    4 program: program decl_ops NEWLINE •

    $default  reduce using rule 4 (program)


State 74

   68 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 128
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15

    sign         go to state 31
    arithm_expr  go to state 129


State 75

   69 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 128
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15

    sign         go to state 31
    arithm_expr  go to state 130


State 76

   70 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 128
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15

    sign         go to state 31
    arithm_expr  go to state 131


State 77

   71 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 128
    INTEGER     shift, and go to state 48
    FLOAT       shift, and go to state 49
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15

    sign         go to state 31
    arithm_expr  go to state 132


State 78

   82 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41

    cmp_expr  go to state 133


State 79

   81 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41

    cmp_expr  go to state 134


State 80

   83 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41

    cmp_expr  go to state 135


State 81

   84 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41

    cmp_expr  go to state 136


State 82

   85 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41

    cmp_expr  go to state 137


State 83

   86 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 39
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41

    cmp_expr  go to state 138


State 84

    5 program: program decl_statement NEWLINE •

    $default  reduce using rule 5 (program)


State 85

   93 condition: "(" condition • ")"

    ")"  shift, and go to state 139


State 86

   14 var: IDENTIFIER •
   67 arithm_expr: IDENTIFIER •
   80 cmp_expr: IDENTIFIER •

    "<"       reduce using rule 80 (cmp_expr)
    ">"       reduce using rule 80 (cmp_expr)
    "<="      reduce using rule 80 (cmp_expr)
    ">="      reduce using rule 80 (cmp_expr)
    "="       reduce using rule 14 (var)
    "=="      reduce using rule 80 (cmp_expr)
    "!="      reduce using rule 80 (cmp_expr)
    "}"       reduce using rule 67 (arithm_expr)
    "}"       [reduce using rule 80 (cmp_expr)]
    ","       reduce using rule 14 (var)
    NEWLINE   reduce using rule 67 (arithm_expr)
    NEWLINE   [reduce using rule 80 (cmp_expr)]
    $default  reduce using rule 67 (arithm_expr)


State 87

   91 if_statement: SIF condition "{" • code "}"

    IDENTIFIER  shift, and go to state 86
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SSHORT      shift, and go to state 12
    SWHILE      shift, and go to state 13
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15
    "["         shift, and go to state 16
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    $default  reduce using rule 57 (code)

    decl_var         go to state 88
    type             go to state 23
    var              go to state 24
    arr_elements     go to state 25
    build_func       go to state 89
    func             go to state 27
    code             go to state 140
    decl_ops         go to state 91
    sign             go to state 31
    arithm_expr      go to state 32
    assign           go to state 33
    cmp_expr         go to state 34
    merge_arr        go to state 35
    decl_statement   go to state 92
    if_statement     go to state 37
    while_statement  go to state 38


State 88

   53 code: decl_var •

    $default  reduce using rule 53 (code)


State 89

   54 code: build_func •

    $default  reduce using rule 54 (code)


State 90

   90 if_statement: SIF condition code •

    $default  reduce using rule 90 (if_statement)


State 91

   55 code: decl_ops •

    $default  reduce using rule 55 (code)


State 92

   56 code: decl_statement •

    $default  reduce using rule 56 (code)


State 93

   49 params: "(" • ")"
   50       | "(" • type_params ")"

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 12
    ")"      shift, and go to state 141

    type         go to state 142
    type_params  go to state 143


State 94

   48 name_func: SFUNC name_func params • NEWLINE

    NEWLINE  shift, and go to state 144


State 95

   95 while_statement: SWHILE condition "{" • code "}"

    IDENTIFIER  shift, and go to state 86
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SSHORT      shift, and go to state 12
    SWHILE      shift, and go to state 13
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15
    "["         shift, and go to state 16
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    $default  reduce using rule 57 (code)

    decl_var         go to state 88
    type             go to state 23
    var              go to state 24
    arr_elements     go to state 25
    build_func       go to state 89
    func             go to state 27
    code             go to state 145
    decl_ops         go to state 91
    sign             go to state 31
    arithm_expr      go to state 32
    assign           go to state 33
    cmp_expr         go to state 34
    merge_arr        go to state 35
    decl_statement   go to state 92
    if_statement     go to state 37
    while_statement  go to state 38


State 96

   94 while_statement: SWHILE condition code •

    $default  reduce using rule 94 (while_statement)


State 97

   18 arr_elements: "[" integ "]" •

    $default  reduce using rule 18 (arr_elements)


State 98

   22 integ: integ "," • integ

    INTEGER  shift, and go to state 53

    integ  go to state 146


State 99

   19 arr_elements: "[" fl "]" •

    $default  reduce using rule 19 (arr_elements)


State 100

   24 fl: fl "," • fl

    FLOAT  shift, and go to state 54

    fl  go to state 147


State 101

   20 arr_elements: "[" str "]" •

    $default  reduce using rule 20 (arr_elements)


State 102

   26 str: str "," • str

    STRING  shift, and go to state 52

    str  go to state 148


State 103

   32 scan_params: IDENTIFIER •

    $default  reduce using rule 32 (scan_params)


State 104

   28 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 149


State 105

   16 pos_elem: IDENTIFIER • "[" INTEGER "]"
   40 print_params: IDENTIFIER •

    "["  shift, and go to state 150

    $default  reduce using rule 40 (print_params)


State 106

   39 print_params: STRING •

    $default  reduce using rule 39 (print_params)


State 107

   41 print_params: INTEGER •

    $default  reduce using rule 41 (print_params)


State 108

   42 print_params: FLOAT •

    $default  reduce using rule 42 (print_params)


State 109

   44 print_params: pos_elem •

    $default  reduce using rule 44 (print_params)


State 110

   43 print_params: func •

    $default  reduce using rule 43 (print_params)


State 111

   31 func: SPRINT "(" print_params • ")"
   45 print_params: print_params • "," print_params

    ")"  shift, and go to state 151
    ","  shift, and go to state 152


State 112

   35 len_params: IDENTIFIER •

    $default  reduce using rule 35 (len_params)


State 113

   34 len_params: STRING •

    $default  reduce using rule 34 (len_params)


State 114

   33 len_params: arr_elements •

    $default  reduce using rule 33 (len_params)


State 115

   29 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 153


State 116

   37 cmp_params: IDENTIFIER •

    $default  reduce using rule 37 (cmp_params)


State 117

   36 cmp_params: STRING •

    $default  reduce using rule 36 (cmp_params)


State 118

   30 func: SCMP "(" cmp_params • ")"
   38 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 154
    ","  shift, and go to state 155


State 119

    8 decl_var: type var ";" •

    $default  reduce using rule 8 (decl_var)


State 120

   75 val: STRING •

    $default  reduce using rule 75 (val)


State 121

   73 val: INTEGER •

    $default  reduce using rule 73 (val)


State 122

   74 val: FLOAT •

    $default  reduce using rule 74 (val)


State 123

   76 val: arr_elements •

    $default  reduce using rule 76 (val)


State 124

   72 assign: var "=" val • ";"
   77 val: val • "," val

    ","  shift, and go to state 156
    ";"  shift, and go to state 157


State 125

   15 var: var • "," var
   15    | var "," var •

    $default  reduce using rule 15 (var)


State 126

   87 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 87 (merge_arr)


State 127

   46 decl_func: name_func "{" code • "}"

    "}"  shift, and go to state 158


State 128

   67 arithm_expr: IDENTIFIER •

    $default  reduce using rule 67 (arithm_expr)


State 129

   68 arithm_expr: arithm_expr • "+" arithm_expr
   68            | arithm_expr "+" arithm_expr •
   69            | arithm_expr • "-" arithm_expr
   70            | arithm_expr • "*" arithm_expr
   71            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77

    $default  reduce using rule 68 (arithm_expr)


State 130

   68 arithm_expr: arithm_expr • "+" arithm_expr
   69            | arithm_expr • "-" arithm_expr
   69            | arithm_expr "-" arithm_expr •
   70            | arithm_expr • "*" arithm_expr
   71            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 76
    "/"  shift, and go to state 77

    $default  reduce using rule 69 (arithm_expr)


State 131

   68 arithm_expr: arithm_expr • "+" arithm_expr
   69            | arithm_expr • "-" arithm_expr
   70            | arithm_expr • "*" arithm_expr
   70            | arithm_expr "*" arithm_expr •
   71            | arithm_expr • "/" arithm_expr

    $default  reduce using rule 70 (arithm_expr)


State 132

   68 arithm_expr: arithm_expr • "+" arithm_expr
   69            | arithm_expr • "-" arithm_expr
   70            | arithm_expr • "*" arithm_expr
   71            | arithm_expr • "/" arithm_expr
   71            | arithm_expr "/" arithm_expr •

    $default  reduce using rule 71 (arithm_expr)


State 133

   81 cmp_expr: cmp_expr • ">" cmp_expr
   82         | cmp_expr • "<" cmp_expr
   82         | cmp_expr "<" cmp_expr •
   83         | cmp_expr • "<=" cmp_expr
   84         | cmp_expr • ">=" cmp_expr
   85         | cmp_expr • "==" cmp_expr
   86         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 82 (cmp_expr)


State 134

   81 cmp_expr: cmp_expr • ">" cmp_expr
   81         | cmp_expr ">" cmp_expr •
   82         | cmp_expr • "<" cmp_expr
   83         | cmp_expr • "<=" cmp_expr
   84         | cmp_expr • ">=" cmp_expr
   85         | cmp_expr • "==" cmp_expr
   86         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 81 (cmp_expr)


State 135

   81 cmp_expr: cmp_expr • ">" cmp_expr
   82         | cmp_expr • "<" cmp_expr
   83         | cmp_expr • "<=" cmp_expr
   83         | cmp_expr "<=" cmp_expr •
   84         | cmp_expr • ">=" cmp_expr
   85         | cmp_expr • "==" cmp_expr
   86         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 83 (cmp_expr)


State 136

   81 cmp_expr: cmp_expr • ">" cmp_expr
   82         | cmp_expr • "<" cmp_expr
   83         | cmp_expr • "<=" cmp_expr
   84         | cmp_expr • ">=" cmp_expr
   84         | cmp_expr ">=" cmp_expr •
   85         | cmp_expr • "==" cmp_expr
   86         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 84 (cmp_expr)


State 137

   81 cmp_expr: cmp_expr • ">" cmp_expr
   82         | cmp_expr • "<" cmp_expr
   83         | cmp_expr • "<=" cmp_expr
   84         | cmp_expr • ">=" cmp_expr
   85         | cmp_expr • "==" cmp_expr
   85         | cmp_expr "==" cmp_expr •
   86         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 78
    ">"   shift, and go to state 79
    "<="  shift, and go to state 80
    ">="  shift, and go to state 81

    $default  reduce using rule 85 (cmp_expr)


State 138

   81 cmp_expr: cmp_expr • ">" cmp_expr
   82         | cmp_expr • "<" cmp_expr
   83         | cmp_expr • "<=" cmp_expr
   84         | cmp_expr • ">=" cmp_expr
   85         | cmp_expr • "==" cmp_expr
   86         | cmp_expr • "!=" cmp_expr
   86         | cmp_expr "!=" cmp_expr •

    "<"   shift, and go to state 78
    ">"   shift, and go to state 79
    "<="  shift, and go to state 80
    ">="  shift, and go to state 81

    $default  reduce using rule 86 (cmp_expr)


State 139

   93 condition: "(" condition ")" •

    $default  reduce using rule 93 (condition)


State 140

   91 if_statement: SIF condition "{" code • "}"

    "}"  shift, and go to state 159


State 141

   49 params: "(" ")" •

    $default  reduce using rule 49 (params)


State 142

   51 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 160


State 143

   50 params: "(" type_params • ")"
   52 type_params: type_params • "," type_params

    ")"  shift, and go to state 161
    ","  shift, and go to state 162


State 144

   48 name_func: SFUNC name_func params NEWLINE •

    $default  reduce using rule 48 (name_func)


State 145

   95 while_statement: SWHILE condition "{" code • "}"

    "}"  shift, and go to state 163


State 146

   22 integ: integ • "," integ
   22      | integ "," integ •

    $default  reduce using rule 22 (integ)


State 147

   24 fl: fl • "," fl
   24   | fl "," fl •

    $default  reduce using rule 24 (fl)


State 148

   26 str: str • "," str
   26    | str "," str •

    $default  reduce using rule 26 (str)


State 149

   28 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 28 (func)


State 150

   16 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 164


State 151

   31 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 31 (func)


State 152

   45 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 105
    STRING      shift, and go to state 106
    INTEGER     shift, and go to state 107
    FLOAT       shift, and go to state 108
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    pos_elem      go to state 109
    func          go to state 110
    print_params  go to state 165


State 153

   29 func: SLEN "(" len_params ")" •

    $default  reduce using rule 29 (func)


State 154

   30 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 30 (func)


State 155

   38 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 116
    STRING      shift, and go to state 117

    cmp_params  go to state 166


State 156

   77 val: val "," • val

    STRING   shift, and go to state 120
    INTEGER  shift, and go to state 121
    FLOAT    shift, and go to state 122
    "["      shift, and go to state 16

    arr_elements  go to state 123
    val           go to state 167


State 157

   72 assign: var "=" val ";" •

    $default  reduce using rule 72 (assign)


State 158

   46 decl_func: name_func "{" code "}" •

    $default  reduce using rule 46 (decl_func)


State 159

   91 if_statement: SIF condition "{" code "}" •

    $default  reduce using rule 91 (if_statement)


State 160

   51 type_params: type IDENTIFIER •

    $default  reduce using rule 51 (type_params)


State 161

   50 params: "(" type_params ")" •

    $default  reduce using rule 50 (params)


State 162

   52 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 12

    type         go to state 142
    type_params  go to state 168


State 163

   95 while_statement: SWHILE condition "{" code "}" •

    $default  reduce using rule 95 (while_statement)


State 164

   16 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 169


State 165

   45 print_params: print_params • "," print_params
   45             | print_params "," print_params •

    $default  reduce using rule 45 (print_params)


State 166

   38 cmp_params: cmp_params • "," cmp_params
   38           | cmp_params "," cmp_params •

    $default  reduce using rule 38 (cmp_params)


State 167

   77 val: val • "," val
   77    | val "," val •

    $default  reduce using rule 77 (val)


State 168

   52 type_params: type_params • "," type_params
   52            | type_params "," type_params •

    $default  reduce using rule 52 (type_params)


State 169

   16 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 16 (pos_elem)
