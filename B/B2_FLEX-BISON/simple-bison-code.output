Terminals unused in grammar

    BREAK
    DO
    SIZEOF
    CASE
    STRUCT
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "*="
    "--"
    "/="
    "!"
    "&&"
    "%"
    "||"
    "&"
    "+="
    "-="
    "++"
    "\\"
    UNKNOWN


State 3 conflicts: 1 reduce/reduce
State 4 conflicts: 1 reduce/reduce
State 5 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program decl_arr NEWLINE
    3        | program build_func NEWLINE
    4        | program decl_func NEWLINE
    5        | program decl_operations NEWLINE
    6        | program decl_statement NEWLINE
    7        | program NEWLINE
    8        | ε

    9 decl_var: type var ";"

   10 type: INT
   11     | FLOAT_KEY
   12     | DOUBLE
   13     | SHORT
   14     | LONG

   15 var: IDENTIFIER
   16    | var "," var

   17 decl_arr: IDENTIFIER "=" elements ";"

   18 pos_elem: IDENTIFIER "[" INTEGER "]"

   19 elements: "[" "]"
   20         | "[" arr_int "]"
   21         | "[" arr_fl "]"
   22         | "[" arr_str "]"

   23 arr_int: INTEGER
   24        | arr_int "," arr_int

   25 arr_fl: FLOAT
   26       | arr_fl "," arr_fl

   27 arr_str: STRING
   28        | arr_str "," arr_str

   29 build_func: func ";"

   30 func: SCAN "(" scan_params ")"
   31     | LEN "(" len_params ")"
   32     | CMP "(" cmp_params ")"
   33     | PRINT "(" print_params ")"

   34 scan_params: IDENTIFIER

   35 len_params: elements
   36           | STRING
   37           | IDENTIFIER

   38 cmp_params: STRING
   39           | IDENTIFIER
   40           | cmp_params "," cmp_params

   41 print_params: STRING
   42             | IDENTIFIER
   43             | INTEGER
   44             | func
   45             | pos_elem
   46             | print_params "," print_params

   47 decl_func: name_func code_func

   48 name_func: IDENTIFIER
   49          | FUNC name_func params NEWLINE

   50 params: "(" ")"
   51       | "(" type_params ")"

   52 type_params: type IDENTIFIER
   53            | type_params "," type_params

   54 code_func: "{" code NEWLINE "}"

   55 code: ε

   56 decl_operations: arithm_expr
   57                | cmp_expr
   58                | merge_arr

   59 sign: INTEGER
   60     | FLOAT
   61     | "+" sign
   62     | "-" sign

   63 arithm_expr: sign
   64            | IDENTIFIER
   65            | arithm_expr "+" arithm_expr
   66            | arithm_expr "-" arithm_expr
   67            | arithm_expr "*" arithm_expr
   68            | arithm_expr "/" arithm_expr

   69 cmp_expr: INTEGER
   70         | FLOAT
   71         | IDENTIFIER
   72         | cmp_expr ">" cmp_expr
   73         | cmp_expr "<" cmp_expr
   74         | cmp_expr "<=" cmp_expr
   75         | cmp_expr ">=" cmp_expr
   76         | cmp_expr "==" cmp_expr
   77         | cmp_expr "!=" cmp_expr

   78 merge_arr: elements "+" elements

   79 decl_statement: if_statement

   80 if_statement: IF "(" condition ")" statement
   81             | IF "(" condition ")" "{" statements "}"

   82 condition: cmp_expr

   83 statement: PRINT "(" print_params ")" ";"

   84 statements: statement
   85           | statements statement


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 15 17 18 34 37 39 42 48 52 64 71
    STRING (259) 27 36 38 41
    INTEGER (260) 18 23 43 59 69
    FLOAT (261) 25 60 70
    BREAK (262)
    DO (263)
    IF (264) 80 81
    SIZEOF (265)
    CASE (266)
    DOUBLE (267) 12
    INT (268) 10
    STRUCT (269)
    FUNC (270) 49
    ELSE (271)
    LONG (272) 14
    SWITCH (273)
    CONST (274)
    FLOAT_KEY (275) 11
    RETURN (276)
    VOID (277)
    CONTINUE (278)
    FOR (279)
    SHORT (280) 13
    WHILE (281)
    "+" (282) 61 65 78
    "*=" (283)
    "--" (284)
    "-" (285) 62 66
    "/=" (286)
    "<" (287) 73
    "*" (288) 67
    "!" (289)
    ">" (290) 72
    "/" (291) 68
    "&&" (292)
    "<=" (293) 74
    "%" (294)
    "||" (295)
    ">=" (296) 75
    "=" (297) 17
    "==" (298) 76
    "&" (299)
    "+=" (300)
    "!=" (301) 77
    "-=" (302)
    "++" (303)
    "(" (304) 30 31 32 33 50 51 80 81 83
    ")" (305) 30 31 32 33 50 51 80 81 83
    "[" (306) 18 19 20 21 22
    "]" (307) 18 19 20 21 22
    "{" (308) 54 81
    "}" (309) 54 81
    "," (310) 16 24 26 28 40 46 53
    "\\" (311)
    ";" (312) 9 17 29 83
    SCAN (313) 30
    PRINT (314) 33 83
    LEN (315) 31
    CMP (316) 32
    NEWLINE (317) 1 2 3 4 5 6 7 49 54
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1 2 3 4 5 6 7 8
        on right: 0 1 2 3 4 5 6 7
    decl_var (66)
        on left: 9
        on right: 1
    type (67)
        on left: 10 11 12 13 14
        on right: 9 52
    var (68)
        on left: 15 16
        on right: 9 16
    decl_arr (69)
        on left: 17
        on right: 2
    pos_elem (70)
        on left: 18
        on right: 45
    elements (71)
        on left: 19 20 21 22
        on right: 17 35 78
    arr_int (72)
        on left: 23 24
        on right: 20 24
    arr_fl (73)
        on left: 25 26
        on right: 21 26
    arr_str (74)
        on left: 27 28
        on right: 22 28
    build_func (75)
        on left: 29
        on right: 3
    func (76)
        on left: 30 31 32 33
        on right: 29 44
    scan_params (77)
        on left: 34
        on right: 30
    len_params (78)
        on left: 35 36 37
        on right: 31
    cmp_params (79)
        on left: 38 39 40
        on right: 32 40
    print_params (80)
        on left: 41 42 43 44 45 46
        on right: 33 46 83
    decl_func (81)
        on left: 47
        on right: 4
    name_func (82)
        on left: 48 49
        on right: 47 49
    params (83)
        on left: 50 51
        on right: 49
    type_params (84)
        on left: 52 53
        on right: 51 53
    code_func (85)
        on left: 54
        on right: 47
    code (86)
        on left: 55
        on right: 54
    decl_operations (87)
        on left: 56 57 58
        on right: 5
    sign (88)
        on left: 59 60 61 62
        on right: 61 62 63
    arithm_expr (89)
        on left: 63 64 65 66 67 68
        on right: 56 65 66 67 68
    cmp_expr (90)
        on left: 69 70 71 72 73 74 75 76 77
        on right: 57 72 73 74 75 76 77 82
    merge_arr (91)
        on left: 78
        on right: 58
    decl_statement (92)
        on left: 79
        on right: 6
    if_statement (93)
        on left: 80 81
        on right: 79
    condition (94)
        on left: 82
        on right: 80 81
    statement (95)
        on left: 83
        on right: 80 84 85
    statements (96)
        on left: 84 85
        on right: 81 85


State 0

    0 $accept: • program $end

    $default  reduce using rule 8 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • decl_arr NEWLINE
    3        | program • build_func NEWLINE
    4        | program • decl_func NEWLINE
    5        | program • decl_operations NEWLINE
    6        | program • decl_statement NEWLINE
    7        | program • NEWLINE

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    IF          shift, and go to state 6
    DOUBLE      shift, and go to state 7
    INT         shift, and go to state 8
    FUNC        shift, and go to state 9
    LONG        shift, and go to state 10
    FLOAT_KEY   shift, and go to state 11
    SHORT       shift, and go to state 12
    "+"         shift, and go to state 13
    "-"         shift, and go to state 14
    "["         shift, and go to state 15
    SCAN        shift, and go to state 16
    PRINT       shift, and go to state 17
    LEN         shift, and go to state 18
    CMP         shift, and go to state 19
    NEWLINE     shift, and go to state 20

    decl_var         go to state 21
    type             go to state 22
    decl_arr         go to state 23
    elements         go to state 24
    build_func       go to state 25
    func             go to state 26
    decl_func        go to state 27
    name_func        go to state 28
    decl_operations  go to state 29
    sign             go to state 30
    arithm_expr      go to state 31
    cmp_expr         go to state 32
    merge_arr        go to state 33
    decl_statement   go to state 34
    if_statement     go to state 35


State 2

    0 $accept: program $end •

    $default  accept


State 3

   17 decl_arr: IDENTIFIER • "=" elements ";"
   48 name_func: IDENTIFIER •
   64 arithm_expr: IDENTIFIER •
   71 cmp_expr: IDENTIFIER •

    "="  shift, and go to state 36

    "+"       reduce using rule 64 (arithm_expr)
    "-"       reduce using rule 64 (arithm_expr)
    "*"       reduce using rule 64 (arithm_expr)
    "/"       reduce using rule 64 (arithm_expr)
    "{"       reduce using rule 48 (name_func)
    NEWLINE   reduce using rule 64 (arithm_expr)
    NEWLINE   [reduce using rule 71 (cmp_expr)]
    $default  reduce using rule 71 (cmp_expr)


State 4

   59 sign: INTEGER •
   69 cmp_expr: INTEGER •

    "+"       reduce using rule 59 (sign)
    "-"       reduce using rule 59 (sign)
    "*"       reduce using rule 59 (sign)
    "/"       reduce using rule 59 (sign)
    NEWLINE   reduce using rule 59 (sign)
    NEWLINE   [reduce using rule 69 (cmp_expr)]
    $default  reduce using rule 69 (cmp_expr)


State 5

   60 sign: FLOAT •
   70 cmp_expr: FLOAT •

    "+"       reduce using rule 60 (sign)
    "-"       reduce using rule 60 (sign)
    "*"       reduce using rule 60 (sign)
    "/"       reduce using rule 60 (sign)
    NEWLINE   reduce using rule 60 (sign)
    NEWLINE   [reduce using rule 70 (cmp_expr)]
    $default  reduce using rule 70 (cmp_expr)


State 6

   80 if_statement: IF • "(" condition ")" statement
   81             | IF • "(" condition ")" "{" statements "}"

    "("  shift, and go to state 37


State 7

   12 type: DOUBLE •

    $default  reduce using rule 12 (type)


State 8

   10 type: INT •

    $default  reduce using rule 10 (type)


State 9

   49 name_func: FUNC • name_func params NEWLINE

    IDENTIFIER  shift, and go to state 38
    FUNC        shift, and go to state 9

    name_func  go to state 39


State 10

   14 type: LONG •

    $default  reduce using rule 14 (type)


State 11

   11 type: FLOAT_KEY •

    $default  reduce using rule 11 (type)


State 12

   13 type: SHORT •

    $default  reduce using rule 13 (type)


State 13

   61 sign: "+" • sign

    INTEGER  shift, and go to state 40
    FLOAT    shift, and go to state 41
    "+"      shift, and go to state 13
    "-"      shift, and go to state 14

    sign  go to state 42


State 14

   62 sign: "-" • sign

    INTEGER  shift, and go to state 40
    FLOAT    shift, and go to state 41
    "+"      shift, and go to state 13
    "-"      shift, and go to state 14

    sign  go to state 43


State 15

   19 elements: "[" • "]"
   20         | "[" • arr_int "]"
   21         | "[" • arr_fl "]"
   22         | "[" • arr_str "]"

    STRING   shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    "]"      shift, and go to state 47

    arr_int  go to state 48
    arr_fl   go to state 49
    arr_str  go to state 50


State 16

   30 func: SCAN • "(" scan_params ")"

    "("  shift, and go to state 51


State 17

   33 func: PRINT • "(" print_params ")"

    "("  shift, and go to state 52


State 18

   31 func: LEN • "(" len_params ")"

    "("  shift, and go to state 53


State 19

   32 func: CMP • "(" cmp_params ")"

    "("  shift, and go to state 54


State 20

    7 program: program NEWLINE •

    $default  reduce using rule 7 (program)


State 21

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 55


State 22

    9 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 56

    var  go to state 57


State 23

    2 program: program decl_arr • NEWLINE

    NEWLINE  shift, and go to state 58


State 24

   78 merge_arr: elements • "+" elements

    "+"  shift, and go to state 59


State 25

    3 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 60


State 26

   29 build_func: func • ";"

    ";"  shift, and go to state 61


State 27

    4 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 62


State 28

   47 decl_func: name_func • code_func

    "{"  shift, and go to state 63

    code_func  go to state 64


State 29

    5 program: program decl_operations • NEWLINE

    NEWLINE  shift, and go to state 65


State 30

   63 arithm_expr: sign •

    $default  reduce using rule 63 (arithm_expr)


State 31

   56 decl_operations: arithm_expr •
   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr

    "+"  shift, and go to state 66
    "-"  shift, and go to state 67
    "*"  shift, and go to state 68
    "/"  shift, and go to state 69

    $default  reduce using rule 56 (decl_operations)


State 32

   57 decl_operations: cmp_expr •
   72 cmp_expr: cmp_expr • ">" cmp_expr
   73         | cmp_expr • "<" cmp_expr
   74         | cmp_expr • "<=" cmp_expr
   75         | cmp_expr • ">=" cmp_expr
   76         | cmp_expr • "==" cmp_expr
   77         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 70
    ">"   shift, and go to state 71
    "<="  shift, and go to state 72
    ">="  shift, and go to state 73
    "=="  shift, and go to state 74
    "!="  shift, and go to state 75

    $default  reduce using rule 57 (decl_operations)


State 33

   58 decl_operations: merge_arr •

    $default  reduce using rule 58 (decl_operations)


State 34

    6 program: program decl_statement • NEWLINE

    NEWLINE  shift, and go to state 76


State 35

   79 decl_statement: if_statement •

    $default  reduce using rule 79 (decl_statement)


State 36

   17 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 15

    elements  go to state 77


State 37

   80 if_statement: IF "(" • condition ")" statement
   81             | IF "(" • condition ")" "{" statements "}"

    IDENTIFIER  shift, and go to state 78
    INTEGER     shift, and go to state 79
    FLOAT       shift, and go to state 80

    cmp_expr   go to state 81
    condition  go to state 82


State 38

   48 name_func: IDENTIFIER •

    $default  reduce using rule 48 (name_func)


State 39

   49 name_func: FUNC name_func • params NEWLINE

    "("  shift, and go to state 83

    params  go to state 84


State 40

   59 sign: INTEGER •

    $default  reduce using rule 59 (sign)


State 41

   60 sign: FLOAT •

    $default  reduce using rule 60 (sign)


State 42

   61 sign: "+" sign •

    $default  reduce using rule 61 (sign)


State 43

   62 sign: "-" sign •

    $default  reduce using rule 62 (sign)


State 44

   27 arr_str: STRING •

    $default  reduce using rule 27 (arr_str)


State 45

   23 arr_int: INTEGER •

    $default  reduce using rule 23 (arr_int)


State 46

   25 arr_fl: FLOAT •

    $default  reduce using rule 25 (arr_fl)


State 47

   19 elements: "[" "]" •

    $default  reduce using rule 19 (elements)


State 48

   20 elements: "[" arr_int • "]"
   24 arr_int: arr_int • "," arr_int

    "]"  shift, and go to state 85
    ","  shift, and go to state 86


State 49

   21 elements: "[" arr_fl • "]"
   26 arr_fl: arr_fl • "," arr_fl

    "]"  shift, and go to state 87
    ","  shift, and go to state 88


State 50

   22 elements: "[" arr_str • "]"
   28 arr_str: arr_str • "," arr_str

    "]"  shift, and go to state 89
    ","  shift, and go to state 90


State 51

   30 func: SCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 91

    scan_params  go to state 92


State 52

   33 func: PRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 93
    STRING      shift, and go to state 94
    INTEGER     shift, and go to state 95
    SCAN        shift, and go to state 16
    PRINT       shift, and go to state 17
    LEN         shift, and go to state 18
    CMP         shift, and go to state 19

    pos_elem      go to state 96
    func          go to state 97
    print_params  go to state 98


State 53

   31 func: LEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 99
    STRING      shift, and go to state 100
    "["         shift, and go to state 15

    elements    go to state 101
    len_params  go to state 102


State 54

   32 func: CMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 103
    STRING      shift, and go to state 104

    cmp_params  go to state 105


State 55

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 56

   15 var: IDENTIFIER •

    $default  reduce using rule 15 (var)


State 57

    9 decl_var: type var • ";"
   16 var: var • "," var

    ","  shift, and go to state 106
    ";"  shift, and go to state 107


State 58

    2 program: program decl_arr NEWLINE •

    $default  reduce using rule 2 (program)


State 59

   78 merge_arr: elements "+" • elements

    "["  shift, and go to state 15

    elements  go to state 108


State 60

    3 program: program build_func NEWLINE •

    $default  reduce using rule 3 (program)


State 61

   29 build_func: func ";" •

    $default  reduce using rule 29 (build_func)


State 62

    4 program: program decl_func NEWLINE •

    $default  reduce using rule 4 (program)


State 63

   54 code_func: "{" • code NEWLINE "}"

    $default  reduce using rule 55 (code)

    code  go to state 109


State 64

   47 decl_func: name_func code_func •

    $default  reduce using rule 47 (decl_func)


State 65

    5 program: program decl_operations NEWLINE •

    $default  reduce using rule 5 (program)


State 66

   65 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 110
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41
    "+"         shift, and go to state 13
    "-"         shift, and go to state 14

    sign         go to state 30
    arithm_expr  go to state 111


State 67

   66 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 110
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41
    "+"         shift, and go to state 13
    "-"         shift, and go to state 14

    sign         go to state 30
    arithm_expr  go to state 112


State 68

   67 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 110
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41
    "+"         shift, and go to state 13
    "-"         shift, and go to state 14

    sign         go to state 30
    arithm_expr  go to state 113


State 69

   68 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 110
    INTEGER     shift, and go to state 40
    FLOAT       shift, and go to state 41
    "+"         shift, and go to state 13
    "-"         shift, and go to state 14

    sign         go to state 30
    arithm_expr  go to state 114


State 70

   73 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 78
    INTEGER     shift, and go to state 79
    FLOAT       shift, and go to state 80

    cmp_expr  go to state 115


State 71

   72 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 78
    INTEGER     shift, and go to state 79
    FLOAT       shift, and go to state 80

    cmp_expr  go to state 116


State 72

   74 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 78
    INTEGER     shift, and go to state 79
    FLOAT       shift, and go to state 80

    cmp_expr  go to state 117


State 73

   75 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 78
    INTEGER     shift, and go to state 79
    FLOAT       shift, and go to state 80

    cmp_expr  go to state 118


State 74

   76 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 78
    INTEGER     shift, and go to state 79
    FLOAT       shift, and go to state 80

    cmp_expr  go to state 119


State 75

   77 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 78
    INTEGER     shift, and go to state 79
    FLOAT       shift, and go to state 80

    cmp_expr  go to state 120


State 76

    6 program: program decl_statement NEWLINE •

    $default  reduce using rule 6 (program)


State 77

   17 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 121


State 78

   71 cmp_expr: IDENTIFIER •

    $default  reduce using rule 71 (cmp_expr)


State 79

   69 cmp_expr: INTEGER •

    $default  reduce using rule 69 (cmp_expr)


State 80

   70 cmp_expr: FLOAT •

    $default  reduce using rule 70 (cmp_expr)


State 81

   72 cmp_expr: cmp_expr • ">" cmp_expr
   73         | cmp_expr • "<" cmp_expr
   74         | cmp_expr • "<=" cmp_expr
   75         | cmp_expr • ">=" cmp_expr
   76         | cmp_expr • "==" cmp_expr
   77         | cmp_expr • "!=" cmp_expr
   82 condition: cmp_expr •

    "<"   shift, and go to state 70
    ">"   shift, and go to state 71
    "<="  shift, and go to state 72
    ">="  shift, and go to state 73
    "=="  shift, and go to state 74
    "!="  shift, and go to state 75

    $default  reduce using rule 82 (condition)


State 82

   80 if_statement: IF "(" condition • ")" statement
   81             | IF "(" condition • ")" "{" statements "}"

    ")"  shift, and go to state 122


State 83

   50 params: "(" • ")"
   51       | "(" • type_params ")"

    DOUBLE     shift, and go to state 7
    INT        shift, and go to state 8
    LONG       shift, and go to state 10
    FLOAT_KEY  shift, and go to state 11
    SHORT      shift, and go to state 12
    ")"        shift, and go to state 123

    type         go to state 124
    type_params  go to state 125


State 84

   49 name_func: FUNC name_func params • NEWLINE

    NEWLINE  shift, and go to state 126


State 85

   20 elements: "[" arr_int "]" •

    $default  reduce using rule 20 (elements)


State 86

   24 arr_int: arr_int "," • arr_int

    INTEGER  shift, and go to state 45

    arr_int  go to state 127


State 87

   21 elements: "[" arr_fl "]" •

    $default  reduce using rule 21 (elements)


State 88

   26 arr_fl: arr_fl "," • arr_fl

    FLOAT  shift, and go to state 46

    arr_fl  go to state 128


State 89

   22 elements: "[" arr_str "]" •

    $default  reduce using rule 22 (elements)


State 90

   28 arr_str: arr_str "," • arr_str

    STRING  shift, and go to state 44

    arr_str  go to state 129


State 91

   34 scan_params: IDENTIFIER •

    $default  reduce using rule 34 (scan_params)


State 92

   30 func: SCAN "(" scan_params • ")"

    ")"  shift, and go to state 130


State 93

   18 pos_elem: IDENTIFIER • "[" INTEGER "]"
   42 print_params: IDENTIFIER •

    "["  shift, and go to state 131

    $default  reduce using rule 42 (print_params)


State 94

   41 print_params: STRING •

    $default  reduce using rule 41 (print_params)


State 95

   43 print_params: INTEGER •

    $default  reduce using rule 43 (print_params)


State 96

   45 print_params: pos_elem •

    $default  reduce using rule 45 (print_params)


State 97

   44 print_params: func •

    $default  reduce using rule 44 (print_params)


State 98

   33 func: PRINT "(" print_params • ")"
   46 print_params: print_params • "," print_params

    ")"  shift, and go to state 132
    ","  shift, and go to state 133


State 99

   37 len_params: IDENTIFIER •

    $default  reduce using rule 37 (len_params)


State 100

   36 len_params: STRING •

    $default  reduce using rule 36 (len_params)


State 101

   35 len_params: elements •

    $default  reduce using rule 35 (len_params)


State 102

   31 func: LEN "(" len_params • ")"

    ")"  shift, and go to state 134


State 103

   39 cmp_params: IDENTIFIER •

    $default  reduce using rule 39 (cmp_params)


State 104

   38 cmp_params: STRING •

    $default  reduce using rule 38 (cmp_params)


State 105

   32 func: CMP "(" cmp_params • ")"
   40 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 135
    ","  shift, and go to state 136


State 106

   16 var: var "," • var

    IDENTIFIER  shift, and go to state 56

    var  go to state 137


State 107

    9 decl_var: type var ";" •

    $default  reduce using rule 9 (decl_var)


State 108

   78 merge_arr: elements "+" elements •

    $default  reduce using rule 78 (merge_arr)


State 109

   54 code_func: "{" code • NEWLINE "}"

    NEWLINE  shift, and go to state 138


State 110

   64 arithm_expr: IDENTIFIER •

    $default  reduce using rule 64 (arithm_expr)


State 111

   65 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr "+" arithm_expr •
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 68
    "/"  shift, and go to state 69

    $default  reduce using rule 65 (arithm_expr)


State 112

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   66            | arithm_expr "-" arithm_expr •
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 68
    "/"  shift, and go to state 69

    $default  reduce using rule 66 (arithm_expr)


State 113

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   67            | arithm_expr "*" arithm_expr •
   68            | arithm_expr • "/" arithm_expr

    $default  reduce using rule 67 (arithm_expr)


State 114

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr
   68            | arithm_expr "/" arithm_expr •

    $default  reduce using rule 68 (arithm_expr)


State 115

   72 cmp_expr: cmp_expr • ">" cmp_expr
   73         | cmp_expr • "<" cmp_expr
   73         | cmp_expr "<" cmp_expr •
   74         | cmp_expr • "<=" cmp_expr
   75         | cmp_expr • ">=" cmp_expr
   76         | cmp_expr • "==" cmp_expr
   77         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 73 (cmp_expr)


State 116

   72 cmp_expr: cmp_expr • ">" cmp_expr
   72         | cmp_expr ">" cmp_expr •
   73         | cmp_expr • "<" cmp_expr
   74         | cmp_expr • "<=" cmp_expr
   75         | cmp_expr • ">=" cmp_expr
   76         | cmp_expr • "==" cmp_expr
   77         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 72 (cmp_expr)


State 117

   72 cmp_expr: cmp_expr • ">" cmp_expr
   73         | cmp_expr • "<" cmp_expr
   74         | cmp_expr • "<=" cmp_expr
   74         | cmp_expr "<=" cmp_expr •
   75         | cmp_expr • ">=" cmp_expr
   76         | cmp_expr • "==" cmp_expr
   77         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 74 (cmp_expr)


State 118

   72 cmp_expr: cmp_expr • ">" cmp_expr
   73         | cmp_expr • "<" cmp_expr
   74         | cmp_expr • "<=" cmp_expr
   75         | cmp_expr • ">=" cmp_expr
   75         | cmp_expr ">=" cmp_expr •
   76         | cmp_expr • "==" cmp_expr
   77         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 75 (cmp_expr)


State 119

   72 cmp_expr: cmp_expr • ">" cmp_expr
   73         | cmp_expr • "<" cmp_expr
   74         | cmp_expr • "<=" cmp_expr
   75         | cmp_expr • ">=" cmp_expr
   76         | cmp_expr • "==" cmp_expr
   76         | cmp_expr "==" cmp_expr •
   77         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 70
    ">"   shift, and go to state 71
    "<="  shift, and go to state 72
    ">="  shift, and go to state 73

    $default  reduce using rule 76 (cmp_expr)


State 120

   72 cmp_expr: cmp_expr • ">" cmp_expr
   73         | cmp_expr • "<" cmp_expr
   74         | cmp_expr • "<=" cmp_expr
   75         | cmp_expr • ">=" cmp_expr
   76         | cmp_expr • "==" cmp_expr
   77         | cmp_expr • "!=" cmp_expr
   77         | cmp_expr "!=" cmp_expr •

    "<"   shift, and go to state 70
    ">"   shift, and go to state 71
    "<="  shift, and go to state 72
    ">="  shift, and go to state 73

    $default  reduce using rule 77 (cmp_expr)


State 121

   17 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 17 (decl_arr)


State 122

   80 if_statement: IF "(" condition ")" • statement
   81             | IF "(" condition ")" • "{" statements "}"

    "{"    shift, and go to state 139
    PRINT  shift, and go to state 140

    statement  go to state 141


State 123

   50 params: "(" ")" •

    $default  reduce using rule 50 (params)


State 124

   52 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 142


State 125

   51 params: "(" type_params • ")"
   53 type_params: type_params • "," type_params

    ")"  shift, and go to state 143
    ","  shift, and go to state 144


State 126

   49 name_func: FUNC name_func params NEWLINE •

    $default  reduce using rule 49 (name_func)


State 127

   24 arr_int: arr_int • "," arr_int
   24        | arr_int "," arr_int •

    $default  reduce using rule 24 (arr_int)


State 128

   26 arr_fl: arr_fl • "," arr_fl
   26       | arr_fl "," arr_fl •

    $default  reduce using rule 26 (arr_fl)


State 129

   28 arr_str: arr_str • "," arr_str
   28        | arr_str "," arr_str •

    $default  reduce using rule 28 (arr_str)


State 130

   30 func: SCAN "(" scan_params ")" •

    $default  reduce using rule 30 (func)


State 131

   18 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 145


State 132

   33 func: PRINT "(" print_params ")" •

    $default  reduce using rule 33 (func)


State 133

   46 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 93
    STRING      shift, and go to state 94
    INTEGER     shift, and go to state 95
    SCAN        shift, and go to state 16
    PRINT       shift, and go to state 17
    LEN         shift, and go to state 18
    CMP         shift, and go to state 19

    pos_elem      go to state 96
    func          go to state 97
    print_params  go to state 146


State 134

   31 func: LEN "(" len_params ")" •

    $default  reduce using rule 31 (func)


State 135

   32 func: CMP "(" cmp_params ")" •

    $default  reduce using rule 32 (func)


State 136

   40 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 103
    STRING      shift, and go to state 104

    cmp_params  go to state 147


State 137

   16 var: var • "," var
   16    | var "," var •

    $default  reduce using rule 16 (var)


State 138

   54 code_func: "{" code NEWLINE • "}"

    "}"  shift, and go to state 148


State 139

   81 if_statement: IF "(" condition ")" "{" • statements "}"

    PRINT  shift, and go to state 140

    statement   go to state 149
    statements  go to state 150


State 140

   83 statement: PRINT • "(" print_params ")" ";"

    "("  shift, and go to state 151


State 141

   80 if_statement: IF "(" condition ")" statement •

    $default  reduce using rule 80 (if_statement)


State 142

   52 type_params: type IDENTIFIER •

    $default  reduce using rule 52 (type_params)


State 143

   51 params: "(" type_params ")" •

    $default  reduce using rule 51 (params)


State 144

   53 type_params: type_params "," • type_params

    DOUBLE     shift, and go to state 7
    INT        shift, and go to state 8
    LONG       shift, and go to state 10
    FLOAT_KEY  shift, and go to state 11
    SHORT      shift, and go to state 12

    type         go to state 124
    type_params  go to state 152


State 145

   18 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 153


State 146

   46 print_params: print_params • "," print_params
   46             | print_params "," print_params •

    $default  reduce using rule 46 (print_params)


State 147

   40 cmp_params: cmp_params • "," cmp_params
   40           | cmp_params "," cmp_params •

    $default  reduce using rule 40 (cmp_params)


State 148

   54 code_func: "{" code NEWLINE "}" •

    $default  reduce using rule 54 (code_func)


State 149

   84 statements: statement •

    $default  reduce using rule 84 (statements)


State 150

   81 if_statement: IF "(" condition ")" "{" statements • "}"
   85 statements: statements • statement

    "}"    shift, and go to state 154
    PRINT  shift, and go to state 140

    statement  go to state 155


State 151

   83 statement: PRINT "(" • print_params ")" ";"

    IDENTIFIER  shift, and go to state 93
    STRING      shift, and go to state 94
    INTEGER     shift, and go to state 95
    SCAN        shift, and go to state 16
    PRINT       shift, and go to state 17
    LEN         shift, and go to state 18
    CMP         shift, and go to state 19

    pos_elem      go to state 96
    func          go to state 97
    print_params  go to state 156


State 152

   53 type_params: type_params • "," type_params
   53            | type_params "," type_params •

    $default  reduce using rule 53 (type_params)


State 153

   18 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 18 (pos_elem)


State 154

   81 if_statement: IF "(" condition ")" "{" statements "}" •

    $default  reduce using rule 81 (if_statement)


State 155

   85 statements: statements statement •

    $default  reduce using rule 85 (statements)


State 156

   46 print_params: print_params • "," print_params
   83 statement: PRINT "(" print_params • ")" ";"

    ")"  shift, and go to state 157
    ","  shift, and go to state 133


State 157

   83 statement: PRINT "(" print_params ")" • ";"

    ";"  shift, and go to state 158


State 158

   83 statement: PRINT "(" print_params ")" ";" •

    $default  reduce using rule 83 (statement)
