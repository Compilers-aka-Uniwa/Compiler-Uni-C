Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "!"
    "&&"
    "%"
    "||"
    "&"
    "\\"
    UNKNOWN


State 3 conflicts: 21 reduce/reduce
State 4 conflicts: 21 reduce/reduce
State 5 conflicts: 21 reduce/reduce
State 23 conflicts: 20 reduce/reduce
State 24 conflicts: 1 shift/reduce
State 28 conflicts: 1 shift/reduce
State 33 conflicts: 1 shift/reduce
State 35 conflicts: 2 shift/reduce
State 95 conflicts: 20 reduce/reduce
State 127 conflicts: 1 reduce/reduce
State 129 conflicts: 2 reduce/reduce
State 130 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program build_func NEWLINE
    3        | program decl_func NEWLINE
    4        | program decl_ops NEWLINE
    5        | program decl_statements NEWLINE
    6        | program NEWLINE
    7        | ε

    8 decl_var: type var ";"

    9 type: SINT
   10     | SFLOAT
   11     | SDOUBLE
   12     | SSHORT
   13     | SLONG

   14 var: IDENTIFIER
   15    | var "," var

   16 pos_elem: IDENTIFIER "[" INTEGER "]"

   17 arr_elements: "[" "]"
   18             | "[" integ "]"
   19             | "[" fl "]"
   20             | "[" str "]"

   21 integ: INTEGER
   22      | integ "," integ

   23 fl: FLOAT
   24   | fl "," fl

   25 str: STRING
   26    | str "," str

   27 build_func: func ";"

   28 func: SSCAN "(" scan_params ")"
   29     | SLEN "(" len_params ")"
   30     | SCMP "(" cmp_params ")"
   31     | SPRINT "(" print_params ")"

   32 scan_params: IDENTIFIER

   33 len_params: arr_elements
   34           | STRING
   35           | IDENTIFIER

   36 cmp_params: STRING
   37           | IDENTIFIER
   38           | cmp_params "," cmp_params

   39 print_params: STRING
   40             | IDENTIFIER
   41             | INTEGER
   42             | FLOAT
   43             | func
   44             | pos_elem
   45             | print_params "," print_params

   46 decl_func: name_func decl_statement

   47 name_func: SFUNC IDENTIFIER params NEWLINE

   48 params: "(" ")"
   49       | "(" type_params ")"

   50 type_params: type IDENTIFIER
   51            | type_params "," type_params

   52 code: decl_var
   53     | build_func
   54     | decl_ops
   55     | NEWLINE

   56 decl_ops: arithm_expr
   57         | assign
   58         | cmp_expr
   59         | merge_arr

   60 sign: INTEGER
   61     | FLOAT
   62     | "+" sign
   63     | "-" sign

   64 arithm_expr: sign
   65            | IDENTIFIER
   66            | arithm_expr "+" arithm_expr
   67            | arithm_expr "-" arithm_expr
   68            | arithm_expr "*" arithm_expr
   69            | arithm_expr "/" arithm_expr

   70 number: INTEGER
   71       | FLOAT

   72 changing_val: IDENTIFIER
   73             | changing_val "++"
   74             | changing_val "--"
   75             | "++" changing_val
   76             | "--" changing_val
   77             | changing_val "+=" number
   78             | changing_val "-=" number
   79             | changing_val "*=" number
   80             | changing_val "/=" number

   81 assign: var "=" val ";"
   82       | var "=" cmp_expr ";"
   83       | var "=" arithm_expr ";"
   84       | var "=" merge_arr ";"

   85 val: INTEGER
   86    | FLOAT
   87    | STRING
   88    | arr_elements
   89    | val "," val

   90 cmp_expr: INTEGER
   91         | FLOAT
   92         | IDENTIFIER
   93         | cmp_expr ">" cmp_expr
   94         | cmp_expr "<" cmp_expr
   95         | cmp_expr "<=" cmp_expr
   96         | cmp_expr ">=" cmp_expr
   97         | cmp_expr "==" cmp_expr
   98         | cmp_expr "!=" cmp_expr

   99 merge_arr: arr_elements "+" arr_elements

  100 decl_statements: decl_statement
  101                | decl_statements decl_statement

  102 decl_statement: if_statement
  103               | while_statement
  104               | for_statement
  105               | code
  106               | block_statement

  107 if_statement: SIF condition decl_statement

  108 condition: cmp_expr
  109          | "(" condition ")"

  110 block_statement: "{" decl_statements "}"

  111 while_statement: SWHILE condition decl_statement

  112 for_statement: SFOR "(" assign cmp_expr ";" changing_val ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <sval> (258) 14 16 32 35 37 40 47 50 65 72 92
    STRING <sval> (259) 25 34 36 39 87
    INTEGER <ival> (260) 16 21 41 60 70 85 90
    FLOAT <fval> (261) 23 42 61 71 86 91
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 107
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 11
    SINT <sval> (268) 9
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 47
    SELSE <sval> (271)
    SLONG <sval> (272) 13
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 10
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279) 112
    SSHORT <sval> (280) 12
    SWHILE <sval> (281) 111
    "+" (282) 62 66 99
    "*=" (283) 79
    "--" (284) 74 76
    "-" (285) 63 67
    "/=" (286) 80
    "<" (287) 94
    "*" (288) 68
    "!" (289)
    ">" (290) 93
    "/" (291) 69
    "&&" (292)
    "<=" (293) 95
    "%" (294)
    "||" (295)
    ">=" (296) 96
    "=" (297) 81 82 83 84
    "==" (298) 97
    "&" (299)
    "+=" (300) 77
    "!=" (301) 98
    "-=" (302) 78
    "++" (303) 73 75
    "(" (304) 28 29 30 31 48 49 109 112
    ")" (305) 28 29 30 31 48 49 109 112
    "[" (306) 16 17 18 19 20
    "]" (307) 16 17 18 19 20
    "{" (308) 110
    "}" (309) 110
    "," (310) 15 22 24 26 38 45 51 89
    "\\" (311)
    ";" (312) 8 27 81 82 83 84 112
    SSCAN (313) 28
    SPRINT (314) 31
    SLEN (315) 29
    SCMP (316) 30
    NEWLINE (317) 1 2 3 4 5 6 47 55
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program <sval> (65)
        on left: 1 2 3 4 5 6 7
        on right: 0 1 2 3 4 5 6
    decl_var <sval> (66)
        on left: 8
        on right: 1 52
    type <sval> (67)
        on left: 9 10 11 12 13
        on right: 8 50
    var <sval> (68)
        on left: 14 15
        on right: 8 15 81 82 83 84
    pos_elem <sval> (69)
        on left: 16
        on right: 44
    arr_elements <sval> (70)
        on left: 17 18 19 20
        on right: 33 88 99
    integ <sval> (71)
        on left: 21 22
        on right: 18 22
    fl <sval> (72)
        on left: 23 24
        on right: 19 24
    str <sval> (73)
        on left: 25 26
        on right: 20 26
    build_func <sval> (74)
        on left: 27
        on right: 2 53
    func <sval> (75)
        on left: 28 29 30 31
        on right: 27 43
    scan_params <sval> (76)
        on left: 32
        on right: 28
    len_params <sval> (77)
        on left: 33 34 35
        on right: 29
    cmp_params <sval> (78)
        on left: 36 37 38
        on right: 30 38
    print_params <sval> (79)
        on left: 39 40 41 42 43 44 45
        on right: 31 45
    decl_func <sval> (80)
        on left: 46
        on right: 3
    name_func <sval> (81)
        on left: 47
        on right: 46
    params <sval> (82)
        on left: 48 49
        on right: 47
    type_params <sval> (83)
        on left: 50 51
        on right: 49 51
    code <sval> (84)
        on left: 52 53 54 55
        on right: 105
    decl_ops <sval> (85)
        on left: 56 57 58 59
        on right: 4 54
    sign <sval> (86)
        on left: 60 61 62 63
        on right: 62 63 64
    arithm_expr <sval> (87)
        on left: 64 65 66 67 68 69
        on right: 56 66 67 68 69 83
    number <sval> (88)
        on left: 70 71
        on right: 77 78 79 80
    changing_val <sval> (89)
        on left: 72 73 74 75 76 77 78 79 80
        on right: 73 74 75 76 77 78 79 80 112
    assign <sval> (90)
        on left: 81 82 83 84
        on right: 57 112
    val <sval> (91)
        on left: 85 86 87 88 89
        on right: 81 89
    cmp_expr <sval> (92)
        on left: 90 91 92 93 94 95 96 97 98
        on right: 58 82 93 94 95 96 97 98 108 112
    merge_arr <sval> (93)
        on left: 99
        on right: 59 84
    decl_statements <sval> (94)
        on left: 100 101
        on right: 5 101 110
    decl_statement <sval> (95)
        on left: 102 103 104 105 106
        on right: 46 100 101 107 111 112
    if_statement <sval> (96)
        on left: 107
        on right: 102
    condition <sval> (97)
        on left: 108 109
        on right: 107 109 111
    block_statement <sval> (98)
        on left: 110
        on right: 106
    while_statement <sval> (99)
        on left: 111
        on right: 103
    for_statement <sval> (100)
        on left: 112
        on right: 104


State 0

    0 $accept: • program $end

    $default  reduce using rule 7 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • build_func NEWLINE
    3        | program • decl_func NEWLINE
    4        | program • decl_ops NEWLINE
    5        | program • decl_statements NEWLINE
    6        | program • NEWLINE

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17
    "{"         shift, and go to state 18
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22
    NEWLINE     shift, and go to state 23

    decl_var         go to state 24
    type             go to state 25
    var              go to state 26
    arr_elements     go to state 27
    build_func       go to state 28
    func             go to state 29
    decl_func        go to state 30
    name_func        go to state 31
    code             go to state 32
    decl_ops         go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statements  go to state 39
    decl_statement   go to state 40
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 2

    0 $accept: program $end •

    $default  accept


State 3

   14 var: IDENTIFIER •
   65 arithm_expr: IDENTIFIER •
   92 cmp_expr: IDENTIFIER •

    IDENTIFIER  reduce using rule 65 (arithm_expr)
    IDENTIFIER  [reduce using rule 92 (cmp_expr)]
    INTEGER     reduce using rule 65 (arithm_expr)
    INTEGER     [reduce using rule 92 (cmp_expr)]
    FLOAT       reduce using rule 65 (arithm_expr)
    FLOAT       [reduce using rule 92 (cmp_expr)]
    SIF         reduce using rule 65 (arithm_expr)
    SIF         [reduce using rule 92 (cmp_expr)]
    SDOUBLE     reduce using rule 65 (arithm_expr)
    SDOUBLE     [reduce using rule 92 (cmp_expr)]
    SINT        reduce using rule 65 (arithm_expr)
    SINT        [reduce using rule 92 (cmp_expr)]
    SLONG       reduce using rule 65 (arithm_expr)
    SLONG       [reduce using rule 92 (cmp_expr)]
    SFLOAT      reduce using rule 65 (arithm_expr)
    SFLOAT      [reduce using rule 92 (cmp_expr)]
    SFOR        reduce using rule 65 (arithm_expr)
    SFOR        [reduce using rule 92 (cmp_expr)]
    SSHORT      reduce using rule 65 (arithm_expr)
    SSHORT      [reduce using rule 92 (cmp_expr)]
    SWHILE      reduce using rule 65 (arithm_expr)
    SWHILE      [reduce using rule 92 (cmp_expr)]
    "+"         reduce using rule 65 (arithm_expr)
    "+"         [reduce using rule 92 (cmp_expr)]
    "-"         reduce using rule 65 (arithm_expr)
    "-"         [reduce using rule 92 (cmp_expr)]
    "<"         reduce using rule 92 (cmp_expr)
    ">"         reduce using rule 92 (cmp_expr)
    "<="        reduce using rule 92 (cmp_expr)
    ">="        reduce using rule 92 (cmp_expr)
    "="         reduce using rule 14 (var)
    "=="        reduce using rule 92 (cmp_expr)
    "!="        reduce using rule 92 (cmp_expr)
    "["         reduce using rule 65 (arithm_expr)
    "["         [reduce using rule 92 (cmp_expr)]
    "{"         reduce using rule 65 (arithm_expr)
    "{"         [reduce using rule 92 (cmp_expr)]
    "}"         reduce using rule 65 (arithm_expr)
    "}"         [reduce using rule 92 (cmp_expr)]
    ","         reduce using rule 14 (var)
    SSCAN       reduce using rule 65 (arithm_expr)
    SSCAN       [reduce using rule 92 (cmp_expr)]
    SPRINT      reduce using rule 65 (arithm_expr)
    SPRINT      [reduce using rule 92 (cmp_expr)]
    SLEN        reduce using rule 65 (arithm_expr)
    SLEN        [reduce using rule 92 (cmp_expr)]
    SCMP        reduce using rule 65 (arithm_expr)
    SCMP        [reduce using rule 92 (cmp_expr)]
    NEWLINE     reduce using rule 65 (arithm_expr)
    NEWLINE     [reduce using rule 92 (cmp_expr)]
    $default    reduce using rule 65 (arithm_expr)


State 4

   60 sign: INTEGER •
   90 cmp_expr: INTEGER •

    IDENTIFIER  reduce using rule 60 (sign)
    IDENTIFIER  [reduce using rule 90 (cmp_expr)]
    INTEGER     reduce using rule 60 (sign)
    INTEGER     [reduce using rule 90 (cmp_expr)]
    FLOAT       reduce using rule 60 (sign)
    FLOAT       [reduce using rule 90 (cmp_expr)]
    SIF         reduce using rule 60 (sign)
    SIF         [reduce using rule 90 (cmp_expr)]
    SDOUBLE     reduce using rule 60 (sign)
    SDOUBLE     [reduce using rule 90 (cmp_expr)]
    SINT        reduce using rule 60 (sign)
    SINT        [reduce using rule 90 (cmp_expr)]
    SLONG       reduce using rule 60 (sign)
    SLONG       [reduce using rule 90 (cmp_expr)]
    SFLOAT      reduce using rule 60 (sign)
    SFLOAT      [reduce using rule 90 (cmp_expr)]
    SFOR        reduce using rule 60 (sign)
    SFOR        [reduce using rule 90 (cmp_expr)]
    SSHORT      reduce using rule 60 (sign)
    SSHORT      [reduce using rule 90 (cmp_expr)]
    SWHILE      reduce using rule 60 (sign)
    SWHILE      [reduce using rule 90 (cmp_expr)]
    "+"         reduce using rule 60 (sign)
    "+"         [reduce using rule 90 (cmp_expr)]
    "-"         reduce using rule 60 (sign)
    "-"         [reduce using rule 90 (cmp_expr)]
    "<"         reduce using rule 90 (cmp_expr)
    ">"         reduce using rule 90 (cmp_expr)
    "<="        reduce using rule 90 (cmp_expr)
    ">="        reduce using rule 90 (cmp_expr)
    "=="        reduce using rule 90 (cmp_expr)
    "!="        reduce using rule 90 (cmp_expr)
    "["         reduce using rule 60 (sign)
    "["         [reduce using rule 90 (cmp_expr)]
    "{"         reduce using rule 60 (sign)
    "{"         [reduce using rule 90 (cmp_expr)]
    "}"         reduce using rule 60 (sign)
    "}"         [reduce using rule 90 (cmp_expr)]
    SSCAN       reduce using rule 60 (sign)
    SSCAN       [reduce using rule 90 (cmp_expr)]
    SPRINT      reduce using rule 60 (sign)
    SPRINT      [reduce using rule 90 (cmp_expr)]
    SLEN        reduce using rule 60 (sign)
    SLEN        [reduce using rule 90 (cmp_expr)]
    SCMP        reduce using rule 60 (sign)
    SCMP        [reduce using rule 90 (cmp_expr)]
    NEWLINE     reduce using rule 60 (sign)
    NEWLINE     [reduce using rule 90 (cmp_expr)]
    $default    reduce using rule 60 (sign)


State 5

   61 sign: FLOAT •
   91 cmp_expr: FLOAT •

    IDENTIFIER  reduce using rule 61 (sign)
    IDENTIFIER  [reduce using rule 91 (cmp_expr)]
    INTEGER     reduce using rule 61 (sign)
    INTEGER     [reduce using rule 91 (cmp_expr)]
    FLOAT       reduce using rule 61 (sign)
    FLOAT       [reduce using rule 91 (cmp_expr)]
    SIF         reduce using rule 61 (sign)
    SIF         [reduce using rule 91 (cmp_expr)]
    SDOUBLE     reduce using rule 61 (sign)
    SDOUBLE     [reduce using rule 91 (cmp_expr)]
    SINT        reduce using rule 61 (sign)
    SINT        [reduce using rule 91 (cmp_expr)]
    SLONG       reduce using rule 61 (sign)
    SLONG       [reduce using rule 91 (cmp_expr)]
    SFLOAT      reduce using rule 61 (sign)
    SFLOAT      [reduce using rule 91 (cmp_expr)]
    SFOR        reduce using rule 61 (sign)
    SFOR        [reduce using rule 91 (cmp_expr)]
    SSHORT      reduce using rule 61 (sign)
    SSHORT      [reduce using rule 91 (cmp_expr)]
    SWHILE      reduce using rule 61 (sign)
    SWHILE      [reduce using rule 91 (cmp_expr)]
    "+"         reduce using rule 61 (sign)
    "+"         [reduce using rule 91 (cmp_expr)]
    "-"         reduce using rule 61 (sign)
    "-"         [reduce using rule 91 (cmp_expr)]
    "<"         reduce using rule 91 (cmp_expr)
    ">"         reduce using rule 91 (cmp_expr)
    "<="        reduce using rule 91 (cmp_expr)
    ">="        reduce using rule 91 (cmp_expr)
    "=="        reduce using rule 91 (cmp_expr)
    "!="        reduce using rule 91 (cmp_expr)
    "["         reduce using rule 61 (sign)
    "["         [reduce using rule 91 (cmp_expr)]
    "{"         reduce using rule 61 (sign)
    "{"         [reduce using rule 91 (cmp_expr)]
    "}"         reduce using rule 61 (sign)
    "}"         [reduce using rule 91 (cmp_expr)]
    SSCAN       reduce using rule 61 (sign)
    SSCAN       [reduce using rule 91 (cmp_expr)]
    SPRINT      reduce using rule 61 (sign)
    SPRINT      [reduce using rule 91 (cmp_expr)]
    SLEN        reduce using rule 61 (sign)
    SLEN        [reduce using rule 91 (cmp_expr)]
    SCMP        reduce using rule 61 (sign)
    SCMP        [reduce using rule 91 (cmp_expr)]
    NEWLINE     reduce using rule 61 (sign)
    NEWLINE     [reduce using rule 91 (cmp_expr)]
    $default    reduce using rule 61 (sign)


State 6

  107 if_statement: SIF • condition decl_statement

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "("         shift, and go to state 48

    cmp_expr   go to state 49
    condition  go to state 50


State 7

   11 type: SDOUBLE •

    $default  reduce using rule 11 (type)


State 8

    9 type: SINT •

    $default  reduce using rule 9 (type)


State 9

   47 name_func: SFUNC • IDENTIFIER params NEWLINE

    IDENTIFIER  shift, and go to state 51


State 10

   13 type: SLONG •

    $default  reduce using rule 13 (type)


State 11

   10 type: SFLOAT •

    $default  reduce using rule 10 (type)


State 12

  112 for_statement: SFOR • "(" assign cmp_expr ";" changing_val ")" decl_statement

    "("  shift, and go to state 52


State 13

   12 type: SSHORT •

    $default  reduce using rule 12 (type)


State 14

  111 while_statement: SWHILE • condition decl_statement

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "("         shift, and go to state 48

    cmp_expr   go to state 49
    condition  go to state 53


State 15

   62 sign: "+" • sign

    INTEGER  shift, and go to state 54
    FLOAT    shift, and go to state 55
    "+"      shift, and go to state 15
    "-"      shift, and go to state 16

    sign  go to state 56


State 16

   63 sign: "-" • sign

    INTEGER  shift, and go to state 54
    FLOAT    shift, and go to state 55
    "+"      shift, and go to state 15
    "-"      shift, and go to state 16

    sign  go to state 57


State 17

   17 arr_elements: "[" • "]"
   18             | "[" • integ "]"
   19             | "[" • fl "]"
   20             | "[" • str "]"

    STRING   shift, and go to state 58
    INTEGER  shift, and go to state 59
    FLOAT    shift, and go to state 60
    "]"      shift, and go to state 61

    integ  go to state 62
    fl     go to state 63
    str    go to state 64


State 18

  110 block_statement: "{" • decl_statements "}"

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17
    "{"         shift, and go to state 18
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22
    NEWLINE     shift, and go to state 65

    decl_var         go to state 66
    type             go to state 25
    var              go to state 26
    arr_elements     go to state 27
    build_func       go to state 67
    func             go to state 29
    code             go to state 32
    decl_ops         go to state 68
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statements  go to state 69
    decl_statement   go to state 40
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 19

   28 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 70


State 20

   31 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 71


State 21

   29 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 72


State 22

   30 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 73


State 23

    6 program: program NEWLINE •
   55 code: NEWLINE •

    IDENTIFIER  reduce using rule 6 (program)
    IDENTIFIER  [reduce using rule 55 (code)]
    INTEGER     reduce using rule 6 (program)
    INTEGER     [reduce using rule 55 (code)]
    FLOAT       reduce using rule 6 (program)
    FLOAT       [reduce using rule 55 (code)]
    SIF         reduce using rule 6 (program)
    SIF         [reduce using rule 55 (code)]
    SDOUBLE     reduce using rule 6 (program)
    SDOUBLE     [reduce using rule 55 (code)]
    SINT        reduce using rule 6 (program)
    SINT        [reduce using rule 55 (code)]
    SLONG       reduce using rule 6 (program)
    SLONG       [reduce using rule 55 (code)]
    SFLOAT      reduce using rule 6 (program)
    SFLOAT      [reduce using rule 55 (code)]
    SFOR        reduce using rule 6 (program)
    SFOR        [reduce using rule 55 (code)]
    SSHORT      reduce using rule 6 (program)
    SSHORT      [reduce using rule 55 (code)]
    SWHILE      reduce using rule 6 (program)
    SWHILE      [reduce using rule 55 (code)]
    "+"         reduce using rule 6 (program)
    "+"         [reduce using rule 55 (code)]
    "-"         reduce using rule 6 (program)
    "-"         [reduce using rule 55 (code)]
    "["         reduce using rule 6 (program)
    "["         [reduce using rule 55 (code)]
    "{"         reduce using rule 6 (program)
    "{"         [reduce using rule 55 (code)]
    SSCAN       reduce using rule 6 (program)
    SSCAN       [reduce using rule 55 (code)]
    SPRINT      reduce using rule 6 (program)
    SPRINT      [reduce using rule 55 (code)]
    SLEN        reduce using rule 6 (program)
    SLEN        [reduce using rule 55 (code)]
    SCMP        reduce using rule 6 (program)
    SCMP        [reduce using rule 55 (code)]
    NEWLINE     reduce using rule 6 (program)
    NEWLINE     [reduce using rule 55 (code)]
    $default    reduce using rule 6 (program)


State 24

    1 program: program decl_var • NEWLINE
   52 code: decl_var •

    NEWLINE  shift, and go to state 74

    NEWLINE   [reduce using rule 52 (code)]
    $default  reduce using rule 52 (code)


State 25

    8 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 75

    var  go to state 76


State 26

   15 var: var • "," var
   81 assign: var • "=" val ";"
   82       | var • "=" cmp_expr ";"
   83       | var • "=" arithm_expr ";"
   84       | var • "=" merge_arr ";"

    "="  shift, and go to state 77
    ","  shift, and go to state 78


State 27

   99 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 79


State 28

    2 program: program build_func • NEWLINE
   53 code: build_func •

    NEWLINE  shift, and go to state 80

    NEWLINE   [reduce using rule 53 (code)]
    $default  reduce using rule 53 (code)


State 29

   27 build_func: func • ";"

    ";"  shift, and go to state 81


State 30

    3 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 82


State 31

   46 decl_func: name_func • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17
    "{"         shift, and go to state 18
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22
    NEWLINE     shift, and go to state 65

    decl_var         go to state 66
    type             go to state 25
    var              go to state 26
    arr_elements     go to state 27
    build_func       go to state 67
    func             go to state 29
    code             go to state 32
    decl_ops         go to state 68
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 83
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 32

  105 decl_statement: code •

    $default  reduce using rule 105 (decl_statement)


State 33

    4 program: program decl_ops • NEWLINE
   54 code: decl_ops •

    NEWLINE  shift, and go to state 84

    NEWLINE   [reduce using rule 54 (code)]
    $default  reduce using rule 54 (code)


State 34

   64 arithm_expr: sign •

    $default  reduce using rule 64 (arithm_expr)


State 35

   56 decl_ops: arithm_expr •
   66 arithm_expr: arithm_expr • "+" arithm_expr
   67            | arithm_expr • "-" arithm_expr
   68            | arithm_expr • "*" arithm_expr
   69            | arithm_expr • "/" arithm_expr

    "+"  shift, and go to state 85
    "-"  shift, and go to state 86
    "*"  shift, and go to state 87
    "/"  shift, and go to state 88

    "+"       [reduce using rule 56 (decl_ops)]
    "-"       [reduce using rule 56 (decl_ops)]
    $default  reduce using rule 56 (decl_ops)


State 36

   57 decl_ops: assign •

    $default  reduce using rule 57 (decl_ops)


State 37

   58 decl_ops: cmp_expr •
   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 89
    ">"   shift, and go to state 90
    "<="  shift, and go to state 91
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94

    $default  reduce using rule 58 (decl_ops)


State 38

   59 decl_ops: merge_arr •

    $default  reduce using rule 59 (decl_ops)


State 39

    5 program: program decl_statements • NEWLINE
  101 decl_statements: decl_statements • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17
    "{"         shift, and go to state 18
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22
    NEWLINE     shift, and go to state 95

    decl_var         go to state 66
    type             go to state 25
    var              go to state 26
    arr_elements     go to state 27
    build_func       go to state 67
    func             go to state 29
    code             go to state 32
    decl_ops         go to state 68
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 96
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 40

  100 decl_statements: decl_statement •

    $default  reduce using rule 100 (decl_statements)


State 41

  102 decl_statement: if_statement •

    $default  reduce using rule 102 (decl_statement)


State 42

  106 decl_statement: block_statement •

    $default  reduce using rule 106 (decl_statement)


State 43

  103 decl_statement: while_statement •

    $default  reduce using rule 103 (decl_statement)


State 44

  104 decl_statement: for_statement •

    $default  reduce using rule 104 (decl_statement)


State 45

   92 cmp_expr: IDENTIFIER •

    $default  reduce using rule 92 (cmp_expr)


State 46

   90 cmp_expr: INTEGER •

    $default  reduce using rule 90 (cmp_expr)


State 47

   91 cmp_expr: FLOAT •

    $default  reduce using rule 91 (cmp_expr)


State 48

  109 condition: "(" • condition ")"

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "("         shift, and go to state 48

    cmp_expr   go to state 49
    condition  go to state 97


State 49

   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr
  108 condition: cmp_expr •

    "<"   shift, and go to state 89
    ">"   shift, and go to state 90
    "<="  shift, and go to state 91
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94

    $default  reduce using rule 108 (condition)


State 50

  107 if_statement: SIF condition • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17
    "{"         shift, and go to state 18
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22
    NEWLINE     shift, and go to state 65

    decl_var         go to state 66
    type             go to state 25
    var              go to state 26
    arr_elements     go to state 27
    build_func       go to state 67
    func             go to state 29
    code             go to state 32
    decl_ops         go to state 68
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 98
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 51

   47 name_func: SFUNC IDENTIFIER • params NEWLINE

    "("  shift, and go to state 99

    params  go to state 100


State 52

  112 for_statement: SFOR "(" • assign cmp_expr ";" changing_val ")" decl_statement

    IDENTIFIER  shift, and go to state 75

    var     go to state 26
    assign  go to state 101


State 53

  111 while_statement: SWHILE condition • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17
    "{"         shift, and go to state 18
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22
    NEWLINE     shift, and go to state 65

    decl_var         go to state 66
    type             go to state 25
    var              go to state 26
    arr_elements     go to state 27
    build_func       go to state 67
    func             go to state 29
    code             go to state 32
    decl_ops         go to state 68
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 102
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 54

   60 sign: INTEGER •

    $default  reduce using rule 60 (sign)


State 55

   61 sign: FLOAT •

    $default  reduce using rule 61 (sign)


State 56

   62 sign: "+" sign •

    $default  reduce using rule 62 (sign)


State 57

   63 sign: "-" sign •

    $default  reduce using rule 63 (sign)


State 58

   25 str: STRING •

    $default  reduce using rule 25 (str)


State 59

   21 integ: INTEGER •

    $default  reduce using rule 21 (integ)


State 60

   23 fl: FLOAT •

    $default  reduce using rule 23 (fl)


State 61

   17 arr_elements: "[" "]" •

    $default  reduce using rule 17 (arr_elements)


State 62

   18 arr_elements: "[" integ • "]"
   22 integ: integ • "," integ

    "]"  shift, and go to state 103
    ","  shift, and go to state 104


State 63

   19 arr_elements: "[" fl • "]"
   24 fl: fl • "," fl

    "]"  shift, and go to state 105
    ","  shift, and go to state 106


State 64

   20 arr_elements: "[" str • "]"
   26 str: str • "," str

    "]"  shift, and go to state 107
    ","  shift, and go to state 108


State 65

   55 code: NEWLINE •

    $default  reduce using rule 55 (code)


State 66

   52 code: decl_var •

    $default  reduce using rule 52 (code)


State 67

   53 code: build_func •

    $default  reduce using rule 53 (code)


State 68

   54 code: decl_ops •

    $default  reduce using rule 54 (code)


State 69

  101 decl_statements: decl_statements • decl_statement
  110 block_statement: "{" decl_statements • "}"

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17
    "{"         shift, and go to state 18
    "}"         shift, and go to state 109
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22
    NEWLINE     shift, and go to state 65

    decl_var         go to state 66
    type             go to state 25
    var              go to state 26
    arr_elements     go to state 27
    build_func       go to state 67
    func             go to state 29
    code             go to state 32
    decl_ops         go to state 68
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 96
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 70

   28 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 110

    scan_params  go to state 111


State 71

   31 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 112
    STRING      shift, and go to state 113
    INTEGER     shift, and go to state 114
    FLOAT       shift, and go to state 115
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22

    pos_elem      go to state 116
    func          go to state 117
    print_params  go to state 118


State 72

   29 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 119
    STRING      shift, and go to state 120
    "["         shift, and go to state 17

    arr_elements  go to state 121
    len_params    go to state 122


State 73

   30 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 123
    STRING      shift, and go to state 124

    cmp_params  go to state 125


State 74

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 75

   14 var: IDENTIFIER •

    $default  reduce using rule 14 (var)


State 76

    8 decl_var: type var • ";"
   15 var: var • "," var

    ","  shift, and go to state 78
    ";"  shift, and go to state 126


State 77

   81 assign: var "=" • val ";"
   82       | var "=" • cmp_expr ";"
   83       | var "=" • arithm_expr ";"
   84       | var "=" • merge_arr ";"

    IDENTIFIER  shift, and go to state 127
    STRING      shift, and go to state 128
    INTEGER     shift, and go to state 129
    FLOAT       shift, and go to state 130
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17

    arr_elements  go to state 131
    sign          go to state 34
    arithm_expr   go to state 132
    val           go to state 133
    cmp_expr      go to state 134
    merge_arr     go to state 135


State 78

   15 var: var "," • var

    IDENTIFIER  shift, and go to state 75

    var  go to state 136


State 79

   99 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 17

    arr_elements  go to state 137


State 80

    2 program: program build_func NEWLINE •

    $default  reduce using rule 2 (program)


State 81

   27 build_func: func ";" •

    $default  reduce using rule 27 (build_func)


State 82

    3 program: program decl_func NEWLINE •

    $default  reduce using rule 3 (program)


State 83

   46 decl_func: name_func decl_statement •

    $default  reduce using rule 46 (decl_func)


State 84

    4 program: program decl_ops NEWLINE •

    $default  reduce using rule 4 (program)


State 85

   66 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 138
    INTEGER     shift, and go to state 54
    FLOAT       shift, and go to state 55
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 139


State 86

   67 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 138
    INTEGER     shift, and go to state 54
    FLOAT       shift, and go to state 55
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 140


State 87

   68 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 138
    INTEGER     shift, and go to state 54
    FLOAT       shift, and go to state 55
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 141


State 88

   69 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 138
    INTEGER     shift, and go to state 54
    FLOAT       shift, and go to state 55
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 142


State 89

   94 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47

    cmp_expr  go to state 143


State 90

   93 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47

    cmp_expr  go to state 144


State 91

   95 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47

    cmp_expr  go to state 145


State 92

   96 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47

    cmp_expr  go to state 146


State 93

   97 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47

    cmp_expr  go to state 147


State 94

   98 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47

    cmp_expr  go to state 148


State 95

    5 program: program decl_statements NEWLINE •
   55 code: NEWLINE •

    IDENTIFIER  reduce using rule 5 (program)
    IDENTIFIER  [reduce using rule 55 (code)]
    INTEGER     reduce using rule 5 (program)
    INTEGER     [reduce using rule 55 (code)]
    FLOAT       reduce using rule 5 (program)
    FLOAT       [reduce using rule 55 (code)]
    SIF         reduce using rule 5 (program)
    SIF         [reduce using rule 55 (code)]
    SDOUBLE     reduce using rule 5 (program)
    SDOUBLE     [reduce using rule 55 (code)]
    SINT        reduce using rule 5 (program)
    SINT        [reduce using rule 55 (code)]
    SLONG       reduce using rule 5 (program)
    SLONG       [reduce using rule 55 (code)]
    SFLOAT      reduce using rule 5 (program)
    SFLOAT      [reduce using rule 55 (code)]
    SFOR        reduce using rule 5 (program)
    SFOR        [reduce using rule 55 (code)]
    SSHORT      reduce using rule 5 (program)
    SSHORT      [reduce using rule 55 (code)]
    SWHILE      reduce using rule 5 (program)
    SWHILE      [reduce using rule 55 (code)]
    "+"         reduce using rule 5 (program)
    "+"         [reduce using rule 55 (code)]
    "-"         reduce using rule 5 (program)
    "-"         [reduce using rule 55 (code)]
    "["         reduce using rule 5 (program)
    "["         [reduce using rule 55 (code)]
    "{"         reduce using rule 5 (program)
    "{"         [reduce using rule 55 (code)]
    SSCAN       reduce using rule 5 (program)
    SSCAN       [reduce using rule 55 (code)]
    SPRINT      reduce using rule 5 (program)
    SPRINT      [reduce using rule 55 (code)]
    SLEN        reduce using rule 5 (program)
    SLEN        [reduce using rule 55 (code)]
    SCMP        reduce using rule 5 (program)
    SCMP        [reduce using rule 55 (code)]
    NEWLINE     reduce using rule 5 (program)
    NEWLINE     [reduce using rule 55 (code)]
    $default    reduce using rule 5 (program)


State 96

  101 decl_statements: decl_statements decl_statement •

    $default  reduce using rule 101 (decl_statements)


State 97

  109 condition: "(" condition • ")"

    ")"  shift, and go to state 149


State 98

  107 if_statement: SIF condition decl_statement •

    $default  reduce using rule 107 (if_statement)


State 99

   48 params: "(" • ")"
   49       | "(" • type_params ")"

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 13
    ")"      shift, and go to state 150

    type         go to state 151
    type_params  go to state 152


State 100

   47 name_func: SFUNC IDENTIFIER params • NEWLINE

    NEWLINE  shift, and go to state 153


State 101

  112 for_statement: SFOR "(" assign • cmp_expr ";" changing_val ")" decl_statement

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47

    cmp_expr  go to state 154


State 102

  111 while_statement: SWHILE condition decl_statement •

    $default  reduce using rule 111 (while_statement)


State 103

   18 arr_elements: "[" integ "]" •

    $default  reduce using rule 18 (arr_elements)


State 104

   22 integ: integ "," • integ

    INTEGER  shift, and go to state 59

    integ  go to state 155


State 105

   19 arr_elements: "[" fl "]" •

    $default  reduce using rule 19 (arr_elements)


State 106

   24 fl: fl "," • fl

    FLOAT  shift, and go to state 60

    fl  go to state 156


State 107

   20 arr_elements: "[" str "]" •

    $default  reduce using rule 20 (arr_elements)


State 108

   26 str: str "," • str

    STRING  shift, and go to state 58

    str  go to state 157


State 109

  110 block_statement: "{" decl_statements "}" •

    $default  reduce using rule 110 (block_statement)


State 110

   32 scan_params: IDENTIFIER •

    $default  reduce using rule 32 (scan_params)


State 111

   28 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 158


State 112

   16 pos_elem: IDENTIFIER • "[" INTEGER "]"
   40 print_params: IDENTIFIER •

    "["  shift, and go to state 159

    $default  reduce using rule 40 (print_params)


State 113

   39 print_params: STRING •

    $default  reduce using rule 39 (print_params)


State 114

   41 print_params: INTEGER •

    $default  reduce using rule 41 (print_params)


State 115

   42 print_params: FLOAT •

    $default  reduce using rule 42 (print_params)


State 116

   44 print_params: pos_elem •

    $default  reduce using rule 44 (print_params)


State 117

   43 print_params: func •

    $default  reduce using rule 43 (print_params)


State 118

   31 func: SPRINT "(" print_params • ")"
   45 print_params: print_params • "," print_params

    ")"  shift, and go to state 160
    ","  shift, and go to state 161


State 119

   35 len_params: IDENTIFIER •

    $default  reduce using rule 35 (len_params)


State 120

   34 len_params: STRING •

    $default  reduce using rule 34 (len_params)


State 121

   33 len_params: arr_elements •

    $default  reduce using rule 33 (len_params)


State 122

   29 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 162


State 123

   37 cmp_params: IDENTIFIER •

    $default  reduce using rule 37 (cmp_params)


State 124

   36 cmp_params: STRING •

    $default  reduce using rule 36 (cmp_params)


State 125

   30 func: SCMP "(" cmp_params • ")"
   38 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 163
    ","  shift, and go to state 164


State 126

    8 decl_var: type var ";" •

    $default  reduce using rule 8 (decl_var)


State 127

   65 arithm_expr: IDENTIFIER •
   92 cmp_expr: IDENTIFIER •

    "+"       reduce using rule 65 (arithm_expr)
    "-"       reduce using rule 65 (arithm_expr)
    "*"       reduce using rule 65 (arithm_expr)
    "/"       reduce using rule 65 (arithm_expr)
    ";"       reduce using rule 65 (arithm_expr)
    ";"       [reduce using rule 92 (cmp_expr)]
    $default  reduce using rule 92 (cmp_expr)


State 128

   87 val: STRING •

    $default  reduce using rule 87 (val)


State 129

   60 sign: INTEGER •
   85 val: INTEGER •
   90 cmp_expr: INTEGER •

    "+"       reduce using rule 60 (sign)
    "-"       reduce using rule 60 (sign)
    "*"       reduce using rule 60 (sign)
    "/"       reduce using rule 60 (sign)
    ","       reduce using rule 85 (val)
    ";"       reduce using rule 60 (sign)
    ";"       [reduce using rule 85 (val)]
    ";"       [reduce using rule 90 (cmp_expr)]
    $default  reduce using rule 90 (cmp_expr)


State 130

   61 sign: FLOAT •
   86 val: FLOAT •
   91 cmp_expr: FLOAT •

    "+"       reduce using rule 61 (sign)
    "-"       reduce using rule 61 (sign)
    "*"       reduce using rule 61 (sign)
    "/"       reduce using rule 61 (sign)
    ","       reduce using rule 86 (val)
    ";"       reduce using rule 61 (sign)
    ";"       [reduce using rule 86 (val)]
    ";"       [reduce using rule 91 (cmp_expr)]
    $default  reduce using rule 91 (cmp_expr)


State 131

   88 val: arr_elements •
   99 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 79

    $default  reduce using rule 88 (val)


State 132

   66 arithm_expr: arithm_expr • "+" arithm_expr
   67            | arithm_expr • "-" arithm_expr
   68            | arithm_expr • "*" arithm_expr
   69            | arithm_expr • "/" arithm_expr
   83 assign: var "=" arithm_expr • ";"

    "+"  shift, and go to state 85
    "-"  shift, and go to state 86
    "*"  shift, and go to state 87
    "/"  shift, and go to state 88
    ";"  shift, and go to state 165


State 133

   81 assign: var "=" val • ";"
   89 val: val • "," val

    ","  shift, and go to state 166
    ";"  shift, and go to state 167


State 134

   82 assign: var "=" cmp_expr • ";"
   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 89
    ">"   shift, and go to state 90
    "<="  shift, and go to state 91
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94
    ";"   shift, and go to state 168


State 135

   84 assign: var "=" merge_arr • ";"

    ";"  shift, and go to state 169


State 136

   15 var: var • "," var
   15    | var "," var •

    $default  reduce using rule 15 (var)


State 137

   99 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 99 (merge_arr)


State 138

   65 arithm_expr: IDENTIFIER •

    $default  reduce using rule 65 (arithm_expr)


State 139

   66 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr "+" arithm_expr •
   67            | arithm_expr • "-" arithm_expr
   68            | arithm_expr • "*" arithm_expr
   69            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 87
    "/"  shift, and go to state 88

    $default  reduce using rule 66 (arithm_expr)


State 140

   66 arithm_expr: arithm_expr • "+" arithm_expr
   67            | arithm_expr • "-" arithm_expr
   67            | arithm_expr "-" arithm_expr •
   68            | arithm_expr • "*" arithm_expr
   69            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 87
    "/"  shift, and go to state 88

    $default  reduce using rule 67 (arithm_expr)


State 141

   66 arithm_expr: arithm_expr • "+" arithm_expr
   67            | arithm_expr • "-" arithm_expr
   68            | arithm_expr • "*" arithm_expr
   68            | arithm_expr "*" arithm_expr •
   69            | arithm_expr • "/" arithm_expr

    $default  reduce using rule 68 (arithm_expr)


State 142

   66 arithm_expr: arithm_expr • "+" arithm_expr
   67            | arithm_expr • "-" arithm_expr
   68            | arithm_expr • "*" arithm_expr
   69            | arithm_expr • "/" arithm_expr
   69            | arithm_expr "/" arithm_expr •

    $default  reduce using rule 69 (arithm_expr)


State 143

   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   94         | cmp_expr "<" cmp_expr •
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 94 (cmp_expr)


State 144

   93 cmp_expr: cmp_expr • ">" cmp_expr
   93         | cmp_expr ">" cmp_expr •
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 93 (cmp_expr)


State 145

   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   95         | cmp_expr "<=" cmp_expr •
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 95 (cmp_expr)


State 146

   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   96         | cmp_expr ">=" cmp_expr •
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 96 (cmp_expr)


State 147

   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   97         | cmp_expr "==" cmp_expr •
   98         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 89
    ">"   shift, and go to state 90
    "<="  shift, and go to state 91
    ">="  shift, and go to state 92

    $default  reduce using rule 97 (cmp_expr)


State 148

   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr
   98         | cmp_expr "!=" cmp_expr •

    "<"   shift, and go to state 89
    ">"   shift, and go to state 90
    "<="  shift, and go to state 91
    ">="  shift, and go to state 92

    $default  reduce using rule 98 (cmp_expr)


State 149

  109 condition: "(" condition ")" •

    $default  reduce using rule 109 (condition)


State 150

   48 params: "(" ")" •

    $default  reduce using rule 48 (params)


State 151

   50 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 170


State 152

   49 params: "(" type_params • ")"
   51 type_params: type_params • "," type_params

    ")"  shift, and go to state 171
    ","  shift, and go to state 172


State 153

   47 name_func: SFUNC IDENTIFIER params NEWLINE •

    $default  reduce using rule 47 (name_func)


State 154

   93 cmp_expr: cmp_expr • ">" cmp_expr
   94         | cmp_expr • "<" cmp_expr
   95         | cmp_expr • "<=" cmp_expr
   96         | cmp_expr • ">=" cmp_expr
   97         | cmp_expr • "==" cmp_expr
   98         | cmp_expr • "!=" cmp_expr
  112 for_statement: SFOR "(" assign cmp_expr • ";" changing_val ")" decl_statement

    "<"   shift, and go to state 89
    ">"   shift, and go to state 90
    "<="  shift, and go to state 91
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94
    ";"   shift, and go to state 173


State 155

   22 integ: integ • "," integ
   22      | integ "," integ •

    $default  reduce using rule 22 (integ)


State 156

   24 fl: fl • "," fl
   24   | fl "," fl •

    $default  reduce using rule 24 (fl)


State 157

   26 str: str • "," str
   26    | str "," str •

    $default  reduce using rule 26 (str)


State 158

   28 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 28 (func)


State 159

   16 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 174


State 160

   31 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 31 (func)


State 161

   45 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 112
    STRING      shift, and go to state 113
    INTEGER     shift, and go to state 114
    FLOAT       shift, and go to state 115
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22

    pos_elem      go to state 116
    func          go to state 117
    print_params  go to state 175


State 162

   29 func: SLEN "(" len_params ")" •

    $default  reduce using rule 29 (func)


State 163

   30 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 30 (func)


State 164

   38 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 123
    STRING      shift, and go to state 124

    cmp_params  go to state 176


State 165

   83 assign: var "=" arithm_expr ";" •

    $default  reduce using rule 83 (assign)


State 166

   89 val: val "," • val

    STRING   shift, and go to state 128
    INTEGER  shift, and go to state 177
    FLOAT    shift, and go to state 178
    "["      shift, and go to state 17

    arr_elements  go to state 179
    val           go to state 180


State 167

   81 assign: var "=" val ";" •

    $default  reduce using rule 81 (assign)


State 168

   82 assign: var "=" cmp_expr ";" •

    $default  reduce using rule 82 (assign)


State 169

   84 assign: var "=" merge_arr ";" •

    $default  reduce using rule 84 (assign)


State 170

   50 type_params: type IDENTIFIER •

    $default  reduce using rule 50 (type_params)


State 171

   49 params: "(" type_params ")" •

    $default  reduce using rule 49 (params)


State 172

   51 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 13

    type         go to state 151
    type_params  go to state 181


State 173

  112 for_statement: SFOR "(" assign cmp_expr ";" • changing_val ")" decl_statement

    IDENTIFIER  shift, and go to state 182
    "--"        shift, and go to state 183
    "++"        shift, and go to state 184

    changing_val  go to state 185


State 174

   16 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 186


State 175

   45 print_params: print_params • "," print_params
   45             | print_params "," print_params •

    $default  reduce using rule 45 (print_params)


State 176

   38 cmp_params: cmp_params • "," cmp_params
   38           | cmp_params "," cmp_params •

    $default  reduce using rule 38 (cmp_params)


State 177

   85 val: INTEGER •

    $default  reduce using rule 85 (val)


State 178

   86 val: FLOAT •

    $default  reduce using rule 86 (val)


State 179

   88 val: arr_elements •

    $default  reduce using rule 88 (val)


State 180

   89 val: val • "," val
   89    | val "," val •

    $default  reduce using rule 89 (val)


State 181

   51 type_params: type_params • "," type_params
   51            | type_params "," type_params •

    $default  reduce using rule 51 (type_params)


State 182

   72 changing_val: IDENTIFIER •

    $default  reduce using rule 72 (changing_val)


State 183

   76 changing_val: "--" • changing_val

    IDENTIFIER  shift, and go to state 182
    "--"        shift, and go to state 183
    "++"        shift, and go to state 184

    changing_val  go to state 187


State 184

   75 changing_val: "++" • changing_val

    IDENTIFIER  shift, and go to state 182
    "--"        shift, and go to state 183
    "++"        shift, and go to state 184

    changing_val  go to state 188


State 185

   73 changing_val: changing_val • "++"
   74             | changing_val • "--"
   77             | changing_val • "+=" number
   78             | changing_val • "-=" number
   79             | changing_val • "*=" number
   80             | changing_val • "/=" number
  112 for_statement: SFOR "(" assign cmp_expr ";" changing_val • ")" decl_statement

    "*="  shift, and go to state 189
    "--"  shift, and go to state 190
    "/="  shift, and go to state 191
    "+="  shift, and go to state 192
    "-="  shift, and go to state 193
    "++"  shift, and go to state 194
    ")"   shift, and go to state 195


State 186

   16 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 16 (pos_elem)


State 187

   73 changing_val: changing_val • "++"
   74             | changing_val • "--"
   76             | "--" changing_val •
   77             | changing_val • "+=" number
   78             | changing_val • "-=" number
   79             | changing_val • "*=" number
   80             | changing_val • "/=" number

    $default  reduce using rule 76 (changing_val)


State 188

   73 changing_val: changing_val • "++"
   74             | changing_val • "--"
   75             | "++" changing_val •
   77             | changing_val • "+=" number
   78             | changing_val • "-=" number
   79             | changing_val • "*=" number
   80             | changing_val • "/=" number

    $default  reduce using rule 75 (changing_val)


State 189

   79 changing_val: changing_val "*=" • number

    INTEGER  shift, and go to state 196
    FLOAT    shift, and go to state 197

    number  go to state 198


State 190

   74 changing_val: changing_val "--" •

    $default  reduce using rule 74 (changing_val)


State 191

   80 changing_val: changing_val "/=" • number

    INTEGER  shift, and go to state 196
    FLOAT    shift, and go to state 197

    number  go to state 199


State 192

   77 changing_val: changing_val "+=" • number

    INTEGER  shift, and go to state 196
    FLOAT    shift, and go to state 197

    number  go to state 200


State 193

   78 changing_val: changing_val "-=" • number

    INTEGER  shift, and go to state 196
    FLOAT    shift, and go to state 197

    number  go to state 201


State 194

   73 changing_val: changing_val "++" •

    $default  reduce using rule 73 (changing_val)


State 195

  112 for_statement: SFOR "(" assign cmp_expr ";" changing_val ")" • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "["         shift, and go to state 17
    "{"         shift, and go to state 18
    SSCAN       shift, and go to state 19
    SPRINT      shift, and go to state 20
    SLEN        shift, and go to state 21
    SCMP        shift, and go to state 22
    NEWLINE     shift, and go to state 65

    decl_var         go to state 66
    type             go to state 25
    var              go to state 26
    arr_elements     go to state 27
    build_func       go to state 67
    func             go to state 29
    code             go to state 32
    decl_ops         go to state 68
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 202
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 196

   70 number: INTEGER •

    $default  reduce using rule 70 (number)


State 197

   71 number: FLOAT •

    $default  reduce using rule 71 (number)


State 198

   79 changing_val: changing_val "*=" number •

    $default  reduce using rule 79 (changing_val)


State 199

   80 changing_val: changing_val "/=" number •

    $default  reduce using rule 80 (changing_val)


State 200

   77 changing_val: changing_val "+=" number •

    $default  reduce using rule 77 (changing_val)


State 201

   78 changing_val: changing_val "-=" number •

    $default  reduce using rule 78 (changing_val)


State 202

  112 for_statement: SFOR "(" assign cmp_expr ";" changing_val ")" decl_statement •

    $default  reduce using rule 112 (for_statement)
