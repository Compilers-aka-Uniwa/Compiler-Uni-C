Nonterminals useless in grammar

    decl_func
    name
    params
    scan_params
    len_params
    cmp_params
    print_params


Terminals unused in grammar

    SCAN
    LEN
    CMP
    PRINT
    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    FUNC
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "+"
    "*="
    "--"
    "-"
    "/="
    "<"
    "*"
    "!"
    ">"
    "/"
    "&&"
    "<="
    "%"
    "||"
    ">="
    "=="
    "&"
    "+="
    "!="
    "-="
    "++"
    "("
    ")"
    "{"
    "}"
    "\\"
    END_OF_FILE
    UNKNOWN


Rules useless in grammar

   25 decl_func: name params ";"

   26 name: SCAN
   27     | LEN
   28     | CMP
   29     | PRINT

   30 params: "(" scan_params ")"
   31       | "(" len_params ")"
   32       | "(" cmp_params ")"
   33       | "(" print_params ")"

   34 scan_params: IDENTIFIER

   35 len_params: IDENTIFIER
   36           | STRING

   37 cmp_params: IDENTIFIER
   38           | STRING
   39           | cmp_params "," cmp_params

   40 print_params: IDENTIFIER
   41             | STRING
   42             | print_params "," print_params


State 18 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce
State 43 conflicts: 1 shift/reduce
State 44 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 $@2: ε

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE
    4        | NEWLINE
    5        | ε

    6 decl_arr: IDENTIFIER "=" elements ";"

    7 elements: "[" "]"
    8         | "[" arr_int "]"
    9         | "[" arr_fl "]"
   10         | "[" arr_str "]"

   11 arr_int: INTEGER
   12        | arr_int "," arr_int

   13 arr_fl: FLOAT
   14       | arr_fl "," arr_fl

   15 arr_str: STRING
   16        | arr_str "," arr_str

   17 decl_var: type var ";"

   18 type: INT
   19     | FLOAT_KEY
   20     | DOUBLE
   21     | SHORT
   22     | LONG

   23 var: IDENTIFIER
   24    | var "," var


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SCAN (258)
    LEN (259)
    CMP (260)
    PRINT (261)
    IDENTIFIER (262) 6 23
    STRING (263) 15
    INTEGER (264) 11
    FLOAT (265) 13
    BREAK (266)
    DO (267)
    IF (268)
    SIZEOF (269)
    CASE (270)
    DOUBLE (271) 20
    INT (272) 18
    STRUCT (273)
    FUNC (274)
    ELSE (275)
    LONG (276) 22
    SWITCH (277)
    CONST (278)
    FLOAT_KEY (279) 19
    RETURN (280)
    VOID (281)
    CONTINUE (282)
    FOR (283)
    SHORT (284) 21
    WHILE (285)
    "+" (286)
    "*=" (287)
    "--" (288)
    "-" (289)
    "/=" (290)
    "<" (291)
    "*" (292)
    "!" (293)
    ">" (294)
    "/" (295)
    "&&" (296)
    "<=" (297)
    "%" (298)
    "||" (299)
    ">=" (300)
    "=" (301) 6
    "==" (302)
    "&" (303)
    "+=" (304)
    "!=" (305)
    "-=" (306)
    "++" (307)
    "(" (308)
    ")" (309)
    "[" (310) 7 8 9 10
    "]" (311) 7 8 9 10
    "{" (312)
    "}" (313)
    "," (314) 12 14 16 24
    "\\" (315)
    ";" (316) 6 17
    NEWLINE (317) 3 4
    END_OF_FILE (318)
    UNKNOWN (319)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program (66)
        on left: 3 4 5
        on right: 0 3
    $@1 (67)
        on left: 1
        on right: 3
    $@2 (68)
        on left: 2
        on right: 3
    decl_arr (69)
        on left: 6
        on right: 3
    elements (70)
        on left: 7 8 9 10
        on right: 6
    arr_int (71)
        on left: 11 12
        on right: 8 12
    arr_fl (72)
        on left: 13 14
        on right: 9 14
    arr_str (73)
        on left: 15 16
        on right: 10 16
    decl_var (74)
        on left: 17
        on right: 3
    type (75)
        on left: 18 19 20 21 22
        on right: 17
    var (76)
        on left: 23 24
        on right: 17 24


State 0

    0 $accept: • program $end

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 5 (program)

    program  go to state 2


State 1

    4 program: NEWLINE •

    $default  reduce using rule 4 (program)


State 2

    0 $accept: program • $end
    3 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE

    $end       shift, and go to state 3
    DOUBLE     shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    FLOAT_KEY  shift, and go to state 7
    SHORT      shift, and go to state 8

    decl_var  go to state 9
    type      go to state 10


State 3

    0 $accept: program $end •

    $default  accept


State 4

   20 type: DOUBLE •

    $default  reduce using rule 20 (type)


State 5

   18 type: INT •

    $default  reduce using rule 18 (type)


State 6

   22 type: LONG •

    $default  reduce using rule 22 (type)


State 7

   19 type: FLOAT_KEY •

    $default  reduce using rule 19 (type)


State 8

   21 type: SHORT •

    $default  reduce using rule 21 (type)


State 9

    3 program: program decl_var • NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE

    NEWLINE  shift, and go to state 11


State 10

   17 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 12

    var  go to state 13


State 11

    3 program: program decl_var NEWLINE • $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE

    $default  reduce using rule 1 ($@1)

    $@1  go to state 14


State 12

   23 var: IDENTIFIER •

    $default  reduce using rule 23 (var)


State 13

   17 decl_var: type var • ";"
   24 var: var • "," var

    ","  shift, and go to state 15
    ";"  shift, and go to state 16


State 14

    3 program: program decl_var NEWLINE $@1 • program decl_arr NEWLINE $@2 program decl_arr NEWLINE

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 5 (program)

    program  go to state 17


State 15

   24 var: var "," • var

    IDENTIFIER  shift, and go to state 12

    var  go to state 18


State 16

   17 decl_var: type var ";" •

    $default  reduce using rule 17 (decl_var)


State 17

    3 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE
    3        | program decl_var NEWLINE $@1 program • decl_arr NEWLINE $@2 program decl_arr NEWLINE

    IDENTIFIER  shift, and go to state 19
    DOUBLE      shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    FLOAT_KEY   shift, and go to state 7
    SHORT       shift, and go to state 8

    decl_arr  go to state 20
    decl_var  go to state 9
    type      go to state 10


State 18

   24 var: var • "," var
   24    | var "," var •

    ","  shift, and go to state 15

    ","       [reduce using rule 24 (var)]
    $default  reduce using rule 24 (var)


State 19

    6 decl_arr: IDENTIFIER • "=" elements ";"

    "="  shift, and go to state 21


State 20

    3 program: program decl_var NEWLINE $@1 program decl_arr • NEWLINE $@2 program decl_arr NEWLINE

    NEWLINE  shift, and go to state 22


State 21

    6 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 23

    elements  go to state 24


State 22

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE • $@2 program decl_arr NEWLINE

    $default  reduce using rule 2 ($@2)

    $@2  go to state 25


State 23

    7 elements: "[" • "]"
    8         | "[" • arr_int "]"
    9         | "[" • arr_fl "]"
   10         | "[" • arr_str "]"

    STRING   shift, and go to state 26
    INTEGER  shift, and go to state 27
    FLOAT    shift, and go to state 28
    "]"      shift, and go to state 29

    arr_int  go to state 30
    arr_fl   go to state 31
    arr_str  go to state 32


State 24

    6 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 33


State 25

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 • program decl_arr NEWLINE

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 5 (program)

    program  go to state 34


State 26

   15 arr_str: STRING •

    $default  reduce using rule 15 (arr_str)


State 27

   11 arr_int: INTEGER •

    $default  reduce using rule 11 (arr_int)


State 28

   13 arr_fl: FLOAT •

    $default  reduce using rule 13 (arr_fl)


State 29

    7 elements: "[" "]" •

    $default  reduce using rule 7 (elements)


State 30

    8 elements: "[" arr_int • "]"
   12 arr_int: arr_int • "," arr_int

    "]"  shift, and go to state 35
    ","  shift, and go to state 36


State 31

    9 elements: "[" arr_fl • "]"
   14 arr_fl: arr_fl • "," arr_fl

    "]"  shift, and go to state 37
    ","  shift, and go to state 38


State 32

   10 elements: "[" arr_str • "]"
   16 arr_str: arr_str • "," arr_str

    "]"  shift, and go to state 39
    ","  shift, and go to state 40


State 33

    6 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 6 (decl_arr)


State 34

    3 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE
    3        | program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program • decl_arr NEWLINE

    IDENTIFIER  shift, and go to state 19
    DOUBLE      shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    FLOAT_KEY   shift, and go to state 7
    SHORT       shift, and go to state 8

    decl_arr  go to state 41
    decl_var  go to state 9
    type      go to state 10


State 35

    8 elements: "[" arr_int "]" •

    $default  reduce using rule 8 (elements)


State 36

   12 arr_int: arr_int "," • arr_int

    INTEGER  shift, and go to state 27

    arr_int  go to state 42


State 37

    9 elements: "[" arr_fl "]" •

    $default  reduce using rule 9 (elements)


State 38

   14 arr_fl: arr_fl "," • arr_fl

    FLOAT  shift, and go to state 28

    arr_fl  go to state 43


State 39

   10 elements: "[" arr_str "]" •

    $default  reduce using rule 10 (elements)


State 40

   16 arr_str: arr_str "," • arr_str

    STRING  shift, and go to state 26

    arr_str  go to state 44


State 41

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr • NEWLINE

    NEWLINE  shift, and go to state 45


State 42

   12 arr_int: arr_int • "," arr_int
   12        | arr_int "," arr_int •

    ","  shift, and go to state 36

    ","       [reduce using rule 12 (arr_int)]
    $default  reduce using rule 12 (arr_int)


State 43

   14 arr_fl: arr_fl • "," arr_fl
   14       | arr_fl "," arr_fl •

    ","  shift, and go to state 38

    ","       [reduce using rule 14 (arr_fl)]
    $default  reduce using rule 14 (arr_fl)


State 44

   16 arr_str: arr_str • "," arr_str
   16        | arr_str "," arr_str •

    ","  shift, and go to state 40

    ","       [reduce using rule 16 (arr_str)]
    $default  reduce using rule 16 (arr_str)


State 45

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE •

    $default  reduce using rule 3 (program)
