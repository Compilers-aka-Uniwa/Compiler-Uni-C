Terminals unused in grammar

    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "*="
    "--"
    "/="
    "!"
    "&&"
    "%"
    "||"
    "&"
    "+="
    "-="
    "++"
    "\\"
    UNKNOWN


State 3 conflicts: 1 reduce/reduce
State 4 conflicts: 1 reduce/reduce
State 5 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program decl_arr NEWLINE
    3        | program build_func NEWLINE
    4        | program decl_func NEWLINE
    5        | program decl_operations NEWLINE
    6        | program NEWLINE
    7        | ε

    8 decl_var: type var ";"

    9 type: INT
   10     | FLOAT_KEY
   11     | DOUBLE
   12     | SHORT
   13     | LONG

   14 var: IDENTIFIER
   15    | var "," var

   16 decl_arr: IDENTIFIER "=" elements ";"

   17 pos_elem: IDENTIFIER "[" INTEGER "]"

   18 elements: "[" "]"
   19         | "[" arr_int "]"
   20         | "[" arr_fl "]"
   21         | "[" arr_str "]"

   22 arr_int: INTEGER
   23        | arr_int "," arr_int

   24 arr_fl: FLOAT
   25       | arr_fl "," arr_fl

   26 arr_str: STRING
   27        | arr_str "," arr_str

   28 build_func: func ";"

   29 func: SCAN "(" scan_params ")"
   30     | LEN "(" len_params ")"
   31     | CMP "(" cmp_params ")"
   32     | PRINT "(" print_params ")"

   33 scan_params: IDENTIFIER

   34 len_params: elements
   35           | STRING
   36           | IDENTIFIER

   37 cmp_params: STRING
   38           | IDENTIFIER
   39           | cmp_params "," cmp_params

   40 print_params: STRING
   41             | IDENTIFIER
   42             | INTEGER
   43             | func
   44             | pos_elem
   45             | print_params "," print_params

   46 decl_func: name_func code_func

   47 name_func: IDENTIFIER
   48          | FUNC name_func params NEWLINE

   49 params: "(" ")"
   50       | "(" type_params ")"

   51 type_params: type IDENTIFIER
   52            | type_params "," type_params

   53 code_func: "{" code NEWLINE "}"

   54 code: ε

   55 decl_operations: arithm_expr
   56                | cmp_expr
   57                | merge_arr

   58 sign: INTEGER
   59     | FLOAT
   60     | "+" sign
   61     | "-" sign

   62 arithm_expr: sign
   63            | IDENTIFIER
   64            | arithm_expr "+" arithm_expr
   65            | arithm_expr "-" arithm_expr
   66            | arithm_expr "*" arithm_expr
   67            | arithm_expr "/" arithm_expr

   68 cmp_expr: INTEGER
   69         | FLOAT
   70         | IDENTIFIER
   71         | cmp_expr ">" cmp_expr
   72         | cmp_expr "<" cmp_expr
   73         | cmp_expr "<=" cmp_expr
   74         | cmp_expr ">=" cmp_expr
   75         | cmp_expr "==" cmp_expr
   76         | cmp_expr "!=" cmp_expr

   77 merge_arr: elements "+" elements


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 14 16 17 33 36 38 41 47 51 63 70
    STRING (259) 26 35 37 40
    INTEGER (260) 17 22 42 58 68
    FLOAT (261) 24 59 69
    BREAK (262)
    DO (263)
    IF (264)
    SIZEOF (265)
    CASE (266)
    DOUBLE (267) 11
    INT (268) 9
    STRUCT (269)
    FUNC (270) 48
    ELSE (271)
    LONG (272) 13
    SWITCH (273)
    CONST (274)
    FLOAT_KEY (275) 10
    RETURN (276)
    VOID (277)
    CONTINUE (278)
    FOR (279)
    SHORT (280) 12
    WHILE (281)
    "+" (282) 60 64 77
    "*=" (283)
    "--" (284)
    "-" (285) 61 65
    "/=" (286)
    "<" (287) 72
    "*" (288) 66
    "!" (289)
    ">" (290) 71
    "/" (291) 67
    "&&" (292)
    "<=" (293) 73
    "%" (294)
    "||" (295)
    ">=" (296) 74
    "=" (297) 16
    "==" (298) 75
    "&" (299)
    "+=" (300)
    "!=" (301) 76
    "-=" (302)
    "++" (303)
    "(" (304) 29 30 31 32 49 50
    ")" (305) 29 30 31 32 49 50
    "[" (306) 17 18 19 20 21
    "]" (307) 17 18 19 20 21
    "{" (308) 53
    "}" (309) 53
    "," (310) 15 23 25 27 39 45 52
    "\\" (311)
    ";" (312) 8 16 28
    SCAN (313) 29
    PRINT (314) 32
    LEN (315) 30
    CMP (316) 31
    NEWLINE (317) 1 2 3 4 5 6 48 53
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1 2 3 4 5 6 7
        on right: 0 1 2 3 4 5 6
    decl_var (66)
        on left: 8
        on right: 1
    type (67)
        on left: 9 10 11 12 13
        on right: 8 51
    var (68)
        on left: 14 15
        on right: 8 15
    decl_arr (69)
        on left: 16
        on right: 2
    pos_elem (70)
        on left: 17
        on right: 44
    elements (71)
        on left: 18 19 20 21
        on right: 16 34 77
    arr_int (72)
        on left: 22 23
        on right: 19 23
    arr_fl (73)
        on left: 24 25
        on right: 20 25
    arr_str (74)
        on left: 26 27
        on right: 21 27
    build_func (75)
        on left: 28
        on right: 3
    func (76)
        on left: 29 30 31 32
        on right: 28 43
    scan_params (77)
        on left: 33
        on right: 29
    len_params (78)
        on left: 34 35 36
        on right: 30
    cmp_params (79)
        on left: 37 38 39
        on right: 31 39
    print_params (80)
        on left: 40 41 42 43 44 45
        on right: 32 45
    decl_func (81)
        on left: 46
        on right: 4
    name_func (82)
        on left: 47 48
        on right: 46 48
    params (83)
        on left: 49 50
        on right: 48
    type_params (84)
        on left: 51 52
        on right: 50 52
    code_func (85)
        on left: 53
        on right: 46
    code (86)
        on left: 54
        on right: 53
    decl_operations (87)
        on left: 55 56 57
        on right: 5
    sign (88)
        on left: 58 59 60 61
        on right: 60 61 62
    arithm_expr (89)
        on left: 62 63 64 65 66 67
        on right: 55 64 65 66 67
    cmp_expr (90)
        on left: 68 69 70 71 72 73 74 75 76
        on right: 56 71 72 73 74 75 76
    merge_arr (91)
        on left: 77
        on right: 57


State 0

    0 $accept: • program $end

    $default  reduce using rule 7 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • decl_arr NEWLINE
    3        | program • build_func NEWLINE
    4        | program • decl_func NEWLINE
    5        | program • decl_operations NEWLINE
    6        | program • NEWLINE

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    DOUBLE      shift, and go to state 6
    INT         shift, and go to state 7
    FUNC        shift, and go to state 8
    LONG        shift, and go to state 9
    FLOAT_KEY   shift, and go to state 10
    SHORT       shift, and go to state 11
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13
    "["         shift, and go to state 14
    SCAN        shift, and go to state 15
    PRINT       shift, and go to state 16
    LEN         shift, and go to state 17
    CMP         shift, and go to state 18
    NEWLINE     shift, and go to state 19

    decl_var         go to state 20
    type             go to state 21
    decl_arr         go to state 22
    elements         go to state 23
    build_func       go to state 24
    func             go to state 25
    decl_func        go to state 26
    name_func        go to state 27
    decl_operations  go to state 28
    sign             go to state 29
    arithm_expr      go to state 30
    cmp_expr         go to state 31
    merge_arr        go to state 32


State 2

    0 $accept: program $end •

    $default  accept


State 3

   16 decl_arr: IDENTIFIER • "=" elements ";"
   47 name_func: IDENTIFIER •
   63 arithm_expr: IDENTIFIER •
   70 cmp_expr: IDENTIFIER •

    "="  shift, and go to state 33

    "+"       reduce using rule 63 (arithm_expr)
    "-"       reduce using rule 63 (arithm_expr)
    "*"       reduce using rule 63 (arithm_expr)
    "/"       reduce using rule 63 (arithm_expr)
    "{"       reduce using rule 47 (name_func)
    NEWLINE   reduce using rule 63 (arithm_expr)
    NEWLINE   [reduce using rule 70 (cmp_expr)]
    $default  reduce using rule 70 (cmp_expr)


State 4

   58 sign: INTEGER •
   68 cmp_expr: INTEGER •

    "+"       reduce using rule 58 (sign)
    "-"       reduce using rule 58 (sign)
    "*"       reduce using rule 58 (sign)
    "/"       reduce using rule 58 (sign)
    NEWLINE   reduce using rule 58 (sign)
    NEWLINE   [reduce using rule 68 (cmp_expr)]
    $default  reduce using rule 68 (cmp_expr)


State 5

   59 sign: FLOAT •
   69 cmp_expr: FLOAT •

    "+"       reduce using rule 59 (sign)
    "-"       reduce using rule 59 (sign)
    "*"       reduce using rule 59 (sign)
    "/"       reduce using rule 59 (sign)
    NEWLINE   reduce using rule 59 (sign)
    NEWLINE   [reduce using rule 69 (cmp_expr)]
    $default  reduce using rule 69 (cmp_expr)


State 6

   11 type: DOUBLE •

    $default  reduce using rule 11 (type)


State 7

    9 type: INT •

    $default  reduce using rule 9 (type)


State 8

   48 name_func: FUNC • name_func params NEWLINE

    IDENTIFIER  shift, and go to state 34
    FUNC        shift, and go to state 8

    name_func  go to state 35


State 9

   13 type: LONG •

    $default  reduce using rule 13 (type)


State 10

   10 type: FLOAT_KEY •

    $default  reduce using rule 10 (type)


State 11

   12 type: SHORT •

    $default  reduce using rule 12 (type)


State 12

   60 sign: "+" • sign

    INTEGER  shift, and go to state 36
    FLOAT    shift, and go to state 37
    "+"      shift, and go to state 12
    "-"      shift, and go to state 13

    sign  go to state 38


State 13

   61 sign: "-" • sign

    INTEGER  shift, and go to state 36
    FLOAT    shift, and go to state 37
    "+"      shift, and go to state 12
    "-"      shift, and go to state 13

    sign  go to state 39


State 14

   18 elements: "[" • "]"
   19         | "[" • arr_int "]"
   20         | "[" • arr_fl "]"
   21         | "[" • arr_str "]"

    STRING   shift, and go to state 40
    INTEGER  shift, and go to state 41
    FLOAT    shift, and go to state 42
    "]"      shift, and go to state 43

    arr_int  go to state 44
    arr_fl   go to state 45
    arr_str  go to state 46


State 15

   29 func: SCAN • "(" scan_params ")"

    "("  shift, and go to state 47


State 16

   32 func: PRINT • "(" print_params ")"

    "("  shift, and go to state 48


State 17

   30 func: LEN • "(" len_params ")"

    "("  shift, and go to state 49


State 18

   31 func: CMP • "(" cmp_params ")"

    "("  shift, and go to state 50


State 19

    6 program: program NEWLINE •

    $default  reduce using rule 6 (program)


State 20

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 51


State 21

    8 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 52

    var  go to state 53


State 22

    2 program: program decl_arr • NEWLINE

    NEWLINE  shift, and go to state 54


State 23

   77 merge_arr: elements • "+" elements

    "+"  shift, and go to state 55


State 24

    3 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 56


State 25

   28 build_func: func • ";"

    ";"  shift, and go to state 57


State 26

    4 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 58


State 27

   46 decl_func: name_func • code_func

    "{"  shift, and go to state 59

    code_func  go to state 60


State 28

    5 program: program decl_operations • NEWLINE

    NEWLINE  shift, and go to state 61


State 29

   62 arithm_expr: sign •

    $default  reduce using rule 62 (arithm_expr)


State 30

   55 decl_operations: arithm_expr •
   64 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr • "-" arithm_expr
   66            | arithm_expr • "*" arithm_expr
   67            | arithm_expr • "/" arithm_expr

    "+"  shift, and go to state 62
    "-"  shift, and go to state 63
    "*"  shift, and go to state 64
    "/"  shift, and go to state 65

    $default  reduce using rule 55 (decl_operations)


State 31

   56 decl_operations: cmp_expr •
   71 cmp_expr: cmp_expr • ">" cmp_expr
   72         | cmp_expr • "<" cmp_expr
   73         | cmp_expr • "<=" cmp_expr
   74         | cmp_expr • ">=" cmp_expr
   75         | cmp_expr • "==" cmp_expr
   76         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 66
    ">"   shift, and go to state 67
    "<="  shift, and go to state 68
    ">="  shift, and go to state 69
    "=="  shift, and go to state 70
    "!="  shift, and go to state 71

    $default  reduce using rule 56 (decl_operations)


State 32

   57 decl_operations: merge_arr •

    $default  reduce using rule 57 (decl_operations)


State 33

   16 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 14

    elements  go to state 72


State 34

   47 name_func: IDENTIFIER •

    $default  reduce using rule 47 (name_func)


State 35

   48 name_func: FUNC name_func • params NEWLINE

    "("  shift, and go to state 73

    params  go to state 74


State 36

   58 sign: INTEGER •

    $default  reduce using rule 58 (sign)


State 37

   59 sign: FLOAT •

    $default  reduce using rule 59 (sign)


State 38

   60 sign: "+" sign •

    $default  reduce using rule 60 (sign)


State 39

   61 sign: "-" sign •

    $default  reduce using rule 61 (sign)


State 40

   26 arr_str: STRING •

    $default  reduce using rule 26 (arr_str)


State 41

   22 arr_int: INTEGER •

    $default  reduce using rule 22 (arr_int)


State 42

   24 arr_fl: FLOAT •

    $default  reduce using rule 24 (arr_fl)


State 43

   18 elements: "[" "]" •

    $default  reduce using rule 18 (elements)


State 44

   19 elements: "[" arr_int • "]"
   23 arr_int: arr_int • "," arr_int

    "]"  shift, and go to state 75
    ","  shift, and go to state 76


State 45

   20 elements: "[" arr_fl • "]"
   25 arr_fl: arr_fl • "," arr_fl

    "]"  shift, and go to state 77
    ","  shift, and go to state 78


State 46

   21 elements: "[" arr_str • "]"
   27 arr_str: arr_str • "," arr_str

    "]"  shift, and go to state 79
    ","  shift, and go to state 80


State 47

   29 func: SCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 81

    scan_params  go to state 82


State 48

   32 func: PRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 83
    STRING      shift, and go to state 84
    INTEGER     shift, and go to state 85
    SCAN        shift, and go to state 15
    PRINT       shift, and go to state 16
    LEN         shift, and go to state 17
    CMP         shift, and go to state 18

    pos_elem      go to state 86
    func          go to state 87
    print_params  go to state 88


State 49

   30 func: LEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 89
    STRING      shift, and go to state 90
    "["         shift, and go to state 14

    elements    go to state 91
    len_params  go to state 92


State 50

   31 func: CMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 93
    STRING      shift, and go to state 94

    cmp_params  go to state 95


State 51

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 52

   14 var: IDENTIFIER •

    $default  reduce using rule 14 (var)


State 53

    8 decl_var: type var • ";"
   15 var: var • "," var

    ","  shift, and go to state 96
    ";"  shift, and go to state 97


State 54

    2 program: program decl_arr NEWLINE •

    $default  reduce using rule 2 (program)


State 55

   77 merge_arr: elements "+" • elements

    "["  shift, and go to state 14

    elements  go to state 98


State 56

    3 program: program build_func NEWLINE •

    $default  reduce using rule 3 (program)


State 57

   28 build_func: func ";" •

    $default  reduce using rule 28 (build_func)


State 58

    4 program: program decl_func NEWLINE •

    $default  reduce using rule 4 (program)


State 59

   53 code_func: "{" • code NEWLINE "}"

    $default  reduce using rule 54 (code)

    code  go to state 99


State 60

   46 decl_func: name_func code_func •

    $default  reduce using rule 46 (decl_func)


State 61

    5 program: program decl_operations NEWLINE •

    $default  reduce using rule 5 (program)


State 62

   64 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 100
    INTEGER     shift, and go to state 36
    FLOAT       shift, and go to state 37
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13

    sign         go to state 29
    arithm_expr  go to state 101


State 63

   65 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 100
    INTEGER     shift, and go to state 36
    FLOAT       shift, and go to state 37
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13

    sign         go to state 29
    arithm_expr  go to state 102


State 64

   66 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 100
    INTEGER     shift, and go to state 36
    FLOAT       shift, and go to state 37
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13

    sign         go to state 29
    arithm_expr  go to state 103


State 65

   67 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 100
    INTEGER     shift, and go to state 36
    FLOAT       shift, and go to state 37
    "+"         shift, and go to state 12
    "-"         shift, and go to state 13

    sign         go to state 29
    arithm_expr  go to state 104


State 66

   72 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 105
    INTEGER     shift, and go to state 106
    FLOAT       shift, and go to state 107

    cmp_expr  go to state 108


State 67

   71 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 105
    INTEGER     shift, and go to state 106
    FLOAT       shift, and go to state 107

    cmp_expr  go to state 109


State 68

   73 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 105
    INTEGER     shift, and go to state 106
    FLOAT       shift, and go to state 107

    cmp_expr  go to state 110


State 69

   74 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 105
    INTEGER     shift, and go to state 106
    FLOAT       shift, and go to state 107

    cmp_expr  go to state 111


State 70

   75 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 105
    INTEGER     shift, and go to state 106
    FLOAT       shift, and go to state 107

    cmp_expr  go to state 112


State 71

   76 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 105
    INTEGER     shift, and go to state 106
    FLOAT       shift, and go to state 107

    cmp_expr  go to state 113


State 72

   16 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 114


State 73

   49 params: "(" • ")"
   50       | "(" • type_params ")"

    DOUBLE     shift, and go to state 6
    INT        shift, and go to state 7
    LONG       shift, and go to state 9
    FLOAT_KEY  shift, and go to state 10
    SHORT      shift, and go to state 11
    ")"        shift, and go to state 115

    type         go to state 116
    type_params  go to state 117


State 74

   48 name_func: FUNC name_func params • NEWLINE

    NEWLINE  shift, and go to state 118


State 75

   19 elements: "[" arr_int "]" •

    $default  reduce using rule 19 (elements)


State 76

   23 arr_int: arr_int "," • arr_int

    INTEGER  shift, and go to state 41

    arr_int  go to state 119


State 77

   20 elements: "[" arr_fl "]" •

    $default  reduce using rule 20 (elements)


State 78

   25 arr_fl: arr_fl "," • arr_fl

    FLOAT  shift, and go to state 42

    arr_fl  go to state 120


State 79

   21 elements: "[" arr_str "]" •

    $default  reduce using rule 21 (elements)


State 80

   27 arr_str: arr_str "," • arr_str

    STRING  shift, and go to state 40

    arr_str  go to state 121


State 81

   33 scan_params: IDENTIFIER •

    $default  reduce using rule 33 (scan_params)


State 82

   29 func: SCAN "(" scan_params • ")"

    ")"  shift, and go to state 122


State 83

   17 pos_elem: IDENTIFIER • "[" INTEGER "]"
   41 print_params: IDENTIFIER •

    "["  shift, and go to state 123

    $default  reduce using rule 41 (print_params)


State 84

   40 print_params: STRING •

    $default  reduce using rule 40 (print_params)


State 85

   42 print_params: INTEGER •

    $default  reduce using rule 42 (print_params)


State 86

   44 print_params: pos_elem •

    $default  reduce using rule 44 (print_params)


State 87

   43 print_params: func •

    $default  reduce using rule 43 (print_params)


State 88

   32 func: PRINT "(" print_params • ")"
   45 print_params: print_params • "," print_params

    ")"  shift, and go to state 124
    ","  shift, and go to state 125


State 89

   36 len_params: IDENTIFIER •

    $default  reduce using rule 36 (len_params)


State 90

   35 len_params: STRING •

    $default  reduce using rule 35 (len_params)


State 91

   34 len_params: elements •

    $default  reduce using rule 34 (len_params)


State 92

   30 func: LEN "(" len_params • ")"

    ")"  shift, and go to state 126


State 93

   38 cmp_params: IDENTIFIER •

    $default  reduce using rule 38 (cmp_params)


State 94

   37 cmp_params: STRING •

    $default  reduce using rule 37 (cmp_params)


State 95

   31 func: CMP "(" cmp_params • ")"
   39 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 127
    ","  shift, and go to state 128


State 96

   15 var: var "," • var

    IDENTIFIER  shift, and go to state 52

    var  go to state 129


State 97

    8 decl_var: type var ";" •

    $default  reduce using rule 8 (decl_var)


State 98

   77 merge_arr: elements "+" elements •

    $default  reduce using rule 77 (merge_arr)


State 99

   53 code_func: "{" code • NEWLINE "}"

    NEWLINE  shift, and go to state 130


State 100

   63 arithm_expr: IDENTIFIER •

    $default  reduce using rule 63 (arithm_expr)


State 101

   64 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr "+" arithm_expr •
   65            | arithm_expr • "-" arithm_expr
   66            | arithm_expr • "*" arithm_expr
   67            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 64
    "/"  shift, and go to state 65

    $default  reduce using rule 64 (arithm_expr)


State 102

   64 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr • "-" arithm_expr
   65            | arithm_expr "-" arithm_expr •
   66            | arithm_expr • "*" arithm_expr
   67            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 64
    "/"  shift, and go to state 65

    $default  reduce using rule 65 (arithm_expr)


State 103

   64 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr • "-" arithm_expr
   66            | arithm_expr • "*" arithm_expr
   66            | arithm_expr "*" arithm_expr •
   67            | arithm_expr • "/" arithm_expr

    $default  reduce using rule 66 (arithm_expr)


State 104

   64 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr • "-" arithm_expr
   66            | arithm_expr • "*" arithm_expr
   67            | arithm_expr • "/" arithm_expr
   67            | arithm_expr "/" arithm_expr •

    $default  reduce using rule 67 (arithm_expr)


State 105

   70 cmp_expr: IDENTIFIER •

    $default  reduce using rule 70 (cmp_expr)


State 106

   68 cmp_expr: INTEGER •

    $default  reduce using rule 68 (cmp_expr)


State 107

   69 cmp_expr: FLOAT •

    $default  reduce using rule 69 (cmp_expr)


State 108

   71 cmp_expr: cmp_expr • ">" cmp_expr
   72         | cmp_expr • "<" cmp_expr
   72         | cmp_expr "<" cmp_expr •
   73         | cmp_expr • "<=" cmp_expr
   74         | cmp_expr • ">=" cmp_expr
   75         | cmp_expr • "==" cmp_expr
   76         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 72 (cmp_expr)


State 109

   71 cmp_expr: cmp_expr • ">" cmp_expr
   71         | cmp_expr ">" cmp_expr •
   72         | cmp_expr • "<" cmp_expr
   73         | cmp_expr • "<=" cmp_expr
   74         | cmp_expr • ">=" cmp_expr
   75         | cmp_expr • "==" cmp_expr
   76         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 71 (cmp_expr)


State 110

   71 cmp_expr: cmp_expr • ">" cmp_expr
   72         | cmp_expr • "<" cmp_expr
   73         | cmp_expr • "<=" cmp_expr
   73         | cmp_expr "<=" cmp_expr •
   74         | cmp_expr • ">=" cmp_expr
   75         | cmp_expr • "==" cmp_expr
   76         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 73 (cmp_expr)


State 111

   71 cmp_expr: cmp_expr • ">" cmp_expr
   72         | cmp_expr • "<" cmp_expr
   73         | cmp_expr • "<=" cmp_expr
   74         | cmp_expr • ">=" cmp_expr
   74         | cmp_expr ">=" cmp_expr •
   75         | cmp_expr • "==" cmp_expr
   76         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 74 (cmp_expr)


State 112

   71 cmp_expr: cmp_expr • ">" cmp_expr
   72         | cmp_expr • "<" cmp_expr
   73         | cmp_expr • "<=" cmp_expr
   74         | cmp_expr • ">=" cmp_expr
   75         | cmp_expr • "==" cmp_expr
   75         | cmp_expr "==" cmp_expr •
   76         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 66
    ">"   shift, and go to state 67
    "<="  shift, and go to state 68
    ">="  shift, and go to state 69

    $default  reduce using rule 75 (cmp_expr)


State 113

   71 cmp_expr: cmp_expr • ">" cmp_expr
   72         | cmp_expr • "<" cmp_expr
   73         | cmp_expr • "<=" cmp_expr
   74         | cmp_expr • ">=" cmp_expr
   75         | cmp_expr • "==" cmp_expr
   76         | cmp_expr • "!=" cmp_expr
   76         | cmp_expr "!=" cmp_expr •

    "<"   shift, and go to state 66
    ">"   shift, and go to state 67
    "<="  shift, and go to state 68
    ">="  shift, and go to state 69

    $default  reduce using rule 76 (cmp_expr)


State 114

   16 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 16 (decl_arr)


State 115

   49 params: "(" ")" •

    $default  reduce using rule 49 (params)


State 116

   51 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 131


State 117

   50 params: "(" type_params • ")"
   52 type_params: type_params • "," type_params

    ")"  shift, and go to state 132
    ","  shift, and go to state 133


State 118

   48 name_func: FUNC name_func params NEWLINE •

    $default  reduce using rule 48 (name_func)


State 119

   23 arr_int: arr_int • "," arr_int
   23        | arr_int "," arr_int •

    $default  reduce using rule 23 (arr_int)


State 120

   25 arr_fl: arr_fl • "," arr_fl
   25       | arr_fl "," arr_fl •

    $default  reduce using rule 25 (arr_fl)


State 121

   27 arr_str: arr_str • "," arr_str
   27        | arr_str "," arr_str •

    $default  reduce using rule 27 (arr_str)


State 122

   29 func: SCAN "(" scan_params ")" •

    $default  reduce using rule 29 (func)


State 123

   17 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 134


State 124

   32 func: PRINT "(" print_params ")" •

    $default  reduce using rule 32 (func)


State 125

   45 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 83
    STRING      shift, and go to state 84
    INTEGER     shift, and go to state 85
    SCAN        shift, and go to state 15
    PRINT       shift, and go to state 16
    LEN         shift, and go to state 17
    CMP         shift, and go to state 18

    pos_elem      go to state 86
    func          go to state 87
    print_params  go to state 135


State 126

   30 func: LEN "(" len_params ")" •

    $default  reduce using rule 30 (func)


State 127

   31 func: CMP "(" cmp_params ")" •

    $default  reduce using rule 31 (func)


State 128

   39 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 93
    STRING      shift, and go to state 94

    cmp_params  go to state 136


State 129

   15 var: var • "," var
   15    | var "," var •

    $default  reduce using rule 15 (var)


State 130

   53 code_func: "{" code NEWLINE • "}"

    "}"  shift, and go to state 137


State 131

   51 type_params: type IDENTIFIER •

    $default  reduce using rule 51 (type_params)


State 132

   50 params: "(" type_params ")" •

    $default  reduce using rule 50 (params)


State 133

   52 type_params: type_params "," • type_params

    DOUBLE     shift, and go to state 6
    INT        shift, and go to state 7
    LONG       shift, and go to state 9
    FLOAT_KEY  shift, and go to state 10
    SHORT      shift, and go to state 11

    type         go to state 116
    type_params  go to state 138


State 134

   17 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 139


State 135

   45 print_params: print_params • "," print_params
   45             | print_params "," print_params •

    $default  reduce using rule 45 (print_params)


State 136

   39 cmp_params: cmp_params • "," cmp_params
   39           | cmp_params "," cmp_params •

    $default  reduce using rule 39 (cmp_params)


State 137

   53 code_func: "{" code NEWLINE "}" •

    $default  reduce using rule 53 (code_func)


State 138

   52 type_params: type_params • "," type_params
   52            | type_params "," type_params •

    $default  reduce using rule 52 (type_params)


State 139

   17 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 17 (pos_elem)
