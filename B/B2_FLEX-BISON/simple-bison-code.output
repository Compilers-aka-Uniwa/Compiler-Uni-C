Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "&"
    "\\"
    UNKNOWN


State 3 conflicts: 23 reduce/reduce
State 4 conflicts: 23 reduce/reduce
State 5 conflicts: 23 reduce/reduce
State 35 conflicts: 2 shift/reduce
State 77 conflicts: 23 reduce/reduce
State 95 conflicts: 22 reduce/reduce
State 124 conflicts: 2 reduce/reduce
State 126 conflicts: 2 reduce/reduce
State 127 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_statements NEWLINE
    2        | ε

    3 decl_var: type var

    4 type: SINT
    5     | SFLOAT
    6     | SDOUBLE
    7     | SSHORT
    8     | SLONG

    9 var: IDENTIFIER
   10    | var "," var

   11 pos_elem: IDENTIFIER "[" INTEGER "]"
   12         | IDENTIFIER "[" IDENTIFIER "]"

   13 arr_elements: "[" "]"
   14             | "[" integ "]"
   15             | "[" fl "]"
   16             | "[" str "]"

   17 integ: INTEGER
   18      | integ "," integ

   19 fl: FLOAT
   20   | fl "," fl

   21 str: STRING
   22    | str "," str

   23 build_func: func

   24 func: SSCAN "(" scan_params ")"
   25     | SLEN "(" len_params ")"
   26     | SCMP "(" cmp_params ")"
   27     | SPRINT "(" print_params ")"

   28 scan_params: IDENTIFIER

   29 len_params: arr_elements
   30           | STRING
   31           | IDENTIFIER

   32 cmp_params: STRING
   33           | IDENTIFIER
   34           | cmp_params "," cmp_params

   35 print_params: STRING
   36             | IDENTIFIER
   37             | INTEGER
   38             | FLOAT
   39             | func
   40             | pos_elem
   41             | print_params "," print_params

   42 decl_func: name_func decl_statement

   43 name_func: SFUNC
   44          | name_func IDENTIFIER params NEWLINE

   45 call_func: name_func "(" print_params ")"

   46 params: "(" ")"
   47       | "(" type_params ")"

   48 type_params: type IDENTIFIER
   49            | type_params "," type_params

   50 sign: INTEGER
   51     | FLOAT
   52     | "+" sign
   53     | "-" sign

   54 arithm_expr: sign
   55            | IDENTIFIER
   56            | arithm_expr "+" arithm_expr
   57            | arithm_expr "-" arithm_expr
   58            | arithm_expr "*" arithm_expr
   59            | arithm_expr "/" arithm_expr
   60            | arithm_expr "%" arithm_expr

   61 number: INTEGER
   62       | FLOAT
   63       | pos_elem

   64 assign: var "=" val
   65       | var "=" cmp_expr
   66       | var "=" arithm_expr
   67       | var "=" merge_arr

   68 oper_eq: var "++"
   69        | var "--"
   70        | "++" var
   71        | "--" var
   72        | var "+=" number
   73        | var "-=" number
   74        | var "*=" number
   75        | var "/=" number

   76 val: number
   77    | IDENTIFIER
   78    | STRING
   79    | arr_elements
   80    | val "," val

   81 cmp_expr: INTEGER
   82         | FLOAT
   83         | IDENTIFIER
   84         | cmp_expr ">" cmp_expr
   85         | cmp_expr "<" cmp_expr
   86         | cmp_expr "<=" cmp_expr
   87         | cmp_expr ">=" cmp_expr
   88         | cmp_expr "==" cmp_expr
   89         | cmp_expr "!=" cmp_expr
   90         | cmp_expr "||" cmp_expr
   91         | cmp_expr "&&" cmp_expr
   92         | "!" cmp_expr

   93 merge_arr: arr_elements "+" arr_elements

   94 decl_statements: decl_statement
   95                | decl_statements decl_statement

   96 decl_statement: if_statement
   97               | while_statement
   98               | for_statement
   99               | decl_var ";"
  100               | build_func ";"
  101               | decl_func
  102               | call_func ";"
  103               | assign ";"
  104               | arithm_expr
  105               | cmp_expr
  106               | merge_arr
  107               | block_statement
  108               | NEWLINE

  109 if_statement: SIF condition decl_statement

  110 condition: cmp_expr
  111          | "(" condition ")"

  112 block_statement: "{" decl_statements "}"

  113 while_statement: SWHILE condition decl_statement

  114 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <sval> (258) 9 11 12 28 31 33 36 44 48 55 77 83
    STRING <sval> (259) 21 30 32 35 78
    INTEGER <ival> (260) 11 17 37 50 61 81
    FLOAT <fval> (261) 19 38 51 62 82
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 109
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 6
    SINT <sval> (268) 4
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 43
    SELSE <sval> (271)
    SLONG <sval> (272) 8
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 5
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279) 114
    SSHORT <sval> (280) 7
    SWHILE <sval> (281) 113
    "+" (282) 52 56 93
    "*=" (283) 74
    "--" (284) 69 71
    "-" (285) 53 57
    "/=" (286) 75
    "<" (287) 85
    "*" (288) 58
    "!" (289) 92
    ">" (290) 84
    "/" (291) 59
    "&&" (292) 91
    "<=" (293) 86
    "%" (294) 60
    "||" (295) 90
    ">=" (296) 87
    "=" (297) 64 65 66 67
    "==" (298) 88
    "&" (299)
    "+=" (300) 72
    "!=" (301) 89
    "-=" (302) 73
    "++" (303) 68 70
    "(" (304) 24 25 26 27 45 46 47 111 114
    ")" (305) 24 25 26 27 45 46 47 111 114
    "[" (306) 11 12 13 14 15 16
    "]" (307) 11 12 13 14 15 16
    "{" (308) 112
    "}" (309) 112
    "," (310) 10 18 20 22 34 41 49 80
    "\\" (311)
    ";" (312) 99 100 102 103 114
    SSCAN (313) 24
    SPRINT (314) 27
    SLEN (315) 25
    SCMP (316) 26
    NEWLINE (317) 1 44 108
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program <sval> (65)
        on left: 1 2
        on right: 0 1
    decl_var <sval> (66)
        on left: 3
        on right: 99
    type <sval> (67)
        on left: 4 5 6 7 8
        on right: 3 48
    var <sval> (68)
        on left: 9 10
        on right: 3 10 64 65 66 67 68 69 70 71 72 73 74 75
    pos_elem <sval> (69)
        on left: 11 12
        on right: 40 63
    arr_elements <sval> (70)
        on left: 13 14 15 16
        on right: 29 79 93
    integ <sval> (71)
        on left: 17 18
        on right: 14 18
    fl <sval> (72)
        on left: 19 20
        on right: 15 20
    str <sval> (73)
        on left: 21 22
        on right: 16 22
    build_func <sval> (74)
        on left: 23
        on right: 100
    func <sval> (75)
        on left: 24 25 26 27
        on right: 23 39
    scan_params <sval> (76)
        on left: 28
        on right: 24
    len_params <sval> (77)
        on left: 29 30 31
        on right: 25
    cmp_params <sval> (78)
        on left: 32 33 34
        on right: 26 34
    print_params <sval> (79)
        on left: 35 36 37 38 39 40 41
        on right: 27 41 45
    decl_func <sval> (80)
        on left: 42
        on right: 101
    name_func <sval> (81)
        on left: 43 44
        on right: 42 44 45
    call_func <sval> (82)
        on left: 45
        on right: 102
    params <sval> (83)
        on left: 46 47
        on right: 44
    type_params <sval> (84)
        on left: 48 49
        on right: 47 49
    sign <sval> (85)
        on left: 50 51 52 53
        on right: 52 53 54
    arithm_expr <sval> (86)
        on left: 54 55 56 57 58 59 60
        on right: 56 57 58 59 60 66 104
    number <sval> (87)
        on left: 61 62 63
        on right: 72 73 74 75 76
    assign <sval> (88)
        on left: 64 65 66 67
        on right: 103 114
    oper_eq <sval> (89)
        on left: 68 69 70 71 72 73 74 75
        on right: 114
    val <sval> (90)
        on left: 76 77 78 79 80
        on right: 64 80
    cmp_expr <sval> (91)
        on left: 81 82 83 84 85 86 87 88 89 90 91 92
        on right: 65 84 85 86 87 88 89 90 91 92 105 110 114
    merge_arr <sval> (92)
        on left: 93
        on right: 67 106
    decl_statements <sval> (93)
        on left: 94 95
        on right: 1 95 112
    decl_statement <sval> (94)
        on left: 96 97 98 99 100 101 102 103 104 105 106 107 108
        on right: 42 94 95 109 113 114
    if_statement <sval> (95)
        on left: 109
        on right: 96
    condition <sval> (96)
        on left: 110 111
        on right: 109 111 113
    block_statement <sval> (97)
        on left: 112
        on right: 107
    while_statement <sval> (98)
        on left: 113
        on right: 97
    for_statement <sval> (99)
        on left: 114
        on right: 98


State 0

    0 $accept: • program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_statements NEWLINE

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "["         shift, and go to state 18
    "{"         shift, and go to state 19
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23
    NEWLINE     shift, and go to state 24

    decl_var         go to state 25
    type             go to state 26
    var              go to state 27
    arr_elements     go to state 28
    build_func       go to state 29
    func             go to state 30
    decl_func        go to state 31
    name_func        go to state 32
    call_func        go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statements  go to state 39
    decl_statement   go to state 40
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 2

    0 $accept: program $end •

    $default  accept


State 3

    9 var: IDENTIFIER •
   55 arithm_expr: IDENTIFIER •
   83 cmp_expr: IDENTIFIER •

    IDENTIFIER  reduce using rule 55 (arithm_expr)
    IDENTIFIER  [reduce using rule 83 (cmp_expr)]
    INTEGER     reduce using rule 55 (arithm_expr)
    INTEGER     [reduce using rule 83 (cmp_expr)]
    FLOAT       reduce using rule 55 (arithm_expr)
    FLOAT       [reduce using rule 83 (cmp_expr)]
    SIF         reduce using rule 55 (arithm_expr)
    SIF         [reduce using rule 83 (cmp_expr)]
    SDOUBLE     reduce using rule 55 (arithm_expr)
    SDOUBLE     [reduce using rule 83 (cmp_expr)]
    SINT        reduce using rule 55 (arithm_expr)
    SINT        [reduce using rule 83 (cmp_expr)]
    SFUNC       reduce using rule 55 (arithm_expr)
    SFUNC       [reduce using rule 83 (cmp_expr)]
    SLONG       reduce using rule 55 (arithm_expr)
    SLONG       [reduce using rule 83 (cmp_expr)]
    SFLOAT      reduce using rule 55 (arithm_expr)
    SFLOAT      [reduce using rule 83 (cmp_expr)]
    SFOR        reduce using rule 55 (arithm_expr)
    SFOR        [reduce using rule 83 (cmp_expr)]
    SSHORT      reduce using rule 55 (arithm_expr)
    SSHORT      [reduce using rule 83 (cmp_expr)]
    SWHILE      reduce using rule 55 (arithm_expr)
    SWHILE      [reduce using rule 83 (cmp_expr)]
    "+"         reduce using rule 55 (arithm_expr)
    "+"         [reduce using rule 83 (cmp_expr)]
    "-"         reduce using rule 55 (arithm_expr)
    "-"         [reduce using rule 83 (cmp_expr)]
    "<"         reduce using rule 83 (cmp_expr)
    "!"         reduce using rule 55 (arithm_expr)
    "!"         [reduce using rule 83 (cmp_expr)]
    ">"         reduce using rule 83 (cmp_expr)
    "&&"        reduce using rule 83 (cmp_expr)
    "<="        reduce using rule 83 (cmp_expr)
    "||"        reduce using rule 83 (cmp_expr)
    ">="        reduce using rule 83 (cmp_expr)
    "="         reduce using rule 9 (var)
    "=="        reduce using rule 83 (cmp_expr)
    "!="        reduce using rule 83 (cmp_expr)
    "["         reduce using rule 55 (arithm_expr)
    "["         [reduce using rule 83 (cmp_expr)]
    "{"         reduce using rule 55 (arithm_expr)
    "{"         [reduce using rule 83 (cmp_expr)]
    "}"         reduce using rule 55 (arithm_expr)
    "}"         [reduce using rule 83 (cmp_expr)]
    ","         reduce using rule 9 (var)
    SSCAN       reduce using rule 55 (arithm_expr)
    SSCAN       [reduce using rule 83 (cmp_expr)]
    SPRINT      reduce using rule 55 (arithm_expr)
    SPRINT      [reduce using rule 83 (cmp_expr)]
    SLEN        reduce using rule 55 (arithm_expr)
    SLEN        [reduce using rule 83 (cmp_expr)]
    SCMP        reduce using rule 55 (arithm_expr)
    SCMP        [reduce using rule 83 (cmp_expr)]
    NEWLINE     reduce using rule 55 (arithm_expr)
    NEWLINE     [reduce using rule 83 (cmp_expr)]
    $default    reduce using rule 55 (arithm_expr)


State 4

   50 sign: INTEGER •
   81 cmp_expr: INTEGER •

    IDENTIFIER  reduce using rule 50 (sign)
    IDENTIFIER  [reduce using rule 81 (cmp_expr)]
    INTEGER     reduce using rule 50 (sign)
    INTEGER     [reduce using rule 81 (cmp_expr)]
    FLOAT       reduce using rule 50 (sign)
    FLOAT       [reduce using rule 81 (cmp_expr)]
    SIF         reduce using rule 50 (sign)
    SIF         [reduce using rule 81 (cmp_expr)]
    SDOUBLE     reduce using rule 50 (sign)
    SDOUBLE     [reduce using rule 81 (cmp_expr)]
    SINT        reduce using rule 50 (sign)
    SINT        [reduce using rule 81 (cmp_expr)]
    SFUNC       reduce using rule 50 (sign)
    SFUNC       [reduce using rule 81 (cmp_expr)]
    SLONG       reduce using rule 50 (sign)
    SLONG       [reduce using rule 81 (cmp_expr)]
    SFLOAT      reduce using rule 50 (sign)
    SFLOAT      [reduce using rule 81 (cmp_expr)]
    SFOR        reduce using rule 50 (sign)
    SFOR        [reduce using rule 81 (cmp_expr)]
    SSHORT      reduce using rule 50 (sign)
    SSHORT      [reduce using rule 81 (cmp_expr)]
    SWHILE      reduce using rule 50 (sign)
    SWHILE      [reduce using rule 81 (cmp_expr)]
    "+"         reduce using rule 50 (sign)
    "+"         [reduce using rule 81 (cmp_expr)]
    "-"         reduce using rule 50 (sign)
    "-"         [reduce using rule 81 (cmp_expr)]
    "<"         reduce using rule 81 (cmp_expr)
    "!"         reduce using rule 50 (sign)
    "!"         [reduce using rule 81 (cmp_expr)]
    ">"         reduce using rule 81 (cmp_expr)
    "&&"        reduce using rule 81 (cmp_expr)
    "<="        reduce using rule 81 (cmp_expr)
    "||"        reduce using rule 81 (cmp_expr)
    ">="        reduce using rule 81 (cmp_expr)
    "=="        reduce using rule 81 (cmp_expr)
    "!="        reduce using rule 81 (cmp_expr)
    "["         reduce using rule 50 (sign)
    "["         [reduce using rule 81 (cmp_expr)]
    "{"         reduce using rule 50 (sign)
    "{"         [reduce using rule 81 (cmp_expr)]
    "}"         reduce using rule 50 (sign)
    "}"         [reduce using rule 81 (cmp_expr)]
    SSCAN       reduce using rule 50 (sign)
    SSCAN       [reduce using rule 81 (cmp_expr)]
    SPRINT      reduce using rule 50 (sign)
    SPRINT      [reduce using rule 81 (cmp_expr)]
    SLEN        reduce using rule 50 (sign)
    SLEN        [reduce using rule 81 (cmp_expr)]
    SCMP        reduce using rule 50 (sign)
    SCMP        [reduce using rule 81 (cmp_expr)]
    NEWLINE     reduce using rule 50 (sign)
    NEWLINE     [reduce using rule 81 (cmp_expr)]
    $default    reduce using rule 50 (sign)


State 5

   51 sign: FLOAT •
   82 cmp_expr: FLOAT •

    IDENTIFIER  reduce using rule 51 (sign)
    IDENTIFIER  [reduce using rule 82 (cmp_expr)]
    INTEGER     reduce using rule 51 (sign)
    INTEGER     [reduce using rule 82 (cmp_expr)]
    FLOAT       reduce using rule 51 (sign)
    FLOAT       [reduce using rule 82 (cmp_expr)]
    SIF         reduce using rule 51 (sign)
    SIF         [reduce using rule 82 (cmp_expr)]
    SDOUBLE     reduce using rule 51 (sign)
    SDOUBLE     [reduce using rule 82 (cmp_expr)]
    SINT        reduce using rule 51 (sign)
    SINT        [reduce using rule 82 (cmp_expr)]
    SFUNC       reduce using rule 51 (sign)
    SFUNC       [reduce using rule 82 (cmp_expr)]
    SLONG       reduce using rule 51 (sign)
    SLONG       [reduce using rule 82 (cmp_expr)]
    SFLOAT      reduce using rule 51 (sign)
    SFLOAT      [reduce using rule 82 (cmp_expr)]
    SFOR        reduce using rule 51 (sign)
    SFOR        [reduce using rule 82 (cmp_expr)]
    SSHORT      reduce using rule 51 (sign)
    SSHORT      [reduce using rule 82 (cmp_expr)]
    SWHILE      reduce using rule 51 (sign)
    SWHILE      [reduce using rule 82 (cmp_expr)]
    "+"         reduce using rule 51 (sign)
    "+"         [reduce using rule 82 (cmp_expr)]
    "-"         reduce using rule 51 (sign)
    "-"         [reduce using rule 82 (cmp_expr)]
    "<"         reduce using rule 82 (cmp_expr)
    "!"         reduce using rule 51 (sign)
    "!"         [reduce using rule 82 (cmp_expr)]
    ">"         reduce using rule 82 (cmp_expr)
    "&&"        reduce using rule 82 (cmp_expr)
    "<="        reduce using rule 82 (cmp_expr)
    "||"        reduce using rule 82 (cmp_expr)
    ">="        reduce using rule 82 (cmp_expr)
    "=="        reduce using rule 82 (cmp_expr)
    "!="        reduce using rule 82 (cmp_expr)
    "["         reduce using rule 51 (sign)
    "["         [reduce using rule 82 (cmp_expr)]
    "{"         reduce using rule 51 (sign)
    "{"         [reduce using rule 82 (cmp_expr)]
    "}"         reduce using rule 51 (sign)
    "}"         [reduce using rule 82 (cmp_expr)]
    SSCAN       reduce using rule 51 (sign)
    SSCAN       [reduce using rule 82 (cmp_expr)]
    SPRINT      reduce using rule 51 (sign)
    SPRINT      [reduce using rule 82 (cmp_expr)]
    SLEN        reduce using rule 51 (sign)
    SLEN        [reduce using rule 82 (cmp_expr)]
    SCMP        reduce using rule 51 (sign)
    SCMP        [reduce using rule 82 (cmp_expr)]
    NEWLINE     reduce using rule 51 (sign)
    NEWLINE     [reduce using rule 82 (cmp_expr)]
    $default    reduce using rule 51 (sign)


State 6

  109 if_statement: SIF • condition decl_statement

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17
    "("         shift, and go to state 48

    cmp_expr   go to state 49
    condition  go to state 50


State 7

    6 type: SDOUBLE •

    $default  reduce using rule 6 (type)


State 8

    4 type: SINT •

    $default  reduce using rule 4 (type)


State 9

   43 name_func: SFUNC •

    $default  reduce using rule 43 (name_func)


State 10

    8 type: SLONG •

    $default  reduce using rule 8 (type)


State 11

    5 type: SFLOAT •

    $default  reduce using rule 5 (type)


State 12

  114 for_statement: SFOR • "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement

    "("  shift, and go to state 51


State 13

    7 type: SSHORT •

    $default  reduce using rule 7 (type)


State 14

  113 while_statement: SWHILE • condition decl_statement

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17
    "("         shift, and go to state 48

    cmp_expr   go to state 49
    condition  go to state 52


State 15

   52 sign: "+" • sign

    INTEGER  shift, and go to state 53
    FLOAT    shift, and go to state 54
    "+"      shift, and go to state 15
    "-"      shift, and go to state 16

    sign  go to state 55


State 16

   53 sign: "-" • sign

    INTEGER  shift, and go to state 53
    FLOAT    shift, and go to state 54
    "+"      shift, and go to state 15
    "-"      shift, and go to state 16

    sign  go to state 56


State 17

   92 cmp_expr: "!" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 57


State 18

   13 arr_elements: "[" • "]"
   14             | "[" • integ "]"
   15             | "[" • fl "]"
   16             | "[" • str "]"

    STRING   shift, and go to state 58
    INTEGER  shift, and go to state 59
    FLOAT    shift, and go to state 60
    "]"      shift, and go to state 61

    integ  go to state 62
    fl     go to state 63
    str    go to state 64


State 19

  112 block_statement: "{" • decl_statements "}"

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "["         shift, and go to state 18
    "{"         shift, and go to state 19
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23
    NEWLINE     shift, and go to state 24

    decl_var         go to state 25
    type             go to state 26
    var              go to state 27
    arr_elements     go to state 28
    build_func       go to state 29
    func             go to state 30
    decl_func        go to state 31
    name_func        go to state 32
    call_func        go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statements  go to state 65
    decl_statement   go to state 40
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 20

   24 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 66


State 21

   27 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 67


State 22

   25 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 68


State 23

   26 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 69


State 24

  108 decl_statement: NEWLINE •

    $default  reduce using rule 108 (decl_statement)


State 25

   99 decl_statement: decl_var • ";"

    ";"  shift, and go to state 70


State 26

    3 decl_var: type • var

    IDENTIFIER  shift, and go to state 71

    var  go to state 72


State 27

   10 var: var • "," var
   64 assign: var • "=" val
   65       | var • "=" cmp_expr
   66       | var • "=" arithm_expr
   67       | var • "=" merge_arr

    "="  shift, and go to state 73
    ","  shift, and go to state 74


State 28

   93 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 75


State 29

  100 decl_statement: build_func • ";"

    ";"  shift, and go to state 76


State 30

   23 build_func: func •

    $default  reduce using rule 23 (build_func)


State 31

  101 decl_statement: decl_func •

    $default  reduce using rule 101 (decl_statement)


State 32

   42 decl_func: name_func • decl_statement
   44 name_func: name_func • IDENTIFIER params NEWLINE
   45 call_func: name_func • "(" print_params ")"

    IDENTIFIER  shift, and go to state 77
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "("         shift, and go to state 78
    "["         shift, and go to state 18
    "{"         shift, and go to state 19
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23
    NEWLINE     shift, and go to state 24

    decl_var         go to state 25
    type             go to state 26
    var              go to state 27
    arr_elements     go to state 28
    build_func       go to state 29
    func             go to state 30
    decl_func        go to state 31
    name_func        go to state 32
    call_func        go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 79
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 33

  102 decl_statement: call_func • ";"

    ";"  shift, and go to state 80


State 34

   54 arithm_expr: sign •

    $default  reduce using rule 54 (arithm_expr)


State 35

   56 arithm_expr: arithm_expr • "+" arithm_expr
   57            | arithm_expr • "-" arithm_expr
   58            | arithm_expr • "*" arithm_expr
   59            | arithm_expr • "/" arithm_expr
   60            | arithm_expr • "%" arithm_expr
  104 decl_statement: arithm_expr •

    "+"  shift, and go to state 81
    "-"  shift, and go to state 82
    "*"  shift, and go to state 83
    "/"  shift, and go to state 84
    "%"  shift, and go to state 85

    "+"       [reduce using rule 104 (decl_statement)]
    "-"       [reduce using rule 104 (decl_statement)]
    $default  reduce using rule 104 (decl_statement)


State 36

  103 decl_statement: assign • ";"

    ";"  shift, and go to state 86


State 37

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr
  105 decl_statement: cmp_expr •

    "<"   shift, and go to state 87
    ">"   shift, and go to state 88
    "&&"  shift, and go to state 89
    "<="  shift, and go to state 90
    "||"  shift, and go to state 91
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94

    $default  reduce using rule 105 (decl_statement)


State 38

  106 decl_statement: merge_arr •

    $default  reduce using rule 106 (decl_statement)


State 39

    1 program: program decl_statements • NEWLINE
   95 decl_statements: decl_statements • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "["         shift, and go to state 18
    "{"         shift, and go to state 19
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23
    NEWLINE     shift, and go to state 95

    decl_var         go to state 25
    type             go to state 26
    var              go to state 27
    arr_elements     go to state 28
    build_func       go to state 29
    func             go to state 30
    decl_func        go to state 31
    name_func        go to state 32
    call_func        go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 96
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 40

   94 decl_statements: decl_statement •

    $default  reduce using rule 94 (decl_statements)


State 41

   96 decl_statement: if_statement •

    $default  reduce using rule 96 (decl_statement)


State 42

  107 decl_statement: block_statement •

    $default  reduce using rule 107 (decl_statement)


State 43

   97 decl_statement: while_statement •

    $default  reduce using rule 97 (decl_statement)


State 44

   98 decl_statement: for_statement •

    $default  reduce using rule 98 (decl_statement)


State 45

   83 cmp_expr: IDENTIFIER •

    $default  reduce using rule 83 (cmp_expr)


State 46

   81 cmp_expr: INTEGER •

    $default  reduce using rule 81 (cmp_expr)


State 47

   82 cmp_expr: FLOAT •

    $default  reduce using rule 82 (cmp_expr)


State 48

  111 condition: "(" • condition ")"

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17
    "("         shift, and go to state 48

    cmp_expr   go to state 49
    condition  go to state 97


State 49

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr
  110 condition: cmp_expr •

    "<"   shift, and go to state 87
    ">"   shift, and go to state 88
    "&&"  shift, and go to state 89
    "<="  shift, and go to state 90
    "||"  shift, and go to state 91
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94

    $default  reduce using rule 110 (condition)


State 50

  109 if_statement: SIF condition • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "["         shift, and go to state 18
    "{"         shift, and go to state 19
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23
    NEWLINE     shift, and go to state 24

    decl_var         go to state 25
    type             go to state 26
    var              go to state 27
    arr_elements     go to state 28
    build_func       go to state 29
    func             go to state 30
    decl_func        go to state 31
    name_func        go to state 32
    call_func        go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 98
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 51

  114 for_statement: SFOR "(" • assign ";" cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 71

    var     go to state 27
    assign  go to state 99


State 52

  113 while_statement: SWHILE condition • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "["         shift, and go to state 18
    "{"         shift, and go to state 19
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23
    NEWLINE     shift, and go to state 24

    decl_var         go to state 25
    type             go to state 26
    var              go to state 27
    arr_elements     go to state 28
    build_func       go to state 29
    func             go to state 30
    decl_func        go to state 31
    name_func        go to state 32
    call_func        go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 100
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 53

   50 sign: INTEGER •

    $default  reduce using rule 50 (sign)


State 54

   51 sign: FLOAT •

    $default  reduce using rule 51 (sign)


State 55

   52 sign: "+" sign •

    $default  reduce using rule 52 (sign)


State 56

   53 sign: "-" sign •

    $default  reduce using rule 53 (sign)


State 57

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr
   92         | "!" cmp_expr •

    $default  reduce using rule 92 (cmp_expr)


State 58

   21 str: STRING •

    $default  reduce using rule 21 (str)


State 59

   17 integ: INTEGER •

    $default  reduce using rule 17 (integ)


State 60

   19 fl: FLOAT •

    $default  reduce using rule 19 (fl)


State 61

   13 arr_elements: "[" "]" •

    $default  reduce using rule 13 (arr_elements)


State 62

   14 arr_elements: "[" integ • "]"
   18 integ: integ • "," integ

    "]"  shift, and go to state 101
    ","  shift, and go to state 102


State 63

   15 arr_elements: "[" fl • "]"
   20 fl: fl • "," fl

    "]"  shift, and go to state 103
    ","  shift, and go to state 104


State 64

   16 arr_elements: "[" str • "]"
   22 str: str • "," str

    "]"  shift, and go to state 105
    ","  shift, and go to state 106


State 65

   95 decl_statements: decl_statements • decl_statement
  112 block_statement: "{" decl_statements • "}"

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "["         shift, and go to state 18
    "{"         shift, and go to state 19
    "}"         shift, and go to state 107
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23
    NEWLINE     shift, and go to state 24

    decl_var         go to state 25
    type             go to state 26
    var              go to state 27
    arr_elements     go to state 28
    build_func       go to state 29
    func             go to state 30
    decl_func        go to state 31
    name_func        go to state 32
    call_func        go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 96
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 66

   24 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 108

    scan_params  go to state 109


State 67

   27 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 110
    STRING      shift, and go to state 111
    INTEGER     shift, and go to state 112
    FLOAT       shift, and go to state 113
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23

    pos_elem      go to state 114
    func          go to state 115
    print_params  go to state 116


State 68

   25 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 117
    STRING      shift, and go to state 118
    "["         shift, and go to state 18

    arr_elements  go to state 119
    len_params    go to state 120


State 69

   26 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 121
    STRING      shift, and go to state 122

    cmp_params  go to state 123


State 70

   99 decl_statement: decl_var ";" •

    $default  reduce using rule 99 (decl_statement)


State 71

    9 var: IDENTIFIER •

    $default  reduce using rule 9 (var)


State 72

    3 decl_var: type var •
   10 var: var • "," var

    ","  shift, and go to state 74

    $default  reduce using rule 3 (decl_var)


State 73

   64 assign: var "=" • val
   65       | var "=" • cmp_expr
   66       | var "=" • arithm_expr
   67       | var "=" • merge_arr

    IDENTIFIER  shift, and go to state 124
    STRING      shift, and go to state 125
    INTEGER     shift, and go to state 126
    FLOAT       shift, and go to state 127
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "["         shift, and go to state 18

    pos_elem      go to state 128
    arr_elements  go to state 129
    sign          go to state 34
    arithm_expr   go to state 130
    number        go to state 131
    val           go to state 132
    cmp_expr      go to state 133
    merge_arr     go to state 134


State 74

   10 var: var "," • var

    IDENTIFIER  shift, and go to state 71

    var  go to state 135


State 75

   93 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 18

    arr_elements  go to state 136


State 76

  100 decl_statement: build_func ";" •

    $default  reduce using rule 100 (decl_statement)


State 77

    9 var: IDENTIFIER •
   44 name_func: name_func IDENTIFIER • params NEWLINE
   55 arithm_expr: IDENTIFIER •
   83 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 137

    IDENTIFIER  reduce using rule 55 (arithm_expr)
    IDENTIFIER  [reduce using rule 83 (cmp_expr)]
    INTEGER     reduce using rule 55 (arithm_expr)
    INTEGER     [reduce using rule 83 (cmp_expr)]
    FLOAT       reduce using rule 55 (arithm_expr)
    FLOAT       [reduce using rule 83 (cmp_expr)]
    SIF         reduce using rule 55 (arithm_expr)
    SIF         [reduce using rule 83 (cmp_expr)]
    SDOUBLE     reduce using rule 55 (arithm_expr)
    SDOUBLE     [reduce using rule 83 (cmp_expr)]
    SINT        reduce using rule 55 (arithm_expr)
    SINT        [reduce using rule 83 (cmp_expr)]
    SFUNC       reduce using rule 55 (arithm_expr)
    SFUNC       [reduce using rule 83 (cmp_expr)]
    SLONG       reduce using rule 55 (arithm_expr)
    SLONG       [reduce using rule 83 (cmp_expr)]
    SFLOAT      reduce using rule 55 (arithm_expr)
    SFLOAT      [reduce using rule 83 (cmp_expr)]
    SFOR        reduce using rule 55 (arithm_expr)
    SFOR        [reduce using rule 83 (cmp_expr)]
    SSHORT      reduce using rule 55 (arithm_expr)
    SSHORT      [reduce using rule 83 (cmp_expr)]
    SWHILE      reduce using rule 55 (arithm_expr)
    SWHILE      [reduce using rule 83 (cmp_expr)]
    "+"         reduce using rule 55 (arithm_expr)
    "+"         [reduce using rule 83 (cmp_expr)]
    "-"         reduce using rule 55 (arithm_expr)
    "-"         [reduce using rule 83 (cmp_expr)]
    "<"         reduce using rule 83 (cmp_expr)
    "!"         reduce using rule 55 (arithm_expr)
    "!"         [reduce using rule 83 (cmp_expr)]
    ">"         reduce using rule 83 (cmp_expr)
    "&&"        reduce using rule 83 (cmp_expr)
    "<="        reduce using rule 83 (cmp_expr)
    "||"        reduce using rule 83 (cmp_expr)
    ">="        reduce using rule 83 (cmp_expr)
    "="         reduce using rule 9 (var)
    "=="        reduce using rule 83 (cmp_expr)
    "!="        reduce using rule 83 (cmp_expr)
    "["         reduce using rule 55 (arithm_expr)
    "["         [reduce using rule 83 (cmp_expr)]
    "{"         reduce using rule 55 (arithm_expr)
    "{"         [reduce using rule 83 (cmp_expr)]
    "}"         reduce using rule 55 (arithm_expr)
    "}"         [reduce using rule 83 (cmp_expr)]
    ","         reduce using rule 9 (var)
    SSCAN       reduce using rule 55 (arithm_expr)
    SSCAN       [reduce using rule 83 (cmp_expr)]
    SPRINT      reduce using rule 55 (arithm_expr)
    SPRINT      [reduce using rule 83 (cmp_expr)]
    SLEN        reduce using rule 55 (arithm_expr)
    SLEN        [reduce using rule 83 (cmp_expr)]
    SCMP        reduce using rule 55 (arithm_expr)
    SCMP        [reduce using rule 83 (cmp_expr)]
    NEWLINE     reduce using rule 55 (arithm_expr)
    NEWLINE     [reduce using rule 83 (cmp_expr)]
    $default    reduce using rule 55 (arithm_expr)

    params  go to state 138


State 78

   45 call_func: name_func "(" • print_params ")"

    IDENTIFIER  shift, and go to state 110
    STRING      shift, and go to state 111
    INTEGER     shift, and go to state 112
    FLOAT       shift, and go to state 113
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23

    pos_elem      go to state 114
    func          go to state 115
    print_params  go to state 139


State 79

   42 decl_func: name_func decl_statement •

    $default  reduce using rule 42 (decl_func)


State 80

  102 decl_statement: call_func ";" •

    $default  reduce using rule 102 (decl_statement)


State 81

   56 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 140
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 141


State 82

   57 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 140
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 142


State 83

   58 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 140
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 143


State 84

   59 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 140
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 144


State 85

   60 arithm_expr: arithm_expr "%" • arithm_expr

    IDENTIFIER  shift, and go to state 140
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 34
    arithm_expr  go to state 145


State 86

  103 decl_statement: assign ";" •

    $default  reduce using rule 103 (decl_statement)


State 87

   85 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 146


State 88

   84 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 147


State 89

   91 cmp_expr: cmp_expr "&&" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 148


State 90

   86 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 149


State 91

   90 cmp_expr: cmp_expr "||" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 150


State 92

   87 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 151


State 93

   88 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 152


State 94

   89 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 153


State 95

    1 program: program decl_statements NEWLINE •
  108 decl_statement: NEWLINE •

    IDENTIFIER  reduce using rule 1 (program)
    IDENTIFIER  [reduce using rule 108 (decl_statement)]
    INTEGER     reduce using rule 1 (program)
    INTEGER     [reduce using rule 108 (decl_statement)]
    FLOAT       reduce using rule 1 (program)
    FLOAT       [reduce using rule 108 (decl_statement)]
    SIF         reduce using rule 1 (program)
    SIF         [reduce using rule 108 (decl_statement)]
    SDOUBLE     reduce using rule 1 (program)
    SDOUBLE     [reduce using rule 108 (decl_statement)]
    SINT        reduce using rule 1 (program)
    SINT        [reduce using rule 108 (decl_statement)]
    SFUNC       reduce using rule 1 (program)
    SFUNC       [reduce using rule 108 (decl_statement)]
    SLONG       reduce using rule 1 (program)
    SLONG       [reduce using rule 108 (decl_statement)]
    SFLOAT      reduce using rule 1 (program)
    SFLOAT      [reduce using rule 108 (decl_statement)]
    SFOR        reduce using rule 1 (program)
    SFOR        [reduce using rule 108 (decl_statement)]
    SSHORT      reduce using rule 1 (program)
    SSHORT      [reduce using rule 108 (decl_statement)]
    SWHILE      reduce using rule 1 (program)
    SWHILE      [reduce using rule 108 (decl_statement)]
    "+"         reduce using rule 1 (program)
    "+"         [reduce using rule 108 (decl_statement)]
    "-"         reduce using rule 1 (program)
    "-"         [reduce using rule 108 (decl_statement)]
    "!"         reduce using rule 1 (program)
    "!"         [reduce using rule 108 (decl_statement)]
    "["         reduce using rule 1 (program)
    "["         [reduce using rule 108 (decl_statement)]
    "{"         reduce using rule 1 (program)
    "{"         [reduce using rule 108 (decl_statement)]
    SSCAN       reduce using rule 1 (program)
    SSCAN       [reduce using rule 108 (decl_statement)]
    SPRINT      reduce using rule 1 (program)
    SPRINT      [reduce using rule 108 (decl_statement)]
    SLEN        reduce using rule 1 (program)
    SLEN        [reduce using rule 108 (decl_statement)]
    SCMP        reduce using rule 1 (program)
    SCMP        [reduce using rule 108 (decl_statement)]
    NEWLINE     reduce using rule 1 (program)
    NEWLINE     [reduce using rule 108 (decl_statement)]
    $default    reduce using rule 1 (program)


State 96

   95 decl_statements: decl_statements decl_statement •

    $default  reduce using rule 95 (decl_statements)


State 97

  111 condition: "(" condition • ")"

    ")"  shift, and go to state 154


State 98

  109 if_statement: SIF condition decl_statement •

    $default  reduce using rule 109 (if_statement)


State 99

  114 for_statement: SFOR "(" assign • ";" cmp_expr ";" oper_eq ")" decl_statement

    ";"  shift, and go to state 155


State 100

  113 while_statement: SWHILE condition decl_statement •

    $default  reduce using rule 113 (while_statement)


State 101

   14 arr_elements: "[" integ "]" •

    $default  reduce using rule 14 (arr_elements)


State 102

   18 integ: integ "," • integ

    INTEGER  shift, and go to state 59

    integ  go to state 156


State 103

   15 arr_elements: "[" fl "]" •

    $default  reduce using rule 15 (arr_elements)


State 104

   20 fl: fl "," • fl

    FLOAT  shift, and go to state 60

    fl  go to state 157


State 105

   16 arr_elements: "[" str "]" •

    $default  reduce using rule 16 (arr_elements)


State 106

   22 str: str "," • str

    STRING  shift, and go to state 58

    str  go to state 158


State 107

  112 block_statement: "{" decl_statements "}" •

    $default  reduce using rule 112 (block_statement)


State 108

   28 scan_params: IDENTIFIER •

    $default  reduce using rule 28 (scan_params)


State 109

   24 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 159


State 110

   11 pos_elem: IDENTIFIER • "[" INTEGER "]"
   12         | IDENTIFIER • "[" IDENTIFIER "]"
   36 print_params: IDENTIFIER •

    "["  shift, and go to state 160

    $default  reduce using rule 36 (print_params)


State 111

   35 print_params: STRING •

    $default  reduce using rule 35 (print_params)


State 112

   37 print_params: INTEGER •

    $default  reduce using rule 37 (print_params)


State 113

   38 print_params: FLOAT •

    $default  reduce using rule 38 (print_params)


State 114

   40 print_params: pos_elem •

    $default  reduce using rule 40 (print_params)


State 115

   39 print_params: func •

    $default  reduce using rule 39 (print_params)


State 116

   27 func: SPRINT "(" print_params • ")"
   41 print_params: print_params • "," print_params

    ")"  shift, and go to state 161
    ","  shift, and go to state 162


State 117

   31 len_params: IDENTIFIER •

    $default  reduce using rule 31 (len_params)


State 118

   30 len_params: STRING •

    $default  reduce using rule 30 (len_params)


State 119

   29 len_params: arr_elements •

    $default  reduce using rule 29 (len_params)


State 120

   25 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 163


State 121

   33 cmp_params: IDENTIFIER •

    $default  reduce using rule 33 (cmp_params)


State 122

   32 cmp_params: STRING •

    $default  reduce using rule 32 (cmp_params)


State 123

   26 func: SCMP "(" cmp_params • ")"
   34 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 164
    ","  shift, and go to state 165


State 124

   11 pos_elem: IDENTIFIER • "[" INTEGER "]"
   12         | IDENTIFIER • "[" IDENTIFIER "]"
   55 arithm_expr: IDENTIFIER •
   77 val: IDENTIFIER •
   83 cmp_expr: IDENTIFIER •

    "["  shift, and go to state 160

    "+"       reduce using rule 55 (arithm_expr)
    "-"       reduce using rule 55 (arithm_expr)
    "*"       reduce using rule 55 (arithm_expr)
    "/"       reduce using rule 55 (arithm_expr)
    "%"       reduce using rule 55 (arithm_expr)
    ","       reduce using rule 77 (val)
    ";"       reduce using rule 55 (arithm_expr)
    ";"       [reduce using rule 77 (val)]
    ";"       [reduce using rule 83 (cmp_expr)]
    $default  reduce using rule 83 (cmp_expr)


State 125

   78 val: STRING •

    $default  reduce using rule 78 (val)


State 126

   50 sign: INTEGER •
   61 number: INTEGER •
   81 cmp_expr: INTEGER •

    "+"       reduce using rule 50 (sign)
    "-"       reduce using rule 50 (sign)
    "*"       reduce using rule 50 (sign)
    "/"       reduce using rule 50 (sign)
    "%"       reduce using rule 50 (sign)
    ","       reduce using rule 61 (number)
    ";"       reduce using rule 50 (sign)
    ";"       [reduce using rule 61 (number)]
    ";"       [reduce using rule 81 (cmp_expr)]
    $default  reduce using rule 81 (cmp_expr)


State 127

   51 sign: FLOAT •
   62 number: FLOAT •
   82 cmp_expr: FLOAT •

    "+"       reduce using rule 51 (sign)
    "-"       reduce using rule 51 (sign)
    "*"       reduce using rule 51 (sign)
    "/"       reduce using rule 51 (sign)
    "%"       reduce using rule 51 (sign)
    ","       reduce using rule 62 (number)
    ";"       reduce using rule 51 (sign)
    ";"       [reduce using rule 62 (number)]
    ";"       [reduce using rule 82 (cmp_expr)]
    $default  reduce using rule 82 (cmp_expr)


State 128

   63 number: pos_elem •

    $default  reduce using rule 63 (number)


State 129

   79 val: arr_elements •
   93 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 75

    $default  reduce using rule 79 (val)


State 130

   56 arithm_expr: arithm_expr • "+" arithm_expr
   57            | arithm_expr • "-" arithm_expr
   58            | arithm_expr • "*" arithm_expr
   59            | arithm_expr • "/" arithm_expr
   60            | arithm_expr • "%" arithm_expr
   66 assign: var "=" arithm_expr •

    "+"  shift, and go to state 81
    "-"  shift, and go to state 82
    "*"  shift, and go to state 83
    "/"  shift, and go to state 84
    "%"  shift, and go to state 85

    $default  reduce using rule 66 (assign)


State 131

   76 val: number •

    $default  reduce using rule 76 (val)


State 132

   64 assign: var "=" val •
   80 val: val • "," val

    ","  shift, and go to state 166

    $default  reduce using rule 64 (assign)


State 133

   65 assign: var "=" cmp_expr •
   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 87
    ">"   shift, and go to state 88
    "&&"  shift, and go to state 89
    "<="  shift, and go to state 90
    "||"  shift, and go to state 91
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94

    $default  reduce using rule 65 (assign)


State 134

   67 assign: var "=" merge_arr •

    $default  reduce using rule 67 (assign)


State 135

   10 var: var • "," var
   10    | var "," var •

    $default  reduce using rule 10 (var)


State 136

   93 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 93 (merge_arr)


State 137

   46 params: "(" • ")"
   47       | "(" • type_params ")"

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 13
    ")"      shift, and go to state 167

    type         go to state 168
    type_params  go to state 169


State 138

   44 name_func: name_func IDENTIFIER params • NEWLINE

    NEWLINE  shift, and go to state 170


State 139

   41 print_params: print_params • "," print_params
   45 call_func: name_func "(" print_params • ")"

    ")"  shift, and go to state 171
    ","  shift, and go to state 162


State 140

   55 arithm_expr: IDENTIFIER •

    $default  reduce using rule 55 (arithm_expr)


State 141

   56 arithm_expr: arithm_expr • "+" arithm_expr
   56            | arithm_expr "+" arithm_expr •
   57            | arithm_expr • "-" arithm_expr
   58            | arithm_expr • "*" arithm_expr
   59            | arithm_expr • "/" arithm_expr
   60            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 83
    "/"  shift, and go to state 84
    "%"  shift, and go to state 85

    $default  reduce using rule 56 (arithm_expr)


State 142

   56 arithm_expr: arithm_expr • "+" arithm_expr
   57            | arithm_expr • "-" arithm_expr
   57            | arithm_expr "-" arithm_expr •
   58            | arithm_expr • "*" arithm_expr
   59            | arithm_expr • "/" arithm_expr
   60            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 83
    "/"  shift, and go to state 84
    "%"  shift, and go to state 85

    $default  reduce using rule 57 (arithm_expr)


State 143

   56 arithm_expr: arithm_expr • "+" arithm_expr
   57            | arithm_expr • "-" arithm_expr
   58            | arithm_expr • "*" arithm_expr
   58            | arithm_expr "*" arithm_expr •
   59            | arithm_expr • "/" arithm_expr
   60            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 58 (arithm_expr)


State 144

   56 arithm_expr: arithm_expr • "+" arithm_expr
   57            | arithm_expr • "-" arithm_expr
   58            | arithm_expr • "*" arithm_expr
   59            | arithm_expr • "/" arithm_expr
   59            | arithm_expr "/" arithm_expr •
   60            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 59 (arithm_expr)


State 145

   56 arithm_expr: arithm_expr • "+" arithm_expr
   57            | arithm_expr • "-" arithm_expr
   58            | arithm_expr • "*" arithm_expr
   59            | arithm_expr • "/" arithm_expr
   60            | arithm_expr • "%" arithm_expr
   60            | arithm_expr "%" arithm_expr •

    $default  reduce using rule 60 (arithm_expr)


State 146

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   85         | cmp_expr "<" cmp_expr •
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 85 (cmp_expr)


State 147

   84 cmp_expr: cmp_expr • ">" cmp_expr
   84         | cmp_expr ">" cmp_expr •
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 84 (cmp_expr)


State 148

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr
   91         | cmp_expr "&&" cmp_expr •

    "<"   shift, and go to state 87
    ">"   shift, and go to state 88
    "<="  shift, and go to state 90
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94

    $default  reduce using rule 91 (cmp_expr)


State 149

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   86         | cmp_expr "<=" cmp_expr •
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 86 (cmp_expr)


State 150

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   90         | cmp_expr "||" cmp_expr •
   91         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 87
    ">"   shift, and go to state 88
    "&&"  shift, and go to state 89
    "<="  shift, and go to state 90
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94

    $default  reduce using rule 90 (cmp_expr)


State 151

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   87         | cmp_expr ">=" cmp_expr •
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 87 (cmp_expr)


State 152

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   88         | cmp_expr "==" cmp_expr •
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 87
    ">"   shift, and go to state 88
    "<="  shift, and go to state 90
    ">="  shift, and go to state 92

    $default  reduce using rule 88 (cmp_expr)


State 153

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   89         | cmp_expr "!=" cmp_expr •
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 87
    ">"   shift, and go to state 88
    "<="  shift, and go to state 90
    ">="  shift, and go to state 92

    $default  reduce using rule 89 (cmp_expr)


State 154

  111 condition: "(" condition ")" •

    $default  reduce using rule 111 (condition)


State 155

  114 for_statement: SFOR "(" assign ";" • cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOAT       shift, and go to state 47
    "!"         shift, and go to state 17

    cmp_expr  go to state 172


State 156

   18 integ: integ • "," integ
   18      | integ "," integ •

    $default  reduce using rule 18 (integ)


State 157

   20 fl: fl • "," fl
   20   | fl "," fl •

    $default  reduce using rule 20 (fl)


State 158

   22 str: str • "," str
   22    | str "," str •

    $default  reduce using rule 22 (str)


State 159

   24 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 24 (func)


State 160

   11 pos_elem: IDENTIFIER "[" • INTEGER "]"
   12         | IDENTIFIER "[" • IDENTIFIER "]"

    IDENTIFIER  shift, and go to state 173
    INTEGER     shift, and go to state 174


State 161

   27 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 27 (func)


State 162

   41 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 110
    STRING      shift, and go to state 111
    INTEGER     shift, and go to state 112
    FLOAT       shift, and go to state 113
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23

    pos_elem      go to state 114
    func          go to state 115
    print_params  go to state 175


State 163

   25 func: SLEN "(" len_params ")" •

    $default  reduce using rule 25 (func)


State 164

   26 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 26 (func)


State 165

   34 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 121
    STRING      shift, and go to state 122

    cmp_params  go to state 176


State 166

   80 val: val "," • val

    IDENTIFIER  shift, and go to state 177
    STRING      shift, and go to state 125
    INTEGER     shift, and go to state 178
    FLOAT       shift, and go to state 179
    "["         shift, and go to state 18

    pos_elem      go to state 128
    arr_elements  go to state 180
    number        go to state 131
    val           go to state 181


State 167

   46 params: "(" ")" •

    $default  reduce using rule 46 (params)


State 168

   48 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 182


State 169

   47 params: "(" type_params • ")"
   49 type_params: type_params • "," type_params

    ")"  shift, and go to state 183
    ","  shift, and go to state 184


State 170

   44 name_func: name_func IDENTIFIER params NEWLINE •

    $default  reduce using rule 44 (name_func)


State 171

   45 call_func: name_func "(" print_params ")" •

    $default  reduce using rule 45 (call_func)


State 172

   84 cmp_expr: cmp_expr • ">" cmp_expr
   85         | cmp_expr • "<" cmp_expr
   86         | cmp_expr • "<=" cmp_expr
   87         | cmp_expr • ">=" cmp_expr
   88         | cmp_expr • "==" cmp_expr
   89         | cmp_expr • "!=" cmp_expr
   90         | cmp_expr • "||" cmp_expr
   91         | cmp_expr • "&&" cmp_expr
  114 for_statement: SFOR "(" assign ";" cmp_expr • ";" oper_eq ")" decl_statement

    "<"   shift, and go to state 87
    ">"   shift, and go to state 88
    "&&"  shift, and go to state 89
    "<="  shift, and go to state 90
    "||"  shift, and go to state 91
    ">="  shift, and go to state 92
    "=="  shift, and go to state 93
    "!="  shift, and go to state 94
    ";"   shift, and go to state 185


State 173

   12 pos_elem: IDENTIFIER "[" IDENTIFIER • "]"

    "]"  shift, and go to state 186


State 174

   11 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 187


State 175

   41 print_params: print_params • "," print_params
   41             | print_params "," print_params •

    $default  reduce using rule 41 (print_params)


State 176

   34 cmp_params: cmp_params • "," cmp_params
   34           | cmp_params "," cmp_params •

    $default  reduce using rule 34 (cmp_params)


State 177

   11 pos_elem: IDENTIFIER • "[" INTEGER "]"
   12         | IDENTIFIER • "[" IDENTIFIER "]"
   77 val: IDENTIFIER •

    "["  shift, and go to state 160

    $default  reduce using rule 77 (val)


State 178

   61 number: INTEGER •

    $default  reduce using rule 61 (number)


State 179

   62 number: FLOAT •

    $default  reduce using rule 62 (number)


State 180

   79 val: arr_elements •

    $default  reduce using rule 79 (val)


State 181

   80 val: val • "," val
   80    | val "," val •

    $default  reduce using rule 80 (val)


State 182

   48 type_params: type IDENTIFIER •

    $default  reduce using rule 48 (type_params)


State 183

   47 params: "(" type_params ")" •

    $default  reduce using rule 47 (params)


State 184

   49 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 13

    type         go to state 168
    type_params  go to state 188


State 185

  114 for_statement: SFOR "(" assign ";" cmp_expr ";" • oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 71
    "--"        shift, and go to state 189
    "++"        shift, and go to state 190

    var      go to state 191
    oper_eq  go to state 192


State 186

   12 pos_elem: IDENTIFIER "[" IDENTIFIER "]" •

    $default  reduce using rule 12 (pos_elem)


State 187

   11 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 11 (pos_elem)


State 188

   49 type_params: type_params • "," type_params
   49            | type_params "," type_params •

    $default  reduce using rule 49 (type_params)


State 189

   71 oper_eq: "--" • var

    IDENTIFIER  shift, and go to state 71

    var  go to state 193


State 190

   70 oper_eq: "++" • var

    IDENTIFIER  shift, and go to state 71

    var  go to state 194


State 191

   10 var: var • "," var
   68 oper_eq: var • "++"
   69        | var • "--"
   72        | var • "+=" number
   73        | var • "-=" number
   74        | var • "*=" number
   75        | var • "/=" number

    "*="  shift, and go to state 195
    "--"  shift, and go to state 196
    "/="  shift, and go to state 197
    "+="  shift, and go to state 198
    "-="  shift, and go to state 199
    "++"  shift, and go to state 200
    ","   shift, and go to state 74


State 192

  114 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq • ")" decl_statement

    ")"  shift, and go to state 201


State 193

   10 var: var • "," var
   71 oper_eq: "--" var •

    ","  shift, and go to state 74

    $default  reduce using rule 71 (oper_eq)


State 194

   10 var: var • "," var
   70 oper_eq: "++" var •

    ","  shift, and go to state 74

    $default  reduce using rule 70 (oper_eq)


State 195

   74 oper_eq: var "*=" • number

    IDENTIFIER  shift, and go to state 202
    INTEGER     shift, and go to state 178
    FLOAT       shift, and go to state 179

    pos_elem  go to state 128
    number    go to state 203


State 196

   69 oper_eq: var "--" •

    $default  reduce using rule 69 (oper_eq)


State 197

   75 oper_eq: var "/=" • number

    IDENTIFIER  shift, and go to state 202
    INTEGER     shift, and go to state 178
    FLOAT       shift, and go to state 179

    pos_elem  go to state 128
    number    go to state 204


State 198

   72 oper_eq: var "+=" • number

    IDENTIFIER  shift, and go to state 202
    INTEGER     shift, and go to state 178
    FLOAT       shift, and go to state 179

    pos_elem  go to state 128
    number    go to state 205


State 199

   73 oper_eq: var "-=" • number

    IDENTIFIER  shift, and go to state 202
    INTEGER     shift, and go to state 178
    FLOAT       shift, and go to state 179

    pos_elem  go to state 128
    number    go to state 206


State 200

   68 oper_eq: var "++" •

    $default  reduce using rule 68 (oper_eq)


State 201

  114 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    "!"         shift, and go to state 17
    "["         shift, and go to state 18
    "{"         shift, and go to state 19
    SSCAN       shift, and go to state 20
    SPRINT      shift, and go to state 21
    SLEN        shift, and go to state 22
    SCMP        shift, and go to state 23
    NEWLINE     shift, and go to state 24

    decl_var         go to state 25
    type             go to state 26
    var              go to state 27
    arr_elements     go to state 28
    build_func       go to state 29
    func             go to state 30
    decl_func        go to state 31
    name_func        go to state 32
    call_func        go to state 33
    sign             go to state 34
    arithm_expr      go to state 35
    assign           go to state 36
    cmp_expr         go to state 37
    merge_arr        go to state 38
    decl_statement   go to state 207
    if_statement     go to state 41
    block_statement  go to state 42
    while_statement  go to state 43
    for_statement    go to state 44


State 202

   11 pos_elem: IDENTIFIER • "[" INTEGER "]"
   12         | IDENTIFIER • "[" IDENTIFIER "]"

    "["  shift, and go to state 160


State 203

   74 oper_eq: var "*=" number •

    $default  reduce using rule 74 (oper_eq)


State 204

   75 oper_eq: var "/=" number •

    $default  reduce using rule 75 (oper_eq)


State 205

   72 oper_eq: var "+=" number •

    $default  reduce using rule 72 (oper_eq)


State 206

   73 oper_eq: var "-=" number •

    $default  reduce using rule 73 (oper_eq)


State 207

  114 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement •

    $default  reduce using rule 114 (for_statement)
