Terminals unused in grammar

    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    FUNC
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "+"
    "*="
    "--"
    "-"
    "/="
    "<"
    "*"
    "!"
    ">"
    "/"
    "&&"
    "<="
    "%"
    "||"
    ">="
    "=="
    "&"
    "+="
    "!="
    "-="
    "++"
    "{"
    "}"
    "\\"
    END_OF_FILE
    UNKNOWN


State 18 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE
    3        | NEWLINE
    4        | ε

    5 decl_arr: IDENTIFIER "=" elements ";"

    6 elements: "[" value "]"

    7 value: type_int
    8      | type_fl
    9      | type_str

   10 type_int: INTEGER

   11 type_fl: FLOAT

   12 type_str: STRING

   13 decl_var: type var ";"

   14 type: INT
   15     | FLOAT_KEY
   16     | DOUBLE
   17     | SHORT
   18     | LONG

   19 var: IDENTIFIER
   20    | var "," var


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 5 19
    STRING (259) 12
    INTEGER (260) 10
    FLOAT (261) 11
    BREAK (262)
    DO (263)
    IF (264)
    SIZEOF (265)
    CASE (266)
    DOUBLE (267) 16
    INT (268) 14
    STRUCT (269)
    FUNC (270)
    ELSE (271)
    LONG (272) 18
    SWITCH (273)
    CONST (274)
    FLOAT_KEY (275) 15
    RETURN (276)
    VOID (277)
    CONTINUE (278)
    FOR (279)
    SHORT (280) 17
    WHILE (281)
    "+" (282)
    "*=" (283)
    "--" (284)
    "-" (285)
    "/=" (286)
    "<" (287)
    "*" (288)
    "!" (289)
    ">" (290)
    "/" (291)
    "&&" (292)
    "<=" (293)
    "%" (294)
    "||" (295)
    ">=" (296)
    "=" (297) 5
    "==" (298)
    "&" (299)
    "+=" (300)
    "!=" (301)
    "-=" (302)
    "++" (303)
    "[" (304) 6
    "]" (305) 6
    "{" (306)
    "}" (307)
    "," (308) 20
    "\\" (309)
    ";" (310) 5 13
    NEWLINE (311) 2 3
    END_OF_FILE (312)
    UNKNOWN (313)


Nonterminals, with rules where they appear

    $accept (59)
        on left: 0
    program (60)
        on left: 2 3 4
        on right: 0 2
    $@1 (61)
        on left: 1
        on right: 2
    decl_arr (62)
        on left: 5
        on right: 2
    elements (63)
        on left: 6
        on right: 5
    value (64)
        on left: 7 8 9
        on right: 6
    type_int (65)
        on left: 10
        on right: 7
    type_fl (66)
        on left: 11
        on right: 8
    type_str (67)
        on left: 12
        on right: 9
    decl_var (68)
        on left: 13
        on right: 2
    type (69)
        on left: 14 15 16 17 18
        on right: 13
    var (70)
        on left: 19 20
        on right: 13 20


State 0

    0 $accept: • program $end

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 4 (program)

    program  go to state 2


State 1

    3 program: NEWLINE •

    $default  reduce using rule 3 (program)


State 2

    0 $accept: program • $end
    2 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE

    $end       shift, and go to state 3
    DOUBLE     shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    FLOAT_KEY  shift, and go to state 7
    SHORT      shift, and go to state 8

    decl_var  go to state 9
    type      go to state 10


State 3

    0 $accept: program $end •

    $default  accept


State 4

   16 type: DOUBLE •

    $default  reduce using rule 16 (type)


State 5

   14 type: INT •

    $default  reduce using rule 14 (type)


State 6

   18 type: LONG •

    $default  reduce using rule 18 (type)


State 7

   15 type: FLOAT_KEY •

    $default  reduce using rule 15 (type)


State 8

   17 type: SHORT •

    $default  reduce using rule 17 (type)


State 9

    2 program: program decl_var • NEWLINE $@1 program decl_arr NEWLINE

    NEWLINE  shift, and go to state 11


State 10

   13 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 12

    var  go to state 13


State 11

    2 program: program decl_var NEWLINE • $@1 program decl_arr NEWLINE

    $default  reduce using rule 1 ($@1)

    $@1  go to state 14


State 12

   19 var: IDENTIFIER •

    $default  reduce using rule 19 (var)


State 13

   13 decl_var: type var • ";"
   20 var: var • "," var

    ","  shift, and go to state 15
    ";"  shift, and go to state 16


State 14

    2 program: program decl_var NEWLINE $@1 • program decl_arr NEWLINE

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 4 (program)

    program  go to state 17


State 15

   20 var: var "," • var

    IDENTIFIER  shift, and go to state 12

    var  go to state 18


State 16

   13 decl_var: type var ";" •

    $default  reduce using rule 13 (decl_var)


State 17

    2 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE
    2        | program decl_var NEWLINE $@1 program • decl_arr NEWLINE

    IDENTIFIER  shift, and go to state 19
    DOUBLE      shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    FLOAT_KEY   shift, and go to state 7
    SHORT       shift, and go to state 8

    decl_arr  go to state 20
    decl_var  go to state 9
    type      go to state 10


State 18

   20 var: var • "," var
   20    | var "," var •

    ","  shift, and go to state 15

    ","       [reduce using rule 20 (var)]
    $default  reduce using rule 20 (var)


State 19

    5 decl_arr: IDENTIFIER • "=" elements ";"

    "="  shift, and go to state 21


State 20

    2 program: program decl_var NEWLINE $@1 program decl_arr • NEWLINE

    NEWLINE  shift, and go to state 22


State 21

    5 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 23

    elements  go to state 24


State 22

    2 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE •

    $default  reduce using rule 2 (program)


State 23

    6 elements: "[" • value "]"

    STRING   shift, and go to state 25
    INTEGER  shift, and go to state 26
    FLOAT    shift, and go to state 27

    value     go to state 28
    type_int  go to state 29
    type_fl   go to state 30
    type_str  go to state 31


State 24

    5 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 32


State 25

   12 type_str: STRING •

    $default  reduce using rule 12 (type_str)


State 26

   10 type_int: INTEGER •

    $default  reduce using rule 10 (type_int)


State 27

   11 type_fl: FLOAT •

    $default  reduce using rule 11 (type_fl)


State 28

    6 elements: "[" value • "]"

    "]"  shift, and go to state 33


State 29

    7 value: type_int •

    $default  reduce using rule 7 (value)


State 30

    8 value: type_fl •

    $default  reduce using rule 8 (value)


State 31

    9 value: type_str •

    $default  reduce using rule 9 (value)


State 32

    5 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 5 (decl_arr)


State 33

    6 elements: "[" value "]" •

    $default  reduce using rule 6 (elements)
