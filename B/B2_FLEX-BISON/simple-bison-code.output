Terminals unused in grammar

    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "+"
    "*="
    "--"
    "-"
    "/="
    "<"
    "*"
    "!"
    ">"
    "/"
    "&&"
    "<="
    "%"
    "||"
    ">="
    "=="
    "&"
    "+="
    "!="
    "-="
    "++"
    "\\"
    END_OF_FILE
    UNKNOWN


Rules useless in parser due to conflicts

   56 code: code NEWLINE code


State 15 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program decl_arr NEWLINE
    3        | program decl_arr
    4        | program build_func NEWLINE
    5        | program decl_func NEWLINE
    6        | program NEWLINE
    7        | ε

    8 decl_arr: IDENTIFIER "=" elements ";"

    9 pos_elem: IDENTIFIER "[" INTEGER "]"

   10 elements: "[" "]"
   11         | "[" arr_int "]"
   12         | "[" arr_fl "]"
   13         | "[" arr_str "]"

   14 arr_int: INTEGER
   15        | arr_int "," arr_int

   16 arr_fl: FLOAT
   17       | arr_fl "," arr_fl

   18 arr_str: STRING
   19        | arr_str "," arr_str

   20 build_func: func ";"

   21 func: SCAN "(" scan_params ")"
   22     | LEN "(" len_params ")"
   23     | CMP "(" cmp_params ")"
   24     | PRINT "(" print_params ")"

   25 scan_params: IDENTIFIER

   26 len_params: elements
   27           | STRING
   28           | IDENTIFIER

   29 cmp_params: STRING
   30           | IDENTIFIER
   31           | cmp_params "," cmp_params

   32 print_params: STRING
   33             | IDENTIFIER
   34             | INTEGER
   35             | func
   36             | pos_elem
   37             | print_params "," print_params

   38 decl_var: type var ";"

   39 type: INT
   40     | FLOAT_KEY
   41     | DOUBLE
   42     | SHORT
   43     | LONG

   44 var: IDENTIFIER
   45    | var "," var

   46 decl_func: name_func code_func

   47 name_func: IDENTIFIER
   48          | FUNC name_func params

   49 params: "(" ")"
   50       | "(" type_params ")"

   51 type_params: type IDENTIFIER
   52            | type_params "," type_params

   53 code_func: "{" "}"
   54          | "{" NEWLINE code NEWLINE "}"

   55 code: build_func
   56     | code NEWLINE code


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SCAN (258) 21
    LEN (259) 22
    CMP (260) 23
    PRINT (261) 24
    IDENTIFIER (262) 8 9 25 28 30 33 44 47 51
    STRING (263) 18 27 29 32
    INTEGER (264) 9 14 34
    FLOAT (265) 16
    BREAK (266)
    DO (267)
    IF (268)
    SIZEOF (269)
    CASE (270)
    DOUBLE (271) 41
    INT (272) 39
    STRUCT (273)
    FUNC (274) 48
    ELSE (275)
    LONG (276) 43
    SWITCH (277)
    CONST (278)
    FLOAT_KEY (279) 40
    RETURN (280)
    VOID (281)
    CONTINUE (282)
    FOR (283)
    SHORT (284) 42
    WHILE (285)
    "+" (286)
    "*=" (287)
    "--" (288)
    "-" (289)
    "/=" (290)
    "<" (291)
    "*" (292)
    "!" (293)
    ">" (294)
    "/" (295)
    "&&" (296)
    "<=" (297)
    "%" (298)
    "||" (299)
    ">=" (300)
    "=" (301) 8
    "==" (302)
    "&" (303)
    "+=" (304)
    "!=" (305)
    "-=" (306)
    "++" (307)
    "(" (308) 21 22 23 24 49 50
    ")" (309) 21 22 23 24 49 50
    "[" (310) 9 10 11 12 13
    "]" (311) 9 10 11 12 13
    "{" (312) 53 54
    "}" (313) 53 54
    "," (314) 15 17 19 31 37 45 52
    "\\" (315)
    ";" (316) 8 20 38
    NEWLINE (317) 1 2 4 5 6 54 56
    END_OF_FILE (318)
    UNKNOWN (319)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program (66)
        on left: 1 2 3 4 5 6 7
        on right: 0 1 2 3 4 5 6
    decl_arr (67)
        on left: 8
        on right: 2 3
    pos_elem (68)
        on left: 9
        on right: 36
    elements (69)
        on left: 10 11 12 13
        on right: 8 26
    arr_int (70)
        on left: 14 15
        on right: 11 15
    arr_fl (71)
        on left: 16 17
        on right: 12 17
    arr_str (72)
        on left: 18 19
        on right: 13 19
    build_func (73)
        on left: 20
        on right: 4 55
    func (74)
        on left: 21 22 23 24
        on right: 20 35
    scan_params (75)
        on left: 25
        on right: 21
    len_params (76)
        on left: 26 27 28
        on right: 22
    cmp_params (77)
        on left: 29 30 31
        on right: 23 31
    print_params (78)
        on left: 32 33 34 35 36 37
        on right: 24 37
    decl_var (79)
        on left: 38
        on right: 1
    type (80)
        on left: 39 40 41 42 43
        on right: 38 51
    var (81)
        on left: 44 45
        on right: 38 45
    decl_func (82)
        on left: 46
        on right: 5
    name_func (83)
        on left: 47 48
        on right: 46 48
    params (84)
        on left: 49 50
        on right: 48
    type_params (85)
        on left: 51 52
        on right: 50 52
    code_func (86)
        on left: 53 54
        on right: 46
    code (87)
        on left: 55 56
        on right: 54 56


State 0

    0 $accept: • program $end

    $default  reduce using rule 7 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • decl_arr NEWLINE
    3        | program • decl_arr
    4        | program • build_func NEWLINE
    5        | program • decl_func NEWLINE
    6        | program • NEWLINE

    $end        shift, and go to state 2
    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    FUNC        shift, and go to state 10
    LONG        shift, and go to state 11
    FLOAT_KEY   shift, and go to state 12
    SHORT       shift, and go to state 13
    NEWLINE     shift, and go to state 14

    decl_arr    go to state 15
    build_func  go to state 16
    func        go to state 17
    decl_var    go to state 18
    type        go to state 19
    decl_func   go to state 20
    name_func   go to state 21


State 2

    0 $accept: program $end •

    $default  accept


State 3

   21 func: SCAN • "(" scan_params ")"

    "("  shift, and go to state 22


State 4

   22 func: LEN • "(" len_params ")"

    "("  shift, and go to state 23


State 5

   23 func: CMP • "(" cmp_params ")"

    "("  shift, and go to state 24


State 6

   24 func: PRINT • "(" print_params ")"

    "("  shift, and go to state 25


State 7

    8 decl_arr: IDENTIFIER • "=" elements ";"
   47 name_func: IDENTIFIER •

    "="  shift, and go to state 26

    $default  reduce using rule 47 (name_func)


State 8

   41 type: DOUBLE •

    $default  reduce using rule 41 (type)


State 9

   39 type: INT •

    $default  reduce using rule 39 (type)


State 10

   48 name_func: FUNC • name_func params

    IDENTIFIER  shift, and go to state 27
    FUNC        shift, and go to state 10

    name_func  go to state 28


State 11

   43 type: LONG •

    $default  reduce using rule 43 (type)


State 12

   40 type: FLOAT_KEY •

    $default  reduce using rule 40 (type)


State 13

   42 type: SHORT •

    $default  reduce using rule 42 (type)


State 14

    6 program: program NEWLINE •

    $default  reduce using rule 6 (program)


State 15

    2 program: program decl_arr • NEWLINE
    3        | program decl_arr •

    NEWLINE  shift, and go to state 29

    NEWLINE   [reduce using rule 3 (program)]
    $default  reduce using rule 3 (program)


State 16

    4 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 30


State 17

   20 build_func: func • ";"

    ";"  shift, and go to state 31


State 18

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 32


State 19

   38 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 33

    var  go to state 34


State 20

    5 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 35


State 21

   46 decl_func: name_func • code_func

    "{"  shift, and go to state 36

    code_func  go to state 37


State 22

   21 func: SCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 38

    scan_params  go to state 39


State 23

   22 func: LEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 40
    STRING      shift, and go to state 41
    "["         shift, and go to state 42

    elements    go to state 43
    len_params  go to state 44


State 24

   23 func: CMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 45
    STRING      shift, and go to state 46

    cmp_params  go to state 47


State 25

   24 func: PRINT "(" • print_params ")"

    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 48
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50

    pos_elem      go to state 51
    func          go to state 52
    print_params  go to state 53


State 26

    8 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 42

    elements  go to state 54


State 27

   47 name_func: IDENTIFIER •

    $default  reduce using rule 47 (name_func)


State 28

   48 name_func: FUNC name_func • params

    "("  shift, and go to state 55

    params  go to state 56


State 29

    2 program: program decl_arr NEWLINE •

    $default  reduce using rule 2 (program)


State 30

    4 program: program build_func NEWLINE •

    $default  reduce using rule 4 (program)


State 31

   20 build_func: func ";" •

    $default  reduce using rule 20 (build_func)


State 32

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 33

   44 var: IDENTIFIER •

    $default  reduce using rule 44 (var)


State 34

   38 decl_var: type var • ";"
   45 var: var • "," var

    ","  shift, and go to state 57
    ";"  shift, and go to state 58


State 35

    5 program: program decl_func NEWLINE •

    $default  reduce using rule 5 (program)


State 36

   53 code_func: "{" • "}"
   54          | "{" • NEWLINE code NEWLINE "}"

    "}"      shift, and go to state 59
    NEWLINE  shift, and go to state 60


State 37

   46 decl_func: name_func code_func •

    $default  reduce using rule 46 (decl_func)


State 38

   25 scan_params: IDENTIFIER •

    $default  reduce using rule 25 (scan_params)


State 39

   21 func: SCAN "(" scan_params • ")"

    ")"  shift, and go to state 61


State 40

   28 len_params: IDENTIFIER •

    $default  reduce using rule 28 (len_params)


State 41

   27 len_params: STRING •

    $default  reduce using rule 27 (len_params)


State 42

   10 elements: "[" • "]"
   11         | "[" • arr_int "]"
   12         | "[" • arr_fl "]"
   13         | "[" • arr_str "]"

    STRING   shift, and go to state 62
    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    "]"      shift, and go to state 65

    arr_int  go to state 66
    arr_fl   go to state 67
    arr_str  go to state 68


State 43

   26 len_params: elements •

    $default  reduce using rule 26 (len_params)


State 44

   22 func: LEN "(" len_params • ")"

    ")"  shift, and go to state 69


State 45

   30 cmp_params: IDENTIFIER •

    $default  reduce using rule 30 (cmp_params)


State 46

   29 cmp_params: STRING •

    $default  reduce using rule 29 (cmp_params)


State 47

   23 func: CMP "(" cmp_params • ")"
   31 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 70
    ","  shift, and go to state 71


State 48

    9 pos_elem: IDENTIFIER • "[" INTEGER "]"
   33 print_params: IDENTIFIER •

    "["  shift, and go to state 72

    $default  reduce using rule 33 (print_params)


State 49

   32 print_params: STRING •

    $default  reduce using rule 32 (print_params)


State 50

   34 print_params: INTEGER •

    $default  reduce using rule 34 (print_params)


State 51

   36 print_params: pos_elem •

    $default  reduce using rule 36 (print_params)


State 52

   35 print_params: func •

    $default  reduce using rule 35 (print_params)


State 53

   24 func: PRINT "(" print_params • ")"
   37 print_params: print_params • "," print_params

    ")"  shift, and go to state 73
    ","  shift, and go to state 74


State 54

    8 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 75


State 55

   49 params: "(" • ")"
   50       | "(" • type_params ")"

    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 11
    FLOAT_KEY  shift, and go to state 12
    SHORT      shift, and go to state 13
    ")"        shift, and go to state 76

    type         go to state 77
    type_params  go to state 78


State 56

   48 name_func: FUNC name_func params •

    $default  reduce using rule 48 (name_func)


State 57

   45 var: var "," • var

    IDENTIFIER  shift, and go to state 33

    var  go to state 79


State 58

   38 decl_var: type var ";" •

    $default  reduce using rule 38 (decl_var)


State 59

   53 code_func: "{" "}" •

    $default  reduce using rule 53 (code_func)


State 60

   54 code_func: "{" NEWLINE • code NEWLINE "}"

    SCAN   shift, and go to state 3
    LEN    shift, and go to state 4
    CMP    shift, and go to state 5
    PRINT  shift, and go to state 6

    build_func  go to state 80
    func        go to state 17
    code        go to state 81


State 61

   21 func: SCAN "(" scan_params ")" •

    $default  reduce using rule 21 (func)


State 62

   18 arr_str: STRING •

    $default  reduce using rule 18 (arr_str)


State 63

   14 arr_int: INTEGER •

    $default  reduce using rule 14 (arr_int)


State 64

   16 arr_fl: FLOAT •

    $default  reduce using rule 16 (arr_fl)


State 65

   10 elements: "[" "]" •

    $default  reduce using rule 10 (elements)


State 66

   11 elements: "[" arr_int • "]"
   15 arr_int: arr_int • "," arr_int

    "]"  shift, and go to state 82
    ","  shift, and go to state 83


State 67

   12 elements: "[" arr_fl • "]"
   17 arr_fl: arr_fl • "," arr_fl

    "]"  shift, and go to state 84
    ","  shift, and go to state 85


State 68

   13 elements: "[" arr_str • "]"
   19 arr_str: arr_str • "," arr_str

    "]"  shift, and go to state 86
    ","  shift, and go to state 87


State 69

   22 func: LEN "(" len_params ")" •

    $default  reduce using rule 22 (func)


State 70

   23 func: CMP "(" cmp_params ")" •

    $default  reduce using rule 23 (func)


State 71

   31 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 45
    STRING      shift, and go to state 46

    cmp_params  go to state 88


State 72

    9 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 89


State 73

   24 func: PRINT "(" print_params ")" •

    $default  reduce using rule 24 (func)


State 74

   37 print_params: print_params "," • print_params

    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 48
    STRING      shift, and go to state 49
    INTEGER     shift, and go to state 50

    pos_elem      go to state 51
    func          go to state 52
    print_params  go to state 90


State 75

    8 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 8 (decl_arr)


State 76

   49 params: "(" ")" •

    $default  reduce using rule 49 (params)


State 77

   51 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 91


State 78

   50 params: "(" type_params • ")"
   52 type_params: type_params • "," type_params

    ")"  shift, and go to state 92
    ","  shift, and go to state 93


State 79

   45 var: var • "," var
   45    | var "," var •

    $default  reduce using rule 45 (var)


State 80

   55 code: build_func •

    $default  reduce using rule 55 (code)


State 81

   54 code_func: "{" NEWLINE code • NEWLINE "}"
   56 code: code • NEWLINE code

    NEWLINE  shift, and go to state 94


State 82

   11 elements: "[" arr_int "]" •

    $default  reduce using rule 11 (elements)


State 83

   15 arr_int: arr_int "," • arr_int

    INTEGER  shift, and go to state 63

    arr_int  go to state 95


State 84

   12 elements: "[" arr_fl "]" •

    $default  reduce using rule 12 (elements)


State 85

   17 arr_fl: arr_fl "," • arr_fl

    FLOAT  shift, and go to state 64

    arr_fl  go to state 96


State 86

   13 elements: "[" arr_str "]" •

    $default  reduce using rule 13 (elements)


State 87

   19 arr_str: arr_str "," • arr_str

    STRING  shift, and go to state 62

    arr_str  go to state 97


State 88

   31 cmp_params: cmp_params • "," cmp_params
   31           | cmp_params "," cmp_params •

    $default  reduce using rule 31 (cmp_params)


State 89

    9 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 98


State 90

   37 print_params: print_params • "," print_params
   37             | print_params "," print_params •

    $default  reduce using rule 37 (print_params)


State 91

   51 type_params: type IDENTIFIER •

    $default  reduce using rule 51 (type_params)


State 92

   50 params: "(" type_params ")" •

    $default  reduce using rule 50 (params)


State 93

   52 type_params: type_params "," • type_params

    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 11
    FLOAT_KEY  shift, and go to state 12
    SHORT      shift, and go to state 13

    type         go to state 77
    type_params  go to state 99


State 94

   54 code_func: "{" NEWLINE code NEWLINE • "}"
   56 code: code NEWLINE • code

    SCAN   shift, and go to state 3
    LEN    shift, and go to state 4
    CMP    shift, and go to state 5
    PRINT  shift, and go to state 6
    "}"    shift, and go to state 100

    build_func  go to state 80
    func        go to state 17
    code        go to state 101


State 95

   15 arr_int: arr_int • "," arr_int
   15        | arr_int "," arr_int •

    $default  reduce using rule 15 (arr_int)


State 96

   17 arr_fl: arr_fl • "," arr_fl
   17       | arr_fl "," arr_fl •

    $default  reduce using rule 17 (arr_fl)


State 97

   19 arr_str: arr_str • "," arr_str
   19        | arr_str "," arr_str •

    $default  reduce using rule 19 (arr_str)


State 98

    9 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 9 (pos_elem)


State 99

   52 type_params: type_params • "," type_params
   52            | type_params "," type_params •

    $default  reduce using rule 52 (type_params)


State 100

   54 code_func: "{" NEWLINE code NEWLINE "}" •

    $default  reduce using rule 54 (code_func)


State 101

   56 code: code • NEWLINE code
   56     | code NEWLINE code •

    NEWLINE  shift, and go to state 102

    NEWLINE  [reduce using rule 56 (code)]


State 102

   56 code: code NEWLINE • code

    SCAN   shift, and go to state 3
    LEN    shift, and go to state 4
    CMP    shift, and go to state 5
    PRINT  shift, and go to state 6

    build_func  go to state 80
    func        go to state 17
    code        go to state 101
