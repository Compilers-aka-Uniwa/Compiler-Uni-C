Terminals unused in grammar

    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    FUNC
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "+"
    "*="
    "--"
    "-"
    "/="
    "<"
    "*"
    "!"
    ">"
    "/"
    "&&"
    "<="
    "%"
    "||"
    ">="
    "=="
    "&"
    "+="
    "!="
    "-="
    "++"
    "{"
    "}"
    "\\"
    END_OF_FILE
    UNKNOWN


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program decl_arr NEWLINE
    3        | program build_func NEWLINE
    4        | program NEWLINE
    5        | ε

    6 decl_arr: IDENTIFIER "=" elements ";"

    7 elements: "[" "]"
    8         | "[" arr_int "]"
    9         | "[" arr_fl "]"
   10         | "[" arr_str "]"

   11 arr_int: INTEGER
   12        | arr_int "," arr_int

   13 arr_fl: FLOAT
   14       | arr_fl "," arr_fl

   15 arr_str: STRING
   16        | arr_str "," arr_str

   17 build_func: func ";"

   18 func: SCAN "(" scan_params ")"
   19     | LEN "(" len_params ")"
   20     | CMP "(" cmp_params ")"
   21     | PRINT "(" print_params ")"

   22 scan_params: IDENTIFIER

   23 len_params: elements
   24           | STRING
   25           | IDENTIFIER

   26 cmp_params: STRING
   27           | IDENTIFIER
   28           | cmp_params "," cmp_params

   29 print_params: STRING
   30             | IDENTIFIER
   31             | INTEGER
   32             | func
   33             | print_params "," print_params

   34 decl_var: type var ";"

   35 type: INT
   36     | FLOAT_KEY
   37     | DOUBLE
   38     | SHORT
   39     | LONG

   40 var: IDENTIFIER
   41    | var "," var


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SCAN (258) 18
    LEN (259) 19
    CMP (260) 20
    PRINT (261) 21
    IDENTIFIER (262) 6 22 25 27 30 40
    STRING (263) 15 24 26 29
    INTEGER (264) 11 31
    FLOAT (265) 13
    BREAK (266)
    DO (267)
    IF (268)
    SIZEOF (269)
    CASE (270)
    DOUBLE (271) 37
    INT (272) 35
    STRUCT (273)
    FUNC (274)
    ELSE (275)
    LONG (276) 39
    SWITCH (277)
    CONST (278)
    FLOAT_KEY (279) 36
    RETURN (280)
    VOID (281)
    CONTINUE (282)
    FOR (283)
    SHORT (284) 38
    WHILE (285)
    "+" (286)
    "*=" (287)
    "--" (288)
    "-" (289)
    "/=" (290)
    "<" (291)
    "*" (292)
    "!" (293)
    ">" (294)
    "/" (295)
    "&&" (296)
    "<=" (297)
    "%" (298)
    "||" (299)
    ">=" (300)
    "=" (301) 6
    "==" (302)
    "&" (303)
    "+=" (304)
    "!=" (305)
    "-=" (306)
    "++" (307)
    "(" (308) 18 19 20 21
    ")" (309) 18 19 20 21
    "[" (310) 7 8 9 10
    "]" (311) 7 8 9 10
    "{" (312)
    "}" (313)
    "," (314) 12 14 16 28 33 41
    "\\" (315)
    ";" (316) 6 17 34
    NEWLINE (317) 1 2 3 4
    END_OF_FILE (318)
    UNKNOWN (319)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program (66)
        on left: 1 2 3 4 5
        on right: 0 1 2 3 4
    decl_arr (67)
        on left: 6
        on right: 2
    elements (68)
        on left: 7 8 9 10
        on right: 6 23
    arr_int (69)
        on left: 11 12
        on right: 8 12
    arr_fl (70)
        on left: 13 14
        on right: 9 14
    arr_str (71)
        on left: 15 16
        on right: 10 16
    build_func (72)
        on left: 17
        on right: 3
    func (73)
        on left: 18 19 20 21
        on right: 17 32
    scan_params (74)
        on left: 22
        on right: 18
    len_params (75)
        on left: 23 24 25
        on right: 19
    cmp_params (76)
        on left: 26 27 28
        on right: 20 28
    print_params (77)
        on left: 29 30 31 32 33
        on right: 21 33
    decl_var (78)
        on left: 34
        on right: 1
    type (79)
        on left: 35 36 37 38 39
        on right: 34
    var (80)
        on left: 40 41
        on right: 34 41


State 0

    0 $accept: • program $end

    $default  reduce using rule 5 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • decl_arr NEWLINE
    3        | program • build_func NEWLINE
    4        | program • NEWLINE

    $end        shift, and go to state 2
    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    LONG        shift, and go to state 10
    FLOAT_KEY   shift, and go to state 11
    SHORT       shift, and go to state 12
    NEWLINE     shift, and go to state 13

    decl_arr    go to state 14
    build_func  go to state 15
    func        go to state 16
    decl_var    go to state 17
    type        go to state 18


State 2

    0 $accept: program $end •

    $default  accept


State 3

   18 func: SCAN • "(" scan_params ")"

    "("  shift, and go to state 19


State 4

   19 func: LEN • "(" len_params ")"

    "("  shift, and go to state 20


State 5

   20 func: CMP • "(" cmp_params ")"

    "("  shift, and go to state 21


State 6

   21 func: PRINT • "(" print_params ")"

    "("  shift, and go to state 22


State 7

    6 decl_arr: IDENTIFIER • "=" elements ";"

    "="  shift, and go to state 23


State 8

   37 type: DOUBLE •

    $default  reduce using rule 37 (type)


State 9

   35 type: INT •

    $default  reduce using rule 35 (type)


State 10

   39 type: LONG •

    $default  reduce using rule 39 (type)


State 11

   36 type: FLOAT_KEY •

    $default  reduce using rule 36 (type)


State 12

   38 type: SHORT •

    $default  reduce using rule 38 (type)


State 13

    4 program: program NEWLINE •

    $default  reduce using rule 4 (program)


State 14

    2 program: program decl_arr • NEWLINE

    NEWLINE  shift, and go to state 24


State 15

    3 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 25


State 16

   17 build_func: func • ";"

    ";"  shift, and go to state 26


State 17

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 27


State 18

   34 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 28

    var  go to state 29


State 19

   18 func: SCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 30

    scan_params  go to state 31


State 20

   19 func: LEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 32
    STRING      shift, and go to state 33
    "["         shift, and go to state 34

    elements    go to state 35
    len_params  go to state 36


State 21

   20 func: CMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 37
    STRING      shift, and go to state 38

    cmp_params  go to state 39


State 22

   21 func: PRINT "(" • print_params ")"

    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 40
    STRING      shift, and go to state 41
    INTEGER     shift, and go to state 42

    func          go to state 43
    print_params  go to state 44


State 23

    6 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 34

    elements  go to state 45


State 24

    2 program: program decl_arr NEWLINE •

    $default  reduce using rule 2 (program)


State 25

    3 program: program build_func NEWLINE •

    $default  reduce using rule 3 (program)


State 26

   17 build_func: func ";" •

    $default  reduce using rule 17 (build_func)


State 27

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 28

   40 var: IDENTIFIER •

    $default  reduce using rule 40 (var)


State 29

   34 decl_var: type var • ";"
   41 var: var • "," var

    ","  shift, and go to state 46
    ";"  shift, and go to state 47


State 30

   22 scan_params: IDENTIFIER •

    $default  reduce using rule 22 (scan_params)


State 31

   18 func: SCAN "(" scan_params • ")"

    ")"  shift, and go to state 48


State 32

   25 len_params: IDENTIFIER •

    $default  reduce using rule 25 (len_params)


State 33

   24 len_params: STRING •

    $default  reduce using rule 24 (len_params)


State 34

    7 elements: "[" • "]"
    8         | "[" • arr_int "]"
    9         | "[" • arr_fl "]"
   10         | "[" • arr_str "]"

    STRING   shift, and go to state 49
    INTEGER  shift, and go to state 50
    FLOAT    shift, and go to state 51
    "]"      shift, and go to state 52

    arr_int  go to state 53
    arr_fl   go to state 54
    arr_str  go to state 55


State 35

   23 len_params: elements •

    $default  reduce using rule 23 (len_params)


State 36

   19 func: LEN "(" len_params • ")"

    ")"  shift, and go to state 56


State 37

   27 cmp_params: IDENTIFIER •

    $default  reduce using rule 27 (cmp_params)


State 38

   26 cmp_params: STRING •

    $default  reduce using rule 26 (cmp_params)


State 39

   20 func: CMP "(" cmp_params • ")"
   28 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 57
    ","  shift, and go to state 58


State 40

   30 print_params: IDENTIFIER •

    $default  reduce using rule 30 (print_params)


State 41

   29 print_params: STRING •

    $default  reduce using rule 29 (print_params)


State 42

   31 print_params: INTEGER •

    $default  reduce using rule 31 (print_params)


State 43

   32 print_params: func •

    $default  reduce using rule 32 (print_params)


State 44

   21 func: PRINT "(" print_params • ")"
   33 print_params: print_params • "," print_params

    ")"  shift, and go to state 59
    ","  shift, and go to state 60


State 45

    6 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 61


State 46

   41 var: var "," • var

    IDENTIFIER  shift, and go to state 28

    var  go to state 62


State 47

   34 decl_var: type var ";" •

    $default  reduce using rule 34 (decl_var)


State 48

   18 func: SCAN "(" scan_params ")" •

    $default  reduce using rule 18 (func)


State 49

   15 arr_str: STRING •

    $default  reduce using rule 15 (arr_str)


State 50

   11 arr_int: INTEGER •

    $default  reduce using rule 11 (arr_int)


State 51

   13 arr_fl: FLOAT •

    $default  reduce using rule 13 (arr_fl)


State 52

    7 elements: "[" "]" •

    $default  reduce using rule 7 (elements)


State 53

    8 elements: "[" arr_int • "]"
   12 arr_int: arr_int • "," arr_int

    "]"  shift, and go to state 63
    ","  shift, and go to state 64


State 54

    9 elements: "[" arr_fl • "]"
   14 arr_fl: arr_fl • "," arr_fl

    "]"  shift, and go to state 65
    ","  shift, and go to state 66


State 55

   10 elements: "[" arr_str • "]"
   16 arr_str: arr_str • "," arr_str

    "]"  shift, and go to state 67
    ","  shift, and go to state 68


State 56

   19 func: LEN "(" len_params ")" •

    $default  reduce using rule 19 (func)


State 57

   20 func: CMP "(" cmp_params ")" •

    $default  reduce using rule 20 (func)


State 58

   28 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 37
    STRING      shift, and go to state 38

    cmp_params  go to state 69


State 59

   21 func: PRINT "(" print_params ")" •

    $default  reduce using rule 21 (func)


State 60

   33 print_params: print_params "," • print_params

    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 40
    STRING      shift, and go to state 41
    INTEGER     shift, and go to state 42

    func          go to state 43
    print_params  go to state 70


State 61

    6 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 6 (decl_arr)


State 62

   41 var: var • "," var
   41    | var "," var •

    $default  reduce using rule 41 (var)


State 63

    8 elements: "[" arr_int "]" •

    $default  reduce using rule 8 (elements)


State 64

   12 arr_int: arr_int "," • arr_int

    INTEGER  shift, and go to state 50

    arr_int  go to state 71


State 65

    9 elements: "[" arr_fl "]" •

    $default  reduce using rule 9 (elements)


State 66

   14 arr_fl: arr_fl "," • arr_fl

    FLOAT  shift, and go to state 51

    arr_fl  go to state 72


State 67

   10 elements: "[" arr_str "]" •

    $default  reduce using rule 10 (elements)


State 68

   16 arr_str: arr_str "," • arr_str

    STRING  shift, and go to state 49

    arr_str  go to state 73


State 69

   28 cmp_params: cmp_params • "," cmp_params
   28           | cmp_params "," cmp_params •

    $default  reduce using rule 28 (cmp_params)


State 70

   33 print_params: print_params • "," print_params
   33             | print_params "," print_params •

    $default  reduce using rule 33 (print_params)


State 71

   12 arr_int: arr_int • "," arr_int
   12        | arr_int "," arr_int •

    $default  reduce using rule 12 (arr_int)


State 72

   14 arr_fl: arr_fl • "," arr_fl
   14       | arr_fl "," arr_fl •

    $default  reduce using rule 14 (arr_fl)


State 73

   16 arr_str: arr_str • "," arr_str
   16        | arr_str "," arr_str •

    $default  reduce using rule 16 (arr_str)
