Terminals unused in grammar

    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "*="
    "--"
    "/="
    "<"
    "!"
    ">"
    "&&"
    "<="
    "%"
    "||"
    ">="
    "=="
    "&"
    "+="
    "!="
    "-="
    "++"
    "\\"
    END_OF_FILE
    UNKNOWN


Rules useless in parser due to conflicts

   56 code: ε


State 18 conflicts: 1 shift/reduce
State 44 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program decl_arr NEWLINE
    3        | program decl_arr
    4        | program build_func NEWLINE
    5        | program decl_func NEWLINE
    6        | program decl_operations NEWLINE
    7        | program NEWLINE
    8        | ε

    9 decl_arr: IDENTIFIER "=" elements ";"

   10 pos_elem: IDENTIFIER "[" INTEGER "]"

   11 elements: "[" "]"
   12         | "[" arr_int "]"
   13         | "[" arr_fl "]"
   14         | "[" arr_str "]"

   15 arr_int: INTEGER
   16        | arr_int "," arr_int

   17 arr_fl: FLOAT
   18       | arr_fl "," arr_fl

   19 arr_str: STRING
   20        | arr_str "," arr_str

   21 build_func: func ";"

   22 func: SCAN "(" scan_params ")"
   23     | LEN "(" len_params ")"
   24     | CMP "(" cmp_params ")"
   25     | PRINT "(" print_params ")"

   26 scan_params: IDENTIFIER

   27 len_params: elements
   28           | STRING
   29           | IDENTIFIER

   30 cmp_params: STRING
   31           | IDENTIFIER
   32           | cmp_params "," cmp_params

   33 print_params: STRING
   34             | IDENTIFIER
   35             | INTEGER
   36             | func
   37             | pos_elem
   38             | print_params "," print_params

   39 decl_var: type var ";"

   40 type: INT
   41     | FLOAT_KEY
   42     | DOUBLE
   43     | SHORT
   44     | LONG

   45 var: IDENTIFIER
   46    | var "," var

   47 decl_func: name_func code_func

   48 name_func: IDENTIFIER
   49          | FUNC name_func params NEWLINE

   50 params: "(" ")"
   51       | "(" type_params ")"

   52 type_params: type IDENTIFIER
   53            | type_params "," type_params

   54 code_func: "{" code NEWLINE "}"

   55 code: ε
   56     | ε

   57 decl_operations: arithm_expr

   58 sign: INTEGER
   59     | "+" sign
   60     | "-" sign

   61 arithm_expr: sign
   62            | IDENTIFIER
   63            | arithm_expr "+" arithm_expr
   64            | arithm_expr "-" arithm_expr
   65            | arithm_expr "*" arithm_expr
   66            | arithm_expr "/" arithm_expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SCAN (258) 22
    LEN (259) 23
    CMP (260) 24
    PRINT (261) 25
    IDENTIFIER (262) 9 10 26 29 31 34 45 48 52 62
    STRING (263) 19 28 30 33
    INTEGER (264) 10 15 35 58
    FLOAT (265) 17
    BREAK (266)
    DO (267)
    IF (268)
    SIZEOF (269)
    CASE (270)
    DOUBLE (271) 42
    INT (272) 40
    STRUCT (273)
    FUNC (274) 49
    ELSE (275)
    LONG (276) 44
    SWITCH (277)
    CONST (278)
    FLOAT_KEY (279) 41
    RETURN (280)
    VOID (281)
    CONTINUE (282)
    FOR (283)
    SHORT (284) 43
    WHILE (285)
    "+" (286) 59 63
    "*=" (287)
    "--" (288)
    "-" (289) 60 64
    "/=" (290)
    "<" (291)
    "*" (292) 65
    "!" (293)
    ">" (294)
    "/" (295) 66
    "&&" (296)
    "<=" (297)
    "%" (298)
    "||" (299)
    ">=" (300)
    "=" (301) 9
    "==" (302)
    "&" (303)
    "+=" (304)
    "!=" (305)
    "-=" (306)
    "++" (307)
    "(" (308) 22 23 24 25 50 51
    ")" (309) 22 23 24 25 50 51
    "[" (310) 10 11 12 13 14
    "]" (311) 10 11 12 13 14
    "{" (312) 54
    "}" (313) 54
    "," (314) 16 18 20 32 38 46 53
    "\\" (315)
    ";" (316) 9 21 39
    NEWLINE (317) 1 2 4 5 6 7 49 54
    END_OF_FILE (318)
    UNKNOWN (319)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program (66)
        on left: 1 2 3 4 5 6 7 8
        on right: 0 1 2 3 4 5 6 7
    decl_arr (67)
        on left: 9
        on right: 2 3
    pos_elem (68)
        on left: 10
        on right: 37
    elements (69)
        on left: 11 12 13 14
        on right: 9 27
    arr_int (70)
        on left: 15 16
        on right: 12 16
    arr_fl (71)
        on left: 17 18
        on right: 13 18
    arr_str (72)
        on left: 19 20
        on right: 14 20
    build_func (73)
        on left: 21
        on right: 4
    func (74)
        on left: 22 23 24 25
        on right: 21 36
    scan_params (75)
        on left: 26
        on right: 22
    len_params (76)
        on left: 27 28 29
        on right: 23
    cmp_params (77)
        on left: 30 31 32
        on right: 24 32
    print_params (78)
        on left: 33 34 35 36 37 38
        on right: 25 38
    decl_var (79)
        on left: 39
        on right: 1
    type (80)
        on left: 40 41 42 43 44
        on right: 39 52
    var (81)
        on left: 45 46
        on right: 39 46
    decl_func (82)
        on left: 47
        on right: 5
    name_func (83)
        on left: 48 49
        on right: 47 49
    params (84)
        on left: 50 51
        on right: 49
    type_params (85)
        on left: 52 53
        on right: 51 53
    code_func (86)
        on left: 54
        on right: 47
    code (87)
        on left: 55 56
        on right: 54
    decl_operations (88)
        on left: 57
        on right: 6
    sign (89)
        on left: 58 59 60
        on right: 59 60 61
    arithm_expr (90)
        on left: 61 62 63 64 65 66
        on right: 57 63 64 65 66


State 0

    0 $accept: • program $end

    $default  reduce using rule 8 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • decl_arr NEWLINE
    3        | program • decl_arr
    4        | program • build_func NEWLINE
    5        | program • decl_func NEWLINE
    6        | program • decl_operations NEWLINE
    7        | program • NEWLINE

    $end        shift, and go to state 2
    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    INTEGER     shift, and go to state 8
    DOUBLE      shift, and go to state 9
    INT         shift, and go to state 10
    FUNC        shift, and go to state 11
    LONG        shift, and go to state 12
    FLOAT_KEY   shift, and go to state 13
    SHORT       shift, and go to state 14
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16
    NEWLINE     shift, and go to state 17

    decl_arr         go to state 18
    build_func       go to state 19
    func             go to state 20
    decl_var         go to state 21
    type             go to state 22
    decl_func        go to state 23
    name_func        go to state 24
    decl_operations  go to state 25
    sign             go to state 26
    arithm_expr      go to state 27


State 2

    0 $accept: program $end •

    $default  accept


State 3

   22 func: SCAN • "(" scan_params ")"

    "("  shift, and go to state 28


State 4

   23 func: LEN • "(" len_params ")"

    "("  shift, and go to state 29


State 5

   24 func: CMP • "(" cmp_params ")"

    "("  shift, and go to state 30


State 6

   25 func: PRINT • "(" print_params ")"

    "("  shift, and go to state 31


State 7

    9 decl_arr: IDENTIFIER • "=" elements ";"
   48 name_func: IDENTIFIER •
   62 arithm_expr: IDENTIFIER •

    "="  shift, and go to state 32

    "{"       reduce using rule 48 (name_func)
    $default  reduce using rule 62 (arithm_expr)


State 8

   58 sign: INTEGER •

    $default  reduce using rule 58 (sign)


State 9

   42 type: DOUBLE •

    $default  reduce using rule 42 (type)


State 10

   40 type: INT •

    $default  reduce using rule 40 (type)


State 11

   49 name_func: FUNC • name_func params NEWLINE

    IDENTIFIER  shift, and go to state 33
    FUNC        shift, and go to state 11

    name_func  go to state 34


State 12

   44 type: LONG •

    $default  reduce using rule 44 (type)


State 13

   41 type: FLOAT_KEY •

    $default  reduce using rule 41 (type)


State 14

   43 type: SHORT •

    $default  reduce using rule 43 (type)


State 15

   59 sign: "+" • sign

    INTEGER  shift, and go to state 8
    "+"      shift, and go to state 15
    "-"      shift, and go to state 16

    sign  go to state 35


State 16

   60 sign: "-" • sign

    INTEGER  shift, and go to state 8
    "+"      shift, and go to state 15
    "-"      shift, and go to state 16

    sign  go to state 36


State 17

    7 program: program NEWLINE •

    $default  reduce using rule 7 (program)


State 18

    2 program: program decl_arr • NEWLINE
    3        | program decl_arr •

    NEWLINE  shift, and go to state 37

    NEWLINE   [reduce using rule 3 (program)]
    $default  reduce using rule 3 (program)


State 19

    4 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 38


State 20

   21 build_func: func • ";"

    ";"  shift, and go to state 39


State 21

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 40


State 22

   39 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 41

    var  go to state 42


State 23

    5 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 43


State 24

   47 decl_func: name_func • code_func

    "{"  shift, and go to state 44

    code_func  go to state 45


State 25

    6 program: program decl_operations • NEWLINE

    NEWLINE  shift, and go to state 46


State 26

   61 arithm_expr: sign •

    $default  reduce using rule 61 (arithm_expr)


State 27

   57 decl_operations: arithm_expr •
   63 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr • "-" arithm_expr
   65            | arithm_expr • "*" arithm_expr
   66            | arithm_expr • "/" arithm_expr

    "+"  shift, and go to state 47
    "-"  shift, and go to state 48
    "*"  shift, and go to state 49
    "/"  shift, and go to state 50

    $default  reduce using rule 57 (decl_operations)


State 28

   22 func: SCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 51

    scan_params  go to state 52


State 29

   23 func: LEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 53
    STRING      shift, and go to state 54
    "["         shift, and go to state 55

    elements    go to state 56
    len_params  go to state 57


State 30

   24 func: CMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 58
    STRING      shift, and go to state 59

    cmp_params  go to state 60


State 31

   25 func: PRINT "(" • print_params ")"

    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 61
    STRING      shift, and go to state 62
    INTEGER     shift, and go to state 63

    pos_elem      go to state 64
    func          go to state 65
    print_params  go to state 66


State 32

    9 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 55

    elements  go to state 67


State 33

   48 name_func: IDENTIFIER •

    $default  reduce using rule 48 (name_func)


State 34

   49 name_func: FUNC name_func • params NEWLINE

    "("  shift, and go to state 68

    params  go to state 69


State 35

   59 sign: "+" sign •

    $default  reduce using rule 59 (sign)


State 36

   60 sign: "-" sign •

    $default  reduce using rule 60 (sign)


State 37

    2 program: program decl_arr NEWLINE •

    $default  reduce using rule 2 (program)


State 38

    4 program: program build_func NEWLINE •

    $default  reduce using rule 4 (program)


State 39

   21 build_func: func ";" •

    $default  reduce using rule 21 (build_func)


State 40

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 41

   45 var: IDENTIFIER •

    $default  reduce using rule 45 (var)


State 42

   39 decl_var: type var • ";"
   46 var: var • "," var

    ","  shift, and go to state 70
    ";"  shift, and go to state 71


State 43

    5 program: program decl_func NEWLINE •

    $default  reduce using rule 5 (program)


State 44

   54 code_func: "{" • code NEWLINE "}"

    NEWLINE   reduce using rule 55 (code)
    NEWLINE   [reduce using rule 56 (code)]
    $default  reduce using rule 55 (code)

    code  go to state 72


State 45

   47 decl_func: name_func code_func •

    $default  reduce using rule 47 (decl_func)


State 46

    6 program: program decl_operations NEWLINE •

    $default  reduce using rule 6 (program)


State 47

   63 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 73
    INTEGER     shift, and go to state 8
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 26
    arithm_expr  go to state 74


State 48

   64 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 73
    INTEGER     shift, and go to state 8
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 26
    arithm_expr  go to state 75


State 49

   65 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 73
    INTEGER     shift, and go to state 8
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 26
    arithm_expr  go to state 76


State 50

   66 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 73
    INTEGER     shift, and go to state 8
    "+"         shift, and go to state 15
    "-"         shift, and go to state 16

    sign         go to state 26
    arithm_expr  go to state 77


State 51

   26 scan_params: IDENTIFIER •

    $default  reduce using rule 26 (scan_params)


State 52

   22 func: SCAN "(" scan_params • ")"

    ")"  shift, and go to state 78


State 53

   29 len_params: IDENTIFIER •

    $default  reduce using rule 29 (len_params)


State 54

   28 len_params: STRING •

    $default  reduce using rule 28 (len_params)


State 55

   11 elements: "[" • "]"
   12         | "[" • arr_int "]"
   13         | "[" • arr_fl "]"
   14         | "[" • arr_str "]"

    STRING   shift, and go to state 79
    INTEGER  shift, and go to state 80
    FLOAT    shift, and go to state 81
    "]"      shift, and go to state 82

    arr_int  go to state 83
    arr_fl   go to state 84
    arr_str  go to state 85


State 56

   27 len_params: elements •

    $default  reduce using rule 27 (len_params)


State 57

   23 func: LEN "(" len_params • ")"

    ")"  shift, and go to state 86


State 58

   31 cmp_params: IDENTIFIER •

    $default  reduce using rule 31 (cmp_params)


State 59

   30 cmp_params: STRING •

    $default  reduce using rule 30 (cmp_params)


State 60

   24 func: CMP "(" cmp_params • ")"
   32 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 87
    ","  shift, and go to state 88


State 61

   10 pos_elem: IDENTIFIER • "[" INTEGER "]"
   34 print_params: IDENTIFIER •

    "["  shift, and go to state 89

    $default  reduce using rule 34 (print_params)


State 62

   33 print_params: STRING •

    $default  reduce using rule 33 (print_params)


State 63

   35 print_params: INTEGER •

    $default  reduce using rule 35 (print_params)


State 64

   37 print_params: pos_elem •

    $default  reduce using rule 37 (print_params)


State 65

   36 print_params: func •

    $default  reduce using rule 36 (print_params)


State 66

   25 func: PRINT "(" print_params • ")"
   38 print_params: print_params • "," print_params

    ")"  shift, and go to state 90
    ","  shift, and go to state 91


State 67

    9 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 92


State 68

   50 params: "(" • ")"
   51       | "(" • type_params ")"

    DOUBLE     shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 12
    FLOAT_KEY  shift, and go to state 13
    SHORT      shift, and go to state 14
    ")"        shift, and go to state 93

    type         go to state 94
    type_params  go to state 95


State 69

   49 name_func: FUNC name_func params • NEWLINE

    NEWLINE  shift, and go to state 96


State 70

   46 var: var "," • var

    IDENTIFIER  shift, and go to state 41

    var  go to state 97


State 71

   39 decl_var: type var ";" •

    $default  reduce using rule 39 (decl_var)


State 72

   54 code_func: "{" code • NEWLINE "}"

    NEWLINE  shift, and go to state 98


State 73

   62 arithm_expr: IDENTIFIER •

    $default  reduce using rule 62 (arithm_expr)


State 74

   63 arithm_expr: arithm_expr • "+" arithm_expr
   63            | arithm_expr "+" arithm_expr •
   64            | arithm_expr • "-" arithm_expr
   65            | arithm_expr • "*" arithm_expr
   66            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 49
    "/"  shift, and go to state 50

    $default  reduce using rule 63 (arithm_expr)


State 75

   63 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr • "-" arithm_expr
   64            | arithm_expr "-" arithm_expr •
   65            | arithm_expr • "*" arithm_expr
   66            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 49
    "/"  shift, and go to state 50

    $default  reduce using rule 64 (arithm_expr)


State 76

   63 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr • "-" arithm_expr
   65            | arithm_expr • "*" arithm_expr
   65            | arithm_expr "*" arithm_expr •
   66            | arithm_expr • "/" arithm_expr

    $default  reduce using rule 65 (arithm_expr)


State 77

   63 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr • "-" arithm_expr
   65            | arithm_expr • "*" arithm_expr
   66            | arithm_expr • "/" arithm_expr
   66            | arithm_expr "/" arithm_expr •

    $default  reduce using rule 66 (arithm_expr)


State 78

   22 func: SCAN "(" scan_params ")" •

    $default  reduce using rule 22 (func)


State 79

   19 arr_str: STRING •

    $default  reduce using rule 19 (arr_str)


State 80

   15 arr_int: INTEGER •

    $default  reduce using rule 15 (arr_int)


State 81

   17 arr_fl: FLOAT •

    $default  reduce using rule 17 (arr_fl)


State 82

   11 elements: "[" "]" •

    $default  reduce using rule 11 (elements)


State 83

   12 elements: "[" arr_int • "]"
   16 arr_int: arr_int • "," arr_int

    "]"  shift, and go to state 99
    ","  shift, and go to state 100


State 84

   13 elements: "[" arr_fl • "]"
   18 arr_fl: arr_fl • "," arr_fl

    "]"  shift, and go to state 101
    ","  shift, and go to state 102


State 85

   14 elements: "[" arr_str • "]"
   20 arr_str: arr_str • "," arr_str

    "]"  shift, and go to state 103
    ","  shift, and go to state 104


State 86

   23 func: LEN "(" len_params ")" •

    $default  reduce using rule 23 (func)


State 87

   24 func: CMP "(" cmp_params ")" •

    $default  reduce using rule 24 (func)


State 88

   32 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 58
    STRING      shift, and go to state 59

    cmp_params  go to state 105


State 89

   10 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 106


State 90

   25 func: PRINT "(" print_params ")" •

    $default  reduce using rule 25 (func)


State 91

   38 print_params: print_params "," • print_params

    SCAN        shift, and go to state 3
    LEN         shift, and go to state 4
    CMP         shift, and go to state 5
    PRINT       shift, and go to state 6
    IDENTIFIER  shift, and go to state 61
    STRING      shift, and go to state 62
    INTEGER     shift, and go to state 63

    pos_elem      go to state 64
    func          go to state 65
    print_params  go to state 107


State 92

    9 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 9 (decl_arr)


State 93

   50 params: "(" ")" •

    $default  reduce using rule 50 (params)


State 94

   52 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 108


State 95

   51 params: "(" type_params • ")"
   53 type_params: type_params • "," type_params

    ")"  shift, and go to state 109
    ","  shift, and go to state 110


State 96

   49 name_func: FUNC name_func params NEWLINE •

    $default  reduce using rule 49 (name_func)


State 97

   46 var: var • "," var
   46    | var "," var •

    $default  reduce using rule 46 (var)


State 98

   54 code_func: "{" code NEWLINE • "}"

    "}"  shift, and go to state 111


State 99

   12 elements: "[" arr_int "]" •

    $default  reduce using rule 12 (elements)


State 100

   16 arr_int: arr_int "," • arr_int

    INTEGER  shift, and go to state 80

    arr_int  go to state 112


State 101

   13 elements: "[" arr_fl "]" •

    $default  reduce using rule 13 (elements)


State 102

   18 arr_fl: arr_fl "," • arr_fl

    FLOAT  shift, and go to state 81

    arr_fl  go to state 113


State 103

   14 elements: "[" arr_str "]" •

    $default  reduce using rule 14 (elements)


State 104

   20 arr_str: arr_str "," • arr_str

    STRING  shift, and go to state 79

    arr_str  go to state 114


State 105

   32 cmp_params: cmp_params • "," cmp_params
   32           | cmp_params "," cmp_params •

    $default  reduce using rule 32 (cmp_params)


State 106

   10 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 115


State 107

   38 print_params: print_params • "," print_params
   38             | print_params "," print_params •

    $default  reduce using rule 38 (print_params)


State 108

   52 type_params: type IDENTIFIER •

    $default  reduce using rule 52 (type_params)


State 109

   51 params: "(" type_params ")" •

    $default  reduce using rule 51 (params)


State 110

   53 type_params: type_params "," • type_params

    DOUBLE     shift, and go to state 9
    INT        shift, and go to state 10
    LONG       shift, and go to state 12
    FLOAT_KEY  shift, and go to state 13
    SHORT      shift, and go to state 14

    type         go to state 94
    type_params  go to state 116


State 111

   54 code_func: "{" code NEWLINE "}" •

    $default  reduce using rule 54 (code_func)


State 112

   16 arr_int: arr_int • "," arr_int
   16        | arr_int "," arr_int •

    $default  reduce using rule 16 (arr_int)


State 113

   18 arr_fl: arr_fl • "," arr_fl
   18       | arr_fl "," arr_fl •

    $default  reduce using rule 18 (arr_fl)


State 114

   20 arr_str: arr_str • "," arr_str
   20        | arr_str "," arr_str •

    $default  reduce using rule 20 (arr_str)


State 115

   10 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 10 (pos_elem)


State 116

   53 type_params: type_params • "," type_params
   53            | type_params "," type_params •

    $default  reduce using rule 53 (type_params)
