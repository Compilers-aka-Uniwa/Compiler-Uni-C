Terminals unused in grammar

    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "*="
    "--"
    "/="
    "<"
    "!"
    ">"
    "&&"
    "<="
    "%"
    "||"
    ">="
    "=="
    "&"
    "+="
    "!="
    "-="
    "++"
    "\\"
    UNKNOWN


State 3 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program decl_arr NEWLINE
    3        | program build_func NEWLINE
    4        | program decl_func NEWLINE
    5        | program decl_operations NEWLINE
    6        | program NEWLINE
    7        | ε

    8 decl_var: type var ";"

    9 type: INT
   10     | FLOAT_KEY
   11     | DOUBLE
   12     | SHORT
   13     | LONG

   14 var: IDENTIFIER
   15    | var "," var

   16 decl_arr: IDENTIFIER "=" elements ";"

   17 pos_elem: IDENTIFIER "[" INTEGER "]"

   18 elements: "[" "]"
   19         | "[" arr_int "]"
   20         | "[" arr_fl "]"
   21         | "[" arr_str "]"

   22 arr_int: INTEGER
   23        | arr_int "," arr_int

   24 arr_fl: FLOAT
   25       | arr_fl "," arr_fl

   26 arr_str: STRING
   27        | arr_str "," arr_str

   28 build_func: func ";"

   29 func: SCAN "(" scan_params ")"
   30     | LEN "(" len_params ")"
   31     | CMP "(" cmp_params ")"
   32     | PRINT "(" print_params ")"

   33 scan_params: IDENTIFIER

   34 len_params: elements
   35           | STRING
   36           | IDENTIFIER

   37 cmp_params: STRING
   38           | IDENTIFIER
   39           | cmp_params "," cmp_params

   40 print_params: STRING
   41             | IDENTIFIER
   42             | INTEGER
   43             | func
   44             | pos_elem
   45             | print_params "," print_params

   46 decl_func: name_func code_func

   47 name_func: IDENTIFIER
   48          | FUNC name_func params NEWLINE

   49 params: "(" ")"
   50       | "(" type_params ")"

   51 type_params: type IDENTIFIER
   52            | type_params "," type_params

   53 code_func: "{" code NEWLINE "}"

   54 code: ε

   55 decl_operations: arithm_expr
   56                | assign

   57 sign: INTEGER
   58     | "+" sign
   59     | "-" sign

   60 arithm_expr: sign
   61            | IDENTIFIER
   62            | arithm_expr "+" arithm_expr
   63            | arithm_expr "-" arithm_expr
   64            | arithm_expr "*" arithm_expr
   65            | arithm_expr "/" arithm_expr

   66 val: INTEGER
   67    | FLOAT
   68    | STRING
   69    | elements
   70    | val "," val

   71 assign: var "=" val ";"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 14 16 17 33 36 38 41 47 51 61
    STRING (259) 26 35 37 40 68
    INTEGER (260) 17 22 42 57 66
    FLOAT (261) 24 67
    BREAK (262)
    DO (263)
    IF (264)
    SIZEOF (265)
    CASE (266)
    DOUBLE (267) 11
    INT (268) 9
    STRUCT (269)
    FUNC (270) 48
    ELSE (271)
    LONG (272) 13
    SWITCH (273)
    CONST (274)
    FLOAT_KEY (275) 10
    RETURN (276)
    VOID (277)
    CONTINUE (278)
    FOR (279)
    SHORT (280) 12
    WHILE (281)
    "+" (282) 58 62
    "*=" (283)
    "--" (284)
    "-" (285) 59 63
    "/=" (286)
    "<" (287)
    "*" (288) 64
    "!" (289)
    ">" (290)
    "/" (291) 65
    "&&" (292)
    "<=" (293)
    "%" (294)
    "||" (295)
    ">=" (296)
    "=" (297) 16 71
    "==" (298)
    "&" (299)
    "+=" (300)
    "!=" (301)
    "-=" (302)
    "++" (303)
    "(" (304) 29 30 31 32 49 50
    ")" (305) 29 30 31 32 49 50
    "[" (306) 17 18 19 20 21
    "]" (307) 17 18 19 20 21
    "{" (308) 53
    "}" (309) 53
    "," (310) 15 23 25 27 39 45 52 70
    "\\" (311)
    ";" (312) 8 16 28 71
    SCAN (313) 29
    PRINT (314) 32
    LEN (315) 30
    CMP (316) 31
    NEWLINE (317) 1 2 3 4 5 6 48 53
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1 2 3 4 5 6 7
        on right: 0 1 2 3 4 5 6
    decl_var (66)
        on left: 8
        on right: 1
    type (67)
        on left: 9 10 11 12 13
        on right: 8 51
    var (68)
        on left: 14 15
        on right: 8 15 71
    decl_arr (69)
        on left: 16
        on right: 2
    pos_elem (70)
        on left: 17
        on right: 44
    elements (71)
        on left: 18 19 20 21
        on right: 16 34 69
    arr_int (72)
        on left: 22 23
        on right: 19 23
    arr_fl (73)
        on left: 24 25
        on right: 20 25
    arr_str (74)
        on left: 26 27
        on right: 21 27
    build_func (75)
        on left: 28
        on right: 3
    func (76)
        on left: 29 30 31 32
        on right: 28 43
    scan_params (77)
        on left: 33
        on right: 29
    len_params (78)
        on left: 34 35 36
        on right: 30
    cmp_params (79)
        on left: 37 38 39
        on right: 31 39
    print_params (80)
        on left: 40 41 42 43 44 45
        on right: 32 45
    decl_func (81)
        on left: 46
        on right: 4
    name_func (82)
        on left: 47 48
        on right: 46 48
    params (83)
        on left: 49 50
        on right: 48
    type_params (84)
        on left: 51 52
        on right: 50 52
    code_func (85)
        on left: 53
        on right: 46
    code (86)
        on left: 54
        on right: 53
    decl_operations (87)
        on left: 55 56
        on right: 5
    sign (88)
        on left: 57 58 59
        on right: 58 59 60
    arithm_expr (89)
        on left: 60 61 62 63 64 65
        on right: 55 62 63 64 65
    val (90)
        on left: 66 67 68 69 70
        on right: 70 71
    assign (91)
        on left: 71
        on right: 56


State 0

    0 $accept: • program $end

    $default  reduce using rule 7 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • decl_arr NEWLINE
    3        | program • build_func NEWLINE
    4        | program • decl_func NEWLINE
    5        | program • decl_operations NEWLINE
    6        | program • NEWLINE

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    DOUBLE      shift, and go to state 5
    INT         shift, and go to state 6
    FUNC        shift, and go to state 7
    LONG        shift, and go to state 8
    FLOAT_KEY   shift, and go to state 9
    SHORT       shift, and go to state 10
    "+"         shift, and go to state 11
    "-"         shift, and go to state 12
    SCAN        shift, and go to state 13
    PRINT       shift, and go to state 14
    LEN         shift, and go to state 15
    CMP         shift, and go to state 16
    NEWLINE     shift, and go to state 17

    decl_var         go to state 18
    type             go to state 19
    var              go to state 20
    decl_arr         go to state 21
    build_func       go to state 22
    func             go to state 23
    decl_func        go to state 24
    name_func        go to state 25
    decl_operations  go to state 26
    sign             go to state 27
    arithm_expr      go to state 28
    assign           go to state 29


State 2

    0 $accept: program $end •

    $default  accept


State 3

   14 var: IDENTIFIER •
   16 decl_arr: IDENTIFIER • "=" elements ";"
   47 name_func: IDENTIFIER •
   61 arithm_expr: IDENTIFIER •

    "="  shift, and go to state 30

    "="       [reduce using rule 14 (var)]
    "{"       reduce using rule 47 (name_func)
    ","       reduce using rule 14 (var)
    $default  reduce using rule 61 (arithm_expr)


State 4

   57 sign: INTEGER •

    $default  reduce using rule 57 (sign)


State 5

   11 type: DOUBLE •

    $default  reduce using rule 11 (type)


State 6

    9 type: INT •

    $default  reduce using rule 9 (type)


State 7

   48 name_func: FUNC • name_func params NEWLINE

    IDENTIFIER  shift, and go to state 31
    FUNC        shift, and go to state 7

    name_func  go to state 32


State 8

   13 type: LONG •

    $default  reduce using rule 13 (type)


State 9

   10 type: FLOAT_KEY •

    $default  reduce using rule 10 (type)


State 10

   12 type: SHORT •

    $default  reduce using rule 12 (type)


State 11

   58 sign: "+" • sign

    INTEGER  shift, and go to state 4
    "+"      shift, and go to state 11
    "-"      shift, and go to state 12

    sign  go to state 33


State 12

   59 sign: "-" • sign

    INTEGER  shift, and go to state 4
    "+"      shift, and go to state 11
    "-"      shift, and go to state 12

    sign  go to state 34


State 13

   29 func: SCAN • "(" scan_params ")"

    "("  shift, and go to state 35


State 14

   32 func: PRINT • "(" print_params ")"

    "("  shift, and go to state 36


State 15

   30 func: LEN • "(" len_params ")"

    "("  shift, and go to state 37


State 16

   31 func: CMP • "(" cmp_params ")"

    "("  shift, and go to state 38


State 17

    6 program: program NEWLINE •

    $default  reduce using rule 6 (program)


State 18

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 39


State 19

    8 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 40

    var  go to state 41


State 20

   15 var: var • "," var
   71 assign: var • "=" val ";"

    "="  shift, and go to state 42
    ","  shift, and go to state 43


State 21

    2 program: program decl_arr • NEWLINE

    NEWLINE  shift, and go to state 44


State 22

    3 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 45


State 23

   28 build_func: func • ";"

    ";"  shift, and go to state 46


State 24

    4 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 47


State 25

   46 decl_func: name_func • code_func

    "{"  shift, and go to state 48

    code_func  go to state 49


State 26

    5 program: program decl_operations • NEWLINE

    NEWLINE  shift, and go to state 50


State 27

   60 arithm_expr: sign •

    $default  reduce using rule 60 (arithm_expr)


State 28

   55 decl_operations: arithm_expr •
   62 arithm_expr: arithm_expr • "+" arithm_expr
   63            | arithm_expr • "-" arithm_expr
   64            | arithm_expr • "*" arithm_expr
   65            | arithm_expr • "/" arithm_expr

    "+"  shift, and go to state 51
    "-"  shift, and go to state 52
    "*"  shift, and go to state 53
    "/"  shift, and go to state 54

    $default  reduce using rule 55 (decl_operations)


State 29

   56 decl_operations: assign •

    $default  reduce using rule 56 (decl_operations)


State 30

   16 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 55

    elements  go to state 56


State 31

   47 name_func: IDENTIFIER •

    $default  reduce using rule 47 (name_func)


State 32

   48 name_func: FUNC name_func • params NEWLINE

    "("  shift, and go to state 57

    params  go to state 58


State 33

   58 sign: "+" sign •

    $default  reduce using rule 58 (sign)


State 34

   59 sign: "-" sign •

    $default  reduce using rule 59 (sign)


State 35

   29 func: SCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 59

    scan_params  go to state 60


State 36

   32 func: PRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 61
    STRING      shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCAN        shift, and go to state 13
    PRINT       shift, and go to state 14
    LEN         shift, and go to state 15
    CMP         shift, and go to state 16

    pos_elem      go to state 64
    func          go to state 65
    print_params  go to state 66


State 37

   30 func: LEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 67
    STRING      shift, and go to state 68
    "["         shift, and go to state 55

    elements    go to state 69
    len_params  go to state 70


State 38

   31 func: CMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 71
    STRING      shift, and go to state 72

    cmp_params  go to state 73


State 39

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 40

   14 var: IDENTIFIER •

    $default  reduce using rule 14 (var)


State 41

    8 decl_var: type var • ";"
   15 var: var • "," var

    ","  shift, and go to state 43
    ";"  shift, and go to state 74


State 42

   71 assign: var "=" • val ";"

    STRING   shift, and go to state 75
    INTEGER  shift, and go to state 76
    FLOAT    shift, and go to state 77
    "["      shift, and go to state 55

    elements  go to state 78
    val       go to state 79


State 43

   15 var: var "," • var

    IDENTIFIER  shift, and go to state 40

    var  go to state 80


State 44

    2 program: program decl_arr NEWLINE •

    $default  reduce using rule 2 (program)


State 45

    3 program: program build_func NEWLINE •

    $default  reduce using rule 3 (program)


State 46

   28 build_func: func ";" •

    $default  reduce using rule 28 (build_func)


State 47

    4 program: program decl_func NEWLINE •

    $default  reduce using rule 4 (program)


State 48

   53 code_func: "{" • code NEWLINE "}"

    $default  reduce using rule 54 (code)

    code  go to state 81


State 49

   46 decl_func: name_func code_func •

    $default  reduce using rule 46 (decl_func)


State 50

    5 program: program decl_operations NEWLINE •

    $default  reduce using rule 5 (program)


State 51

   62 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 82
    INTEGER     shift, and go to state 4
    "+"         shift, and go to state 11
    "-"         shift, and go to state 12

    sign         go to state 27
    arithm_expr  go to state 83


State 52

   63 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 82
    INTEGER     shift, and go to state 4
    "+"         shift, and go to state 11
    "-"         shift, and go to state 12

    sign         go to state 27
    arithm_expr  go to state 84


State 53

   64 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 82
    INTEGER     shift, and go to state 4
    "+"         shift, and go to state 11
    "-"         shift, and go to state 12

    sign         go to state 27
    arithm_expr  go to state 85


State 54

   65 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 82
    INTEGER     shift, and go to state 4
    "+"         shift, and go to state 11
    "-"         shift, and go to state 12

    sign         go to state 27
    arithm_expr  go to state 86


State 55

   18 elements: "[" • "]"
   19         | "[" • arr_int "]"
   20         | "[" • arr_fl "]"
   21         | "[" • arr_str "]"

    STRING   shift, and go to state 87
    INTEGER  shift, and go to state 88
    FLOAT    shift, and go to state 89
    "]"      shift, and go to state 90

    arr_int  go to state 91
    arr_fl   go to state 92
    arr_str  go to state 93


State 56

   16 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 94


State 57

   49 params: "(" • ")"
   50       | "(" • type_params ")"

    DOUBLE     shift, and go to state 5
    INT        shift, and go to state 6
    LONG       shift, and go to state 8
    FLOAT_KEY  shift, and go to state 9
    SHORT      shift, and go to state 10
    ")"        shift, and go to state 95

    type         go to state 96
    type_params  go to state 97


State 58

   48 name_func: FUNC name_func params • NEWLINE

    NEWLINE  shift, and go to state 98


State 59

   33 scan_params: IDENTIFIER •

    $default  reduce using rule 33 (scan_params)


State 60

   29 func: SCAN "(" scan_params • ")"

    ")"  shift, and go to state 99


State 61

   17 pos_elem: IDENTIFIER • "[" INTEGER "]"
   41 print_params: IDENTIFIER •

    "["  shift, and go to state 100

    $default  reduce using rule 41 (print_params)


State 62

   40 print_params: STRING •

    $default  reduce using rule 40 (print_params)


State 63

   42 print_params: INTEGER •

    $default  reduce using rule 42 (print_params)


State 64

   44 print_params: pos_elem •

    $default  reduce using rule 44 (print_params)


State 65

   43 print_params: func •

    $default  reduce using rule 43 (print_params)


State 66

   32 func: PRINT "(" print_params • ")"
   45 print_params: print_params • "," print_params

    ")"  shift, and go to state 101
    ","  shift, and go to state 102


State 67

   36 len_params: IDENTIFIER •

    $default  reduce using rule 36 (len_params)


State 68

   35 len_params: STRING •

    $default  reduce using rule 35 (len_params)


State 69

   34 len_params: elements •

    $default  reduce using rule 34 (len_params)


State 70

   30 func: LEN "(" len_params • ")"

    ")"  shift, and go to state 103


State 71

   38 cmp_params: IDENTIFIER •

    $default  reduce using rule 38 (cmp_params)


State 72

   37 cmp_params: STRING •

    $default  reduce using rule 37 (cmp_params)


State 73

   31 func: CMP "(" cmp_params • ")"
   39 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 104
    ","  shift, and go to state 105


State 74

    8 decl_var: type var ";" •

    $default  reduce using rule 8 (decl_var)


State 75

   68 val: STRING •

    $default  reduce using rule 68 (val)


State 76

   66 val: INTEGER •

    $default  reduce using rule 66 (val)


State 77

   67 val: FLOAT •

    $default  reduce using rule 67 (val)


State 78

   69 val: elements •

    $default  reduce using rule 69 (val)


State 79

   70 val: val • "," val
   71 assign: var "=" val • ";"

    ","  shift, and go to state 106
    ";"  shift, and go to state 107


State 80

   15 var: var • "," var
   15    | var "," var •

    $default  reduce using rule 15 (var)


State 81

   53 code_func: "{" code • NEWLINE "}"

    NEWLINE  shift, and go to state 108


State 82

   61 arithm_expr: IDENTIFIER •

    $default  reduce using rule 61 (arithm_expr)


State 83

   62 arithm_expr: arithm_expr • "+" arithm_expr
   62            | arithm_expr "+" arithm_expr •
   63            | arithm_expr • "-" arithm_expr
   64            | arithm_expr • "*" arithm_expr
   65            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 53
    "/"  shift, and go to state 54

    $default  reduce using rule 62 (arithm_expr)


State 84

   62 arithm_expr: arithm_expr • "+" arithm_expr
   63            | arithm_expr • "-" arithm_expr
   63            | arithm_expr "-" arithm_expr •
   64            | arithm_expr • "*" arithm_expr
   65            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 53
    "/"  shift, and go to state 54

    $default  reduce using rule 63 (arithm_expr)


State 85

   62 arithm_expr: arithm_expr • "+" arithm_expr
   63            | arithm_expr • "-" arithm_expr
   64            | arithm_expr • "*" arithm_expr
   64            | arithm_expr "*" arithm_expr •
   65            | arithm_expr • "/" arithm_expr

    $default  reduce using rule 64 (arithm_expr)


State 86

   62 arithm_expr: arithm_expr • "+" arithm_expr
   63            | arithm_expr • "-" arithm_expr
   64            | arithm_expr • "*" arithm_expr
   65            | arithm_expr • "/" arithm_expr
   65            | arithm_expr "/" arithm_expr •

    $default  reduce using rule 65 (arithm_expr)


State 87

   26 arr_str: STRING •

    $default  reduce using rule 26 (arr_str)


State 88

   22 arr_int: INTEGER •

    $default  reduce using rule 22 (arr_int)


State 89

   24 arr_fl: FLOAT •

    $default  reduce using rule 24 (arr_fl)


State 90

   18 elements: "[" "]" •

    $default  reduce using rule 18 (elements)


State 91

   19 elements: "[" arr_int • "]"
   23 arr_int: arr_int • "," arr_int

    "]"  shift, and go to state 109
    ","  shift, and go to state 110


State 92

   20 elements: "[" arr_fl • "]"
   25 arr_fl: arr_fl • "," arr_fl

    "]"  shift, and go to state 111
    ","  shift, and go to state 112


State 93

   21 elements: "[" arr_str • "]"
   27 arr_str: arr_str • "," arr_str

    "]"  shift, and go to state 113
    ","  shift, and go to state 114


State 94

   16 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 16 (decl_arr)


State 95

   49 params: "(" ")" •

    $default  reduce using rule 49 (params)


State 96

   51 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 115


State 97

   50 params: "(" type_params • ")"
   52 type_params: type_params • "," type_params

    ")"  shift, and go to state 116
    ","  shift, and go to state 117


State 98

   48 name_func: FUNC name_func params NEWLINE •

    $default  reduce using rule 48 (name_func)


State 99

   29 func: SCAN "(" scan_params ")" •

    $default  reduce using rule 29 (func)


State 100

   17 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 118


State 101

   32 func: PRINT "(" print_params ")" •

    $default  reduce using rule 32 (func)


State 102

   45 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 61
    STRING      shift, and go to state 62
    INTEGER     shift, and go to state 63
    SCAN        shift, and go to state 13
    PRINT       shift, and go to state 14
    LEN         shift, and go to state 15
    CMP         shift, and go to state 16

    pos_elem      go to state 64
    func          go to state 65
    print_params  go to state 119


State 103

   30 func: LEN "(" len_params ")" •

    $default  reduce using rule 30 (func)


State 104

   31 func: CMP "(" cmp_params ")" •

    $default  reduce using rule 31 (func)


State 105

   39 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 71
    STRING      shift, and go to state 72

    cmp_params  go to state 120


State 106

   70 val: val "," • val

    STRING   shift, and go to state 75
    INTEGER  shift, and go to state 76
    FLOAT    shift, and go to state 77
    "["      shift, and go to state 55

    elements  go to state 78
    val       go to state 121


State 107

   71 assign: var "=" val ";" •

    $default  reduce using rule 71 (assign)


State 108

   53 code_func: "{" code NEWLINE • "}"

    "}"  shift, and go to state 122


State 109

   19 elements: "[" arr_int "]" •

    $default  reduce using rule 19 (elements)


State 110

   23 arr_int: arr_int "," • arr_int

    INTEGER  shift, and go to state 88

    arr_int  go to state 123


State 111

   20 elements: "[" arr_fl "]" •

    $default  reduce using rule 20 (elements)


State 112

   25 arr_fl: arr_fl "," • arr_fl

    FLOAT  shift, and go to state 89

    arr_fl  go to state 124


State 113

   21 elements: "[" arr_str "]" •

    $default  reduce using rule 21 (elements)


State 114

   27 arr_str: arr_str "," • arr_str

    STRING  shift, and go to state 87

    arr_str  go to state 125


State 115

   51 type_params: type IDENTIFIER •

    $default  reduce using rule 51 (type_params)


State 116

   50 params: "(" type_params ")" •

    $default  reduce using rule 50 (params)


State 117

   52 type_params: type_params "," • type_params

    DOUBLE     shift, and go to state 5
    INT        shift, and go to state 6
    LONG       shift, and go to state 8
    FLOAT_KEY  shift, and go to state 9
    SHORT      shift, and go to state 10

    type         go to state 96
    type_params  go to state 126


State 118

   17 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 127


State 119

   45 print_params: print_params • "," print_params
   45             | print_params "," print_params •

    $default  reduce using rule 45 (print_params)


State 120

   39 cmp_params: cmp_params • "," cmp_params
   39           | cmp_params "," cmp_params •

    $default  reduce using rule 39 (cmp_params)


State 121

   70 val: val • "," val
   70    | val "," val •

    $default  reduce using rule 70 (val)


State 122

   53 code_func: "{" code NEWLINE "}" •

    $default  reduce using rule 53 (code_func)


State 123

   23 arr_int: arr_int • "," arr_int
   23        | arr_int "," arr_int •

    $default  reduce using rule 23 (arr_int)


State 124

   25 arr_fl: arr_fl • "," arr_fl
   25       | arr_fl "," arr_fl •

    $default  reduce using rule 25 (arr_fl)


State 125

   27 arr_str: arr_str • "," arr_str
   27        | arr_str "," arr_str •

    $default  reduce using rule 27 (arr_str)


State 126

   52 type_params: type_params • "," type_params
   52            | type_params "," type_params •

    $default  reduce using rule 52 (type_params)


State 127

   17 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 17 (pos_elem)
