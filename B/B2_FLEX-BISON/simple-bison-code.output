Nonterminals useless in grammar

    func


Terminals unused in grammar

    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    FUNC
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    "+"
    "*="
    "--"
    "-"
    "/="
    "<"
    "*"
    "!"
    ">"
    "/"
    "&&"
    "<="
    "%"
    "||"
    ">="
    "=="
    "&"
    "+="
    "!="
    "-="
    "++"
    "{"
    "}"
    "\\"
    END_OF_FILE
    UNKNOWN


Rules useless in grammar

   29 func: type func ";"


State 29 conflicts: 1 shift/reduce
State 54 conflicts: 1 shift/reduce
State 55 conflicts: 1 shift/reduce
State 56 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 $@2: ε

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE
    4        | NEWLINE
    5        | ε

    6 decl_arr: IDENTIFIER "=" elements ";"

    7 elements: "[" "]"
    8         | "[" arr_int "]"
    9         | "[" arr_fl "]"
   10         | "[" arr_str "]"

   11 arr_int: INTEGER
   12        | arr_int "," arr_int

   13 arr_fl: FLOAT
   14       | arr_fl "," arr_fl

   15 arr_str: STRING
   16        | arr_str "," arr_str

   17 type: SCAN "(" ")"
   18     | LEN "(" ")"
   19     | CMP "(" ")"
   20     | PRINT "(" ")"

   21 decl_var: type var ";"

   22 type: INT
   23     | FLOAT_KEY
   24     | DOUBLE
   25     | SHORT
   26     | LONG

   27 var: IDENTIFIER
   28    | var "," var


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SCAN (258) 17
    LEN (259) 18
    CMP (260) 19
    PRINT (261) 20
    IDENTIFIER (262) 6 27
    STRING (263) 15
    INTEGER (264) 11
    FLOAT (265) 13
    BREAK (266)
    DO (267)
    IF (268)
    SIZEOF (269)
    CASE (270)
    DOUBLE (271) 24
    INT (272) 22
    STRUCT (273)
    FUNC (274)
    ELSE (275)
    LONG (276) 26
    SWITCH (277)
    CONST (278)
    FLOAT_KEY (279) 23
    RETURN (280)
    VOID (281)
    CONTINUE (282)
    FOR (283)
    SHORT (284) 25
    WHILE (285)
    "+" (286)
    "*=" (287)
    "--" (288)
    "-" (289)
    "/=" (290)
    "<" (291)
    "*" (292)
    "!" (293)
    ">" (294)
    "/" (295)
    "&&" (296)
    "<=" (297)
    "%" (298)
    "||" (299)
    ">=" (300)
    "=" (301) 6
    "==" (302)
    "&" (303)
    "+=" (304)
    "!=" (305)
    "-=" (306)
    "++" (307)
    "(" (308) 17 18 19 20
    ")" (309) 17 18 19 20
    "[" (310) 7 8 9 10
    "]" (311) 7 8 9 10
    "{" (312)
    "}" (313)
    "," (314) 12 14 16 28
    "\\" (315)
    ";" (316) 6 21
    NEWLINE (317) 3 4
    END_OF_FILE (318)
    UNKNOWN (319)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program (66)
        on left: 3 4 5
        on right: 0 3
    $@1 (67)
        on left: 1
        on right: 3
    $@2 (68)
        on left: 2
        on right: 3
    decl_arr (69)
        on left: 6
        on right: 3
    elements (70)
        on left: 7 8 9 10
        on right: 6
    arr_int (71)
        on left: 11 12
        on right: 8 12
    arr_fl (72)
        on left: 13 14
        on right: 9 14
    arr_str (73)
        on left: 15 16
        on right: 10 16
    type (74)
        on left: 17 18 19 20 22 23 24 25 26
        on right: 21
    decl_var (75)
        on left: 21
        on right: 3
    var (76)
        on left: 27 28
        on right: 21 28


State 0

    0 $accept: • program $end

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 5 (program)

    program  go to state 2


State 1

    4 program: NEWLINE •

    $default  reduce using rule 4 (program)


State 2

    0 $accept: program • $end
    3 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE

    $end       shift, and go to state 3
    SCAN       shift, and go to state 4
    LEN        shift, and go to state 5
    CMP        shift, and go to state 6
    PRINT      shift, and go to state 7
    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    LONG       shift, and go to state 10
    FLOAT_KEY  shift, and go to state 11
    SHORT      shift, and go to state 12

    type      go to state 13
    decl_var  go to state 14


State 3

    0 $accept: program $end •

    $default  accept


State 4

   17 type: SCAN • "(" ")"

    "("  shift, and go to state 15


State 5

   18 type: LEN • "(" ")"

    "("  shift, and go to state 16


State 6

   19 type: CMP • "(" ")"

    "("  shift, and go to state 17


State 7

   20 type: PRINT • "(" ")"

    "("  shift, and go to state 18


State 8

   24 type: DOUBLE •

    $default  reduce using rule 24 (type)


State 9

   22 type: INT •

    $default  reduce using rule 22 (type)


State 10

   26 type: LONG •

    $default  reduce using rule 26 (type)


State 11

   23 type: FLOAT_KEY •

    $default  reduce using rule 23 (type)


State 12

   25 type: SHORT •

    $default  reduce using rule 25 (type)


State 13

   21 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 19

    var  go to state 20


State 14

    3 program: program decl_var • NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE

    NEWLINE  shift, and go to state 21


State 15

   17 type: SCAN "(" • ")"

    ")"  shift, and go to state 22


State 16

   18 type: LEN "(" • ")"

    ")"  shift, and go to state 23


State 17

   19 type: CMP "(" • ")"

    ")"  shift, and go to state 24


State 18

   20 type: PRINT "(" • ")"

    ")"  shift, and go to state 25


State 19

   27 var: IDENTIFIER •

    $default  reduce using rule 27 (var)


State 20

   21 decl_var: type var • ";"
   28 var: var • "," var

    ","  shift, and go to state 26
    ";"  shift, and go to state 27


State 21

    3 program: program decl_var NEWLINE • $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE

    $default  reduce using rule 1 ($@1)

    $@1  go to state 28


State 22

   17 type: SCAN "(" ")" •

    $default  reduce using rule 17 (type)


State 23

   18 type: LEN "(" ")" •

    $default  reduce using rule 18 (type)


State 24

   19 type: CMP "(" ")" •

    $default  reduce using rule 19 (type)


State 25

   20 type: PRINT "(" ")" •

    $default  reduce using rule 20 (type)


State 26

   28 var: var "," • var

    IDENTIFIER  shift, and go to state 19

    var  go to state 29


State 27

   21 decl_var: type var ";" •

    $default  reduce using rule 21 (decl_var)


State 28

    3 program: program decl_var NEWLINE $@1 • program decl_arr NEWLINE $@2 program decl_arr NEWLINE

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 5 (program)

    program  go to state 30


State 29

   28 var: var • "," var
   28    | var "," var •

    ","  shift, and go to state 26

    ","       [reduce using rule 28 (var)]
    $default  reduce using rule 28 (var)


State 30

    3 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE
    3        | program decl_var NEWLINE $@1 program • decl_arr NEWLINE $@2 program decl_arr NEWLINE

    SCAN        shift, and go to state 4
    LEN         shift, and go to state 5
    CMP         shift, and go to state 6
    PRINT       shift, and go to state 7
    IDENTIFIER  shift, and go to state 31
    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    LONG        shift, and go to state 10
    FLOAT_KEY   shift, and go to state 11
    SHORT       shift, and go to state 12

    decl_arr  go to state 32
    type      go to state 13
    decl_var  go to state 14


State 31

    6 decl_arr: IDENTIFIER • "=" elements ";"

    "="  shift, and go to state 33


State 32

    3 program: program decl_var NEWLINE $@1 program decl_arr • NEWLINE $@2 program decl_arr NEWLINE

    NEWLINE  shift, and go to state 34


State 33

    6 decl_arr: IDENTIFIER "=" • elements ";"

    "["  shift, and go to state 35

    elements  go to state 36


State 34

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE • $@2 program decl_arr NEWLINE

    $default  reduce using rule 2 ($@2)

    $@2  go to state 37


State 35

    7 elements: "[" • "]"
    8         | "[" • arr_int "]"
    9         | "[" • arr_fl "]"
   10         | "[" • arr_str "]"

    STRING   shift, and go to state 38
    INTEGER  shift, and go to state 39
    FLOAT    shift, and go to state 40
    "]"      shift, and go to state 41

    arr_int  go to state 42
    arr_fl   go to state 43
    arr_str  go to state 44


State 36

    6 decl_arr: IDENTIFIER "=" elements • ";"

    ";"  shift, and go to state 45


State 37

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 • program decl_arr NEWLINE

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 5 (program)

    program  go to state 46


State 38

   15 arr_str: STRING •

    $default  reduce using rule 15 (arr_str)


State 39

   11 arr_int: INTEGER •

    $default  reduce using rule 11 (arr_int)


State 40

   13 arr_fl: FLOAT •

    $default  reduce using rule 13 (arr_fl)


State 41

    7 elements: "[" "]" •

    $default  reduce using rule 7 (elements)


State 42

    8 elements: "[" arr_int • "]"
   12 arr_int: arr_int • "," arr_int

    "]"  shift, and go to state 47
    ","  shift, and go to state 48


State 43

    9 elements: "[" arr_fl • "]"
   14 arr_fl: arr_fl • "," arr_fl

    "]"  shift, and go to state 49
    ","  shift, and go to state 50


State 44

   10 elements: "[" arr_str • "]"
   16 arr_str: arr_str • "," arr_str

    "]"  shift, and go to state 51
    ","  shift, and go to state 52


State 45

    6 decl_arr: IDENTIFIER "=" elements ";" •

    $default  reduce using rule 6 (decl_arr)


State 46

    3 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE
    3        | program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program • decl_arr NEWLINE

    SCAN        shift, and go to state 4
    LEN         shift, and go to state 5
    CMP         shift, and go to state 6
    PRINT       shift, and go to state 7
    IDENTIFIER  shift, and go to state 31
    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    LONG        shift, and go to state 10
    FLOAT_KEY   shift, and go to state 11
    SHORT       shift, and go to state 12

    decl_arr  go to state 53
    type      go to state 13
    decl_var  go to state 14


State 47

    8 elements: "[" arr_int "]" •

    $default  reduce using rule 8 (elements)


State 48

   12 arr_int: arr_int "," • arr_int

    INTEGER  shift, and go to state 39

    arr_int  go to state 54


State 49

    9 elements: "[" arr_fl "]" •

    $default  reduce using rule 9 (elements)


State 50

   14 arr_fl: arr_fl "," • arr_fl

    FLOAT  shift, and go to state 40

    arr_fl  go to state 55


State 51

   10 elements: "[" arr_str "]" •

    $default  reduce using rule 10 (elements)


State 52

   16 arr_str: arr_str "," • arr_str

    STRING  shift, and go to state 38

    arr_str  go to state 56


State 53

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr • NEWLINE

    NEWLINE  shift, and go to state 57


State 54

   12 arr_int: arr_int • "," arr_int
   12        | arr_int "," arr_int •

    ","  shift, and go to state 48

    ","       [reduce using rule 12 (arr_int)]
    $default  reduce using rule 12 (arr_int)


State 55

   14 arr_fl: arr_fl • "," arr_fl
   14       | arr_fl "," arr_fl •

    ","  shift, and go to state 50

    ","       [reduce using rule 14 (arr_fl)]
    $default  reduce using rule 14 (arr_fl)


State 56

   16 arr_str: arr_str • "," arr_str
   16        | arr_str "," arr_str •

    ","  shift, and go to state 52

    ","       [reduce using rule 16 (arr_str)]
    $default  reduce using rule 16 (arr_str)


State 57

    3 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE $@2 program decl_arr NEWLINE •

    $default  reduce using rule 3 (program)
