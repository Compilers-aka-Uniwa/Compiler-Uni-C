Terminals unused in grammar

    BREAK
    DO
    IF
    SIZEOF
    CASE
    STRUCT
    FUNC
    ELSE
    SWITCH
    CONST
    RETURN
    VOID
    CONTINUE
    FOR
    WHILE
    PLUS
    MUL_EQ
    POST_MIN_EQ
    MINUS
    DIV_EQ
    LESS
    MUL
    NOT
    GREATER
    DIV
    AND
    LESS_EQ
    MOD
    OR
    GREATER_EQ
    EQUAL
    ADDR_OP
    PLUS_EQ
    NOT_EQ
    MIN_EQ
    POST_PLUS_EQ
    END_OF_FILE
    OPEN_CURLY_BRACKETS
    CLOSE_CURLY_BRACKETS
    BACKSLASH
    UNKNOWN
    MULT


State 17 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE
    3        | ε

    4 decl_arr: IDENTIFIER ASSIGN_OP elements DELIMITER

    5 elements: OPEN_SQ_BRACKETS value CLOSE_SQ_BRACKETS

    6 value: type_int
    7      | type_fl
    8      | type_str

    9 type_int: INTEGER

   10 type_fl: FLOAT

   11 type_str: STRING

   12 decl_var: type var DELIMITER

   13 type: INT
   14     | FLOAT_KEY
   15     | DOUBLE
   16     | SHORT
   17     | LONG

   18 var: IDENTIFIER
   19    | var COMMA var


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 4 18
    STRING (259) 11
    INTEGER (260) 9
    FLOAT (261) 10
    BREAK (262)
    DO (263)
    IF (264)
    SIZEOF (265)
    CASE (266)
    DOUBLE (267) 15
    INT (268) 13
    STRUCT (269)
    FUNC (270)
    ELSE (271)
    LONG (272) 17
    SWITCH (273)
    CONST (274)
    FLOAT_KEY (275) 14
    RETURN (276)
    VOID (277)
    CONTINUE (278)
    FOR (279)
    SHORT (280) 16
    WHILE (281)
    PLUS (282)
    MUL_EQ (283)
    POST_MIN_EQ (284)
    MINUS (285)
    DIV_EQ (286)
    LESS (287)
    MUL (288)
    NOT (289)
    GREATER (290)
    DIV (291)
    AND (292)
    LESS_EQ (293)
    MOD (294)
    OR (295)
    GREATER_EQ (296)
    ASSIGN_OP (297) 4
    EQUAL (298)
    ADDR_OP (299)
    PLUS_EQ (300)
    NOT_EQ (301)
    MIN_EQ (302)
    POST_PLUS_EQ (303)
    DELIMITER (304) 4 12
    NEWLINE (305) 2
    END_OF_FILE (306)
    OPEN_SQ_BRACKETS (307) 5
    CLOSE_SQ_BRACKETS (308) 5
    OPEN_CURLY_BRACKETS (309)
    CLOSE_CURLY_BRACKETS (310)
    COMMA (311) 19
    BACKSLASH (312)
    UNKNOWN (313)
    MULT (314)


Nonterminals, with rules where they appear

    $accept (60)
        on left: 0
    program (61)
        on left: 2 3
        on right: 0 2
    $@1 (62)
        on left: 1
        on right: 2
    decl_arr (63)
        on left: 4
        on right: 2
    elements (64)
        on left: 5
        on right: 4
    value (65)
        on left: 6 7 8
        on right: 5
    type_int (66)
        on left: 9
        on right: 6
    type_fl (67)
        on left: 10
        on right: 7
    type_str (68)
        on left: 11
        on right: 8
    decl_var (69)
        on left: 12
        on right: 2
    type (70)
        on left: 13 14 15 16 17
        on right: 12
    var (71)
        on left: 18 19
        on right: 12 19


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    2 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE

    $end       shift, and go to state 2
    DOUBLE     shift, and go to state 3
    INT        shift, and go to state 4
    LONG       shift, and go to state 5
    FLOAT_KEY  shift, and go to state 6
    SHORT      shift, and go to state 7

    decl_var  go to state 8
    type      go to state 9


State 2

    0 $accept: program $end •

    $default  accept


State 3

   15 type: DOUBLE •

    $default  reduce using rule 15 (type)


State 4

   13 type: INT •

    $default  reduce using rule 13 (type)


State 5

   17 type: LONG •

    $default  reduce using rule 17 (type)


State 6

   14 type: FLOAT_KEY •

    $default  reduce using rule 14 (type)


State 7

   16 type: SHORT •

    $default  reduce using rule 16 (type)


State 8

    2 program: program decl_var • NEWLINE $@1 program decl_arr NEWLINE

    NEWLINE  shift, and go to state 10


State 9

   12 decl_var: type • var DELIMITER

    IDENTIFIER  shift, and go to state 11

    var  go to state 12


State 10

    2 program: program decl_var NEWLINE • $@1 program decl_arr NEWLINE

    $default  reduce using rule 1 ($@1)

    $@1  go to state 13


State 11

   18 var: IDENTIFIER •

    $default  reduce using rule 18 (var)


State 12

   12 decl_var: type var • DELIMITER
   19 var: var • COMMA var

    DELIMITER  shift, and go to state 14
    COMMA      shift, and go to state 15


State 13

    2 program: program decl_var NEWLINE $@1 • program decl_arr NEWLINE

    $default  reduce using rule 3 (program)

    program  go to state 16


State 14

   12 decl_var: type var DELIMITER •

    $default  reduce using rule 12 (decl_var)


State 15

   19 var: var COMMA • var

    IDENTIFIER  shift, and go to state 11

    var  go to state 17


State 16

    2 program: program • decl_var NEWLINE $@1 program decl_arr NEWLINE
    2        | program decl_var NEWLINE $@1 program • decl_arr NEWLINE

    IDENTIFIER  shift, and go to state 18
    DOUBLE      shift, and go to state 3
    INT         shift, and go to state 4
    LONG        shift, and go to state 5
    FLOAT_KEY   shift, and go to state 6
    SHORT       shift, and go to state 7

    decl_arr  go to state 19
    decl_var  go to state 8
    type      go to state 9


State 17

   19 var: var • COMMA var
   19    | var COMMA var •

    COMMA  shift, and go to state 15

    COMMA     [reduce using rule 19 (var)]
    $default  reduce using rule 19 (var)


State 18

    4 decl_arr: IDENTIFIER • ASSIGN_OP elements DELIMITER

    ASSIGN_OP  shift, and go to state 20


State 19

    2 program: program decl_var NEWLINE $@1 program decl_arr • NEWLINE

    NEWLINE  shift, and go to state 21


State 20

    4 decl_arr: IDENTIFIER ASSIGN_OP • elements DELIMITER

    OPEN_SQ_BRACKETS  shift, and go to state 22

    elements  go to state 23


State 21

    2 program: program decl_var NEWLINE $@1 program decl_arr NEWLINE •

    $default  reduce using rule 2 (program)


State 22

    5 elements: OPEN_SQ_BRACKETS • value CLOSE_SQ_BRACKETS

    STRING   shift, and go to state 24
    INTEGER  shift, and go to state 25
    FLOAT    shift, and go to state 26

    value     go to state 27
    type_int  go to state 28
    type_fl   go to state 29
    type_str  go to state 30


State 23

    4 decl_arr: IDENTIFIER ASSIGN_OP elements • DELIMITER

    DELIMITER  shift, and go to state 31


State 24

   11 type_str: STRING •

    $default  reduce using rule 11 (type_str)


State 25

    9 type_int: INTEGER •

    $default  reduce using rule 9 (type_int)


State 26

   10 type_fl: FLOAT •

    $default  reduce using rule 10 (type_fl)


State 27

    5 elements: OPEN_SQ_BRACKETS value • CLOSE_SQ_BRACKETS

    CLOSE_SQ_BRACKETS  shift, and go to state 32


State 28

    6 value: type_int •

    $default  reduce using rule 6 (value)


State 29

    7 value: type_fl •

    $default  reduce using rule 7 (value)


State 30

    8 value: type_str •

    $default  reduce using rule 8 (value)


State 31

    4 decl_arr: IDENTIFIER ASSIGN_OP elements DELIMITER •

    $default  reduce using rule 4 (decl_arr)


State 32

    5 elements: OPEN_SQ_BRACKETS value CLOSE_SQ_BRACKETS •

    $default  reduce using rule 5 (elements)
