Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    SFOR
    "*="
    "--"
    "/="
    "!"
    "&&"
    "%"
    "||"
    "&"
    "+="
    "-="
    "++"
    "\\"
    UNKNOWN


State 3 conflicts: 1 reduce/reduce
State 4 conflicts: 1 reduce/reduce
State 5 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_var NEWLINE
    2        | program build_func NEWLINE
    3        | program decl_func NEWLINE
    4        | program decl_ops NEWLINE
    5        | program decl_statement NEWLINE
    6        | program NEWLINE
    7        | ε

    8 decl_var: type var ";"

    9 type: SINT
   10     | SFLOAT
   11     | SDOUBLE
   12     | SSHORT
   13     | SLONG

   14 var: IDENTIFIER
   15    | var "," var

   16 pos_elem: IDENTIFIER "[" INTEGER "]"

   17 arr_elements: "[" "]"
   18             | "[" integ "]"
   19             | "[" fl "]"
   20             | "[" str "]"

   21 integ: INTEGER
   22      | integ "," integ

   23 fl: FLOAT
   24   | fl "," fl

   25 str: STRING
   26    | str "," str

   27 build_func: func ";"

   28 func: SSCAN "(" scan_params ")"
   29     | SLEN "(" len_params ")"
   30     | SCMP "(" cmp_params ")"
   31     | SPRINT "(" print_params ")"

   32 scan_params: IDENTIFIER

   33 len_params: arr_elements
   34           | STRING
   35           | IDENTIFIER

   36 cmp_params: STRING
   37           | IDENTIFIER
   38           | cmp_params "," cmp_params

   39 print_params: STRING
   40             | IDENTIFIER
   41             | INTEGER
   42             | FLOAT
   43             | func
   44             | pos_elem
   45             | print_params "," print_params

   46 decl_func: name_func code_func

   47 name_func: IDENTIFIER
   48          | SFUNC name_func params NEWLINE

   49 params: "(" ")"
   50       | "(" type_params ")"

   51 type_params: type IDENTIFIER
   52            | type_params "," type_params

   53 code_func: "{" NEWLINE "}"

   54 decl_ops: arithm_expr
   55         | assign
   56         | cmp_expr
   57         | merge_arr

   58 sign: INTEGER
   59     | FLOAT
   60     | "+" sign
   61     | "-" sign

   62 arithm_expr: sign
   63            | IDENTIFIER
   64            | arithm_expr "+" arithm_expr
   65            | arithm_expr "-" arithm_expr
   66            | arithm_expr "*" arithm_expr
   67            | arithm_expr "/" arithm_expr

   68 assign: var "=" val ";"

   69 val: INTEGER
   70    | FLOAT
   71    | STRING
   72    | arr_elements
   73    | val "," val

   74 cmp_expr: INTEGER
   75         | FLOAT
   76         | IDENTIFIER
   77         | cmp_expr ">" cmp_expr
   78         | cmp_expr "<" cmp_expr
   79         | cmp_expr "<=" cmp_expr
   80         | cmp_expr ">=" cmp_expr
   81         | cmp_expr "==" cmp_expr
   82         | cmp_expr "!=" cmp_expr

   83 merge_arr: arr_elements "+" arr_elements

   84 decl_statement: if_statement
   85               | while_statement

   86 if_statement: SIF "(" condition ")" statement
   87             | SIF "(" condition ")" "{" statements "}"

   88 condition: cmp_expr

   89 statement: SPRINT "(" print_params ")" ";"

   90 statements: statement
   91           | statements statement

   92 while_statement: SWHILE "(" condition ")" statement
   93                | SWHILE "(" condition ")" "{" statements "}"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <sval> (258) 14 16 32 35 37 40 47 51 63 76
    STRING <sval> (259) 25 34 36 39 71
    INTEGER <ival> (260) 16 21 41 58 69 74
    FLOAT <fval> (261) 23 42 59 70 75
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 86 87
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 11
    SINT <sval> (268) 9
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 48
    SELSE <sval> (271)
    SLONG <sval> (272) 13
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 10
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279)
    SSHORT <sval> (280) 12
    SWHILE <sval> (281) 92 93
    "+" (282) 60 64 83
    "*=" (283)
    "--" (284)
    "-" (285) 61 65
    "/=" (286)
    "<" (287) 78
    "*" (288) 66
    "!" (289)
    ">" (290) 77
    "/" (291) 67
    "&&" (292)
    "<=" (293) 79
    "%" (294)
    "||" (295)
    ">=" (296) 80
    "=" (297) 68
    "==" (298) 81
    "&" (299)
    "+=" (300)
    "!=" (301) 82
    "-=" (302)
    "++" (303)
    "(" (304) 28 29 30 31 49 50 86 87 89 92 93
    ")" (305) 28 29 30 31 49 50 86 87 89 92 93
    "[" (306) 16 17 18 19 20
    "]" (307) 16 17 18 19 20
    "{" (308) 53 87 93
    "}" (309) 53 87 93
    "," (310) 15 22 24 26 38 45 52 73
    "\\" (311)
    ";" (312) 8 27 68 89
    SSCAN (313) 28
    SPRINT (314) 31 89
    SLEN (315) 29
    SCMP (316) 30
    NEWLINE (317) 1 2 3 4 5 6 48 53
    UNKNOWN (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program <sval> (65)
        on left: 1 2 3 4 5 6 7
        on right: 0 1 2 3 4 5 6
    decl_var <sval> (66)
        on left: 8
        on right: 1
    type <sval> (67)
        on left: 9 10 11 12 13
        on right: 8 51
    var <sval> (68)
        on left: 14 15
        on right: 8 15 68
    pos_elem <sval> (69)
        on left: 16
        on right: 44
    arr_elements <sval> (70)
        on left: 17 18 19 20
        on right: 33 72 83
    integ <sval> (71)
        on left: 21 22
        on right: 18 22
    fl <sval> (72)
        on left: 23 24
        on right: 19 24
    str <sval> (73)
        on left: 25 26
        on right: 20 26
    build_func <sval> (74)
        on left: 27
        on right: 2
    func <sval> (75)
        on left: 28 29 30 31
        on right: 27 43
    scan_params <sval> (76)
        on left: 32
        on right: 28
    len_params <sval> (77)
        on left: 33 34 35
        on right: 29
    cmp_params <sval> (78)
        on left: 36 37 38
        on right: 30 38
    print_params <sval> (79)
        on left: 39 40 41 42 43 44 45
        on right: 31 45 89
    decl_func <sval> (80)
        on left: 46
        on right: 3
    name_func <sval> (81)
        on left: 47 48
        on right: 46 48
    params <sval> (82)
        on left: 49 50
        on right: 48
    type_params <sval> (83)
        on left: 51 52
        on right: 50 52
    code_func <sval> (84)
        on left: 53
        on right: 46
    decl_ops <sval> (85)
        on left: 54 55 56 57
        on right: 4
    sign <sval> (86)
        on left: 58 59 60 61
        on right: 60 61 62
    arithm_expr <sval> (87)
        on left: 62 63 64 65 66 67
        on right: 54 64 65 66 67
    assign <sval> (88)
        on left: 68
        on right: 55
    val <sval> (89)
        on left: 69 70 71 72 73
        on right: 68 73
    cmp_expr <sval> (90)
        on left: 74 75 76 77 78 79 80 81 82
        on right: 56 77 78 79 80 81 82 88
    merge_arr <sval> (91)
        on left: 83
        on right: 57
    decl_statement <sval> (92)
        on left: 84 85
        on right: 5
    if_statement <sval> (93)
        on left: 86 87
        on right: 84
    condition <sval> (94)
        on left: 88
        on right: 86 87 92 93
    statement <sval> (95)
        on left: 89
        on right: 86 90 91 92
    statements <sval> (96)
        on left: 90 91
        on right: 87 91 93
    while_statement (97)
        on left: 92 93
        on right: 85


State 0

    0 $accept: • program $end

    $default  reduce using rule 7 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_var NEWLINE
    2        | program • build_func NEWLINE
    3        | program • decl_func NEWLINE
    4        | program • decl_ops NEWLINE
    5        | program • decl_statement NEWLINE
    6        | program • NEWLINE

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SSHORT      shift, and go to state 12
    SWHILE      shift, and go to state 13
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15
    "["         shift, and go to state 16
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20
    NEWLINE     shift, and go to state 21

    decl_var         go to state 22
    type             go to state 23
    var              go to state 24
    arr_elements     go to state 25
    build_func       go to state 26
    func             go to state 27
    decl_func        go to state 28
    name_func        go to state 29
    decl_ops         go to state 30
    sign             go to state 31
    arithm_expr      go to state 32
    assign           go to state 33
    cmp_expr         go to state 34
    merge_arr        go to state 35
    decl_statement   go to state 36
    if_statement     go to state 37
    while_statement  go to state 38


State 2

    0 $accept: program $end •

    $default  accept


State 3

   14 var: IDENTIFIER •
   47 name_func: IDENTIFIER •
   63 arithm_expr: IDENTIFIER •
   76 cmp_expr: IDENTIFIER •

    "+"       reduce using rule 63 (arithm_expr)
    "-"       reduce using rule 63 (arithm_expr)
    "*"       reduce using rule 63 (arithm_expr)
    "/"       reduce using rule 63 (arithm_expr)
    "="       reduce using rule 14 (var)
    "{"       reduce using rule 47 (name_func)
    ","       reduce using rule 14 (var)
    NEWLINE   reduce using rule 63 (arithm_expr)
    NEWLINE   [reduce using rule 76 (cmp_expr)]
    $default  reduce using rule 76 (cmp_expr)


State 4

   58 sign: INTEGER •
   74 cmp_expr: INTEGER •

    "+"       reduce using rule 58 (sign)
    "-"       reduce using rule 58 (sign)
    "*"       reduce using rule 58 (sign)
    "/"       reduce using rule 58 (sign)
    NEWLINE   reduce using rule 58 (sign)
    NEWLINE   [reduce using rule 74 (cmp_expr)]
    $default  reduce using rule 74 (cmp_expr)


State 5

   59 sign: FLOAT •
   75 cmp_expr: FLOAT •

    "+"       reduce using rule 59 (sign)
    "-"       reduce using rule 59 (sign)
    "*"       reduce using rule 59 (sign)
    "/"       reduce using rule 59 (sign)
    NEWLINE   reduce using rule 59 (sign)
    NEWLINE   [reduce using rule 75 (cmp_expr)]
    $default  reduce using rule 75 (cmp_expr)


State 6

   86 if_statement: SIF • "(" condition ")" statement
   87             | SIF • "(" condition ")" "{" statements "}"

    "("  shift, and go to state 39


State 7

   11 type: SDOUBLE •

    $default  reduce using rule 11 (type)


State 8

    9 type: SINT •

    $default  reduce using rule 9 (type)


State 9

   48 name_func: SFUNC • name_func params NEWLINE

    IDENTIFIER  shift, and go to state 40
    SFUNC       shift, and go to state 9

    name_func  go to state 41


State 10

   13 type: SLONG •

    $default  reduce using rule 13 (type)


State 11

   10 type: SFLOAT •

    $default  reduce using rule 10 (type)


State 12

   12 type: SSHORT •

    $default  reduce using rule 12 (type)


State 13

   92 while_statement: SWHILE • "(" condition ")" statement
   93                | SWHILE • "(" condition ")" "{" statements "}"

    "("  shift, and go to state 42


State 14

   60 sign: "+" • sign

    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    "+"      shift, and go to state 14
    "-"      shift, and go to state 15

    sign  go to state 45


State 15

   61 sign: "-" • sign

    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    "+"      shift, and go to state 14
    "-"      shift, and go to state 15

    sign  go to state 46


State 16

   17 arr_elements: "[" • "]"
   18             | "[" • integ "]"
   19             | "[" • fl "]"
   20             | "[" • str "]"

    STRING   shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    "]"      shift, and go to state 50

    integ  go to state 51
    fl     go to state 52
    str    go to state 53


State 17

   28 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 54


State 18

   31 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 55


State 19

   29 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 56


State 20

   30 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 57


State 21

    6 program: program NEWLINE •

    $default  reduce using rule 6 (program)


State 22

    1 program: program decl_var • NEWLINE

    NEWLINE  shift, and go to state 58


State 23

    8 decl_var: type • var ";"

    IDENTIFIER  shift, and go to state 59

    var  go to state 60


State 24

   15 var: var • "," var
   68 assign: var • "=" val ";"

    "="  shift, and go to state 61
    ","  shift, and go to state 62


State 25

   83 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 63


State 26

    2 program: program build_func • NEWLINE

    NEWLINE  shift, and go to state 64


State 27

   27 build_func: func • ";"

    ";"  shift, and go to state 65


State 28

    3 program: program decl_func • NEWLINE

    NEWLINE  shift, and go to state 66


State 29

   46 decl_func: name_func • code_func

    "{"  shift, and go to state 67

    code_func  go to state 68


State 30

    4 program: program decl_ops • NEWLINE

    NEWLINE  shift, and go to state 69


State 31

   62 arithm_expr: sign •

    $default  reduce using rule 62 (arithm_expr)


State 32

   54 decl_ops: arithm_expr •
   64 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr • "-" arithm_expr
   66            | arithm_expr • "*" arithm_expr
   67            | arithm_expr • "/" arithm_expr

    "+"  shift, and go to state 70
    "-"  shift, and go to state 71
    "*"  shift, and go to state 72
    "/"  shift, and go to state 73

    $default  reduce using rule 54 (decl_ops)


State 33

   55 decl_ops: assign •

    $default  reduce using rule 55 (decl_ops)


State 34

   56 decl_ops: cmp_expr •
   77 cmp_expr: cmp_expr • ">" cmp_expr
   78         | cmp_expr • "<" cmp_expr
   79         | cmp_expr • "<=" cmp_expr
   80         | cmp_expr • ">=" cmp_expr
   81         | cmp_expr • "==" cmp_expr
   82         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 74
    ">"   shift, and go to state 75
    "<="  shift, and go to state 76
    ">="  shift, and go to state 77
    "=="  shift, and go to state 78
    "!="  shift, and go to state 79

    $default  reduce using rule 56 (decl_ops)


State 35

   57 decl_ops: merge_arr •

    $default  reduce using rule 57 (decl_ops)


State 36

    5 program: program decl_statement • NEWLINE

    NEWLINE  shift, and go to state 80


State 37

   84 decl_statement: if_statement •

    $default  reduce using rule 84 (decl_statement)


State 38

   85 decl_statement: while_statement •

    $default  reduce using rule 85 (decl_statement)


State 39

   86 if_statement: SIF "(" • condition ")" statement
   87             | SIF "(" • condition ")" "{" statements "}"

    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 82
    FLOAT       shift, and go to state 83

    cmp_expr   go to state 84
    condition  go to state 85


State 40

   47 name_func: IDENTIFIER •

    $default  reduce using rule 47 (name_func)


State 41

   48 name_func: SFUNC name_func • params NEWLINE

    "("  shift, and go to state 86

    params  go to state 87


State 42

   92 while_statement: SWHILE "(" • condition ")" statement
   93                | SWHILE "(" • condition ")" "{" statements "}"

    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 82
    FLOAT       shift, and go to state 83

    cmp_expr   go to state 84
    condition  go to state 88


State 43

   58 sign: INTEGER •

    $default  reduce using rule 58 (sign)


State 44

   59 sign: FLOAT •

    $default  reduce using rule 59 (sign)


State 45

   60 sign: "+" sign •

    $default  reduce using rule 60 (sign)


State 46

   61 sign: "-" sign •

    $default  reduce using rule 61 (sign)


State 47

   25 str: STRING •

    $default  reduce using rule 25 (str)


State 48

   21 integ: INTEGER •

    $default  reduce using rule 21 (integ)


State 49

   23 fl: FLOAT •

    $default  reduce using rule 23 (fl)


State 50

   17 arr_elements: "[" "]" •

    $default  reduce using rule 17 (arr_elements)


State 51

   18 arr_elements: "[" integ • "]"
   22 integ: integ • "," integ

    "]"  shift, and go to state 89
    ","  shift, and go to state 90


State 52

   19 arr_elements: "[" fl • "]"
   24 fl: fl • "," fl

    "]"  shift, and go to state 91
    ","  shift, and go to state 92


State 53

   20 arr_elements: "[" str • "]"
   26 str: str • "," str

    "]"  shift, and go to state 93
    ","  shift, and go to state 94


State 54

   28 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 95

    scan_params  go to state 96


State 55

   31 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 97
    STRING      shift, and go to state 98
    INTEGER     shift, and go to state 99
    FLOAT       shift, and go to state 100
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    pos_elem      go to state 101
    func          go to state 102
    print_params  go to state 103


State 56

   29 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 104
    STRING      shift, and go to state 105
    "["         shift, and go to state 16

    arr_elements  go to state 106
    len_params    go to state 107


State 57

   30 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109

    cmp_params  go to state 110


State 58

    1 program: program decl_var NEWLINE •

    $default  reduce using rule 1 (program)


State 59

   14 var: IDENTIFIER •

    $default  reduce using rule 14 (var)


State 60

    8 decl_var: type var • ";"
   15 var: var • "," var

    ","  shift, and go to state 62
    ";"  shift, and go to state 111


State 61

   68 assign: var "=" • val ";"

    STRING   shift, and go to state 112
    INTEGER  shift, and go to state 113
    FLOAT    shift, and go to state 114
    "["      shift, and go to state 16

    arr_elements  go to state 115
    val           go to state 116


State 62

   15 var: var "," • var

    IDENTIFIER  shift, and go to state 59

    var  go to state 117


State 63

   83 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 16

    arr_elements  go to state 118


State 64

    2 program: program build_func NEWLINE •

    $default  reduce using rule 2 (program)


State 65

   27 build_func: func ";" •

    $default  reduce using rule 27 (build_func)


State 66

    3 program: program decl_func NEWLINE •

    $default  reduce using rule 3 (program)


State 67

   53 code_func: "{" • NEWLINE "}"

    NEWLINE  shift, and go to state 119


State 68

   46 decl_func: name_func code_func •

    $default  reduce using rule 46 (decl_func)


State 69

    4 program: program decl_ops NEWLINE •

    $default  reduce using rule 4 (program)


State 70

   64 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 120
    INTEGER     shift, and go to state 43
    FLOAT       shift, and go to state 44
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15

    sign         go to state 31
    arithm_expr  go to state 121


State 71

   65 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 120
    INTEGER     shift, and go to state 43
    FLOAT       shift, and go to state 44
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15

    sign         go to state 31
    arithm_expr  go to state 122


State 72

   66 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 120
    INTEGER     shift, and go to state 43
    FLOAT       shift, and go to state 44
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15

    sign         go to state 31
    arithm_expr  go to state 123


State 73

   67 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 120
    INTEGER     shift, and go to state 43
    FLOAT       shift, and go to state 44
    "+"         shift, and go to state 14
    "-"         shift, and go to state 15

    sign         go to state 31
    arithm_expr  go to state 124


State 74

   78 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 82
    FLOAT       shift, and go to state 83

    cmp_expr  go to state 125


State 75

   77 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 82
    FLOAT       shift, and go to state 83

    cmp_expr  go to state 126


State 76

   79 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 82
    FLOAT       shift, and go to state 83

    cmp_expr  go to state 127


State 77

   80 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 82
    FLOAT       shift, and go to state 83

    cmp_expr  go to state 128


State 78

   81 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 82
    FLOAT       shift, and go to state 83

    cmp_expr  go to state 129


State 79

   82 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 82
    FLOAT       shift, and go to state 83

    cmp_expr  go to state 130


State 80

    5 program: program decl_statement NEWLINE •

    $default  reduce using rule 5 (program)


State 81

   76 cmp_expr: IDENTIFIER •

    $default  reduce using rule 76 (cmp_expr)


State 82

   74 cmp_expr: INTEGER •

    $default  reduce using rule 74 (cmp_expr)


State 83

   75 cmp_expr: FLOAT •

    $default  reduce using rule 75 (cmp_expr)


State 84

   77 cmp_expr: cmp_expr • ">" cmp_expr
   78         | cmp_expr • "<" cmp_expr
   79         | cmp_expr • "<=" cmp_expr
   80         | cmp_expr • ">=" cmp_expr
   81         | cmp_expr • "==" cmp_expr
   82         | cmp_expr • "!=" cmp_expr
   88 condition: cmp_expr •

    "<"   shift, and go to state 74
    ">"   shift, and go to state 75
    "<="  shift, and go to state 76
    ">="  shift, and go to state 77
    "=="  shift, and go to state 78
    "!="  shift, and go to state 79

    $default  reduce using rule 88 (condition)


State 85

   86 if_statement: SIF "(" condition • ")" statement
   87             | SIF "(" condition • ")" "{" statements "}"

    ")"  shift, and go to state 131


State 86

   49 params: "(" • ")"
   50       | "(" • type_params ")"

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 12
    ")"      shift, and go to state 132

    type         go to state 133
    type_params  go to state 134


State 87

   48 name_func: SFUNC name_func params • NEWLINE

    NEWLINE  shift, and go to state 135


State 88

   92 while_statement: SWHILE "(" condition • ")" statement
   93                | SWHILE "(" condition • ")" "{" statements "}"

    ")"  shift, and go to state 136


State 89

   18 arr_elements: "[" integ "]" •

    $default  reduce using rule 18 (arr_elements)


State 90

   22 integ: integ "," • integ

    INTEGER  shift, and go to state 48

    integ  go to state 137


State 91

   19 arr_elements: "[" fl "]" •

    $default  reduce using rule 19 (arr_elements)


State 92

   24 fl: fl "," • fl

    FLOAT  shift, and go to state 49

    fl  go to state 138


State 93

   20 arr_elements: "[" str "]" •

    $default  reduce using rule 20 (arr_elements)


State 94

   26 str: str "," • str

    STRING  shift, and go to state 47

    str  go to state 139


State 95

   32 scan_params: IDENTIFIER •

    $default  reduce using rule 32 (scan_params)


State 96

   28 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 140


State 97

   16 pos_elem: IDENTIFIER • "[" INTEGER "]"
   40 print_params: IDENTIFIER •

    "["  shift, and go to state 141

    $default  reduce using rule 40 (print_params)


State 98

   39 print_params: STRING •

    $default  reduce using rule 39 (print_params)


State 99

   41 print_params: INTEGER •

    $default  reduce using rule 41 (print_params)


State 100

   42 print_params: FLOAT •

    $default  reduce using rule 42 (print_params)


State 101

   44 print_params: pos_elem •

    $default  reduce using rule 44 (print_params)


State 102

   43 print_params: func •

    $default  reduce using rule 43 (print_params)


State 103

   31 func: SPRINT "(" print_params • ")"
   45 print_params: print_params • "," print_params

    ")"  shift, and go to state 142
    ","  shift, and go to state 143


State 104

   35 len_params: IDENTIFIER •

    $default  reduce using rule 35 (len_params)


State 105

   34 len_params: STRING •

    $default  reduce using rule 34 (len_params)


State 106

   33 len_params: arr_elements •

    $default  reduce using rule 33 (len_params)


State 107

   29 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 144


State 108

   37 cmp_params: IDENTIFIER •

    $default  reduce using rule 37 (cmp_params)


State 109

   36 cmp_params: STRING •

    $default  reduce using rule 36 (cmp_params)


State 110

   30 func: SCMP "(" cmp_params • ")"
   38 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 145
    ","  shift, and go to state 146


State 111

    8 decl_var: type var ";" •

    $default  reduce using rule 8 (decl_var)


State 112

   71 val: STRING •

    $default  reduce using rule 71 (val)


State 113

   69 val: INTEGER •

    $default  reduce using rule 69 (val)


State 114

   70 val: FLOAT •

    $default  reduce using rule 70 (val)


State 115

   72 val: arr_elements •

    $default  reduce using rule 72 (val)


State 116

   68 assign: var "=" val • ";"
   73 val: val • "," val

    ","  shift, and go to state 147
    ";"  shift, and go to state 148


State 117

   15 var: var • "," var
   15    | var "," var •

    $default  reduce using rule 15 (var)


State 118

   83 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 83 (merge_arr)


State 119

   53 code_func: "{" NEWLINE • "}"

    "}"  shift, and go to state 149


State 120

   63 arithm_expr: IDENTIFIER •

    $default  reduce using rule 63 (arithm_expr)


State 121

   64 arithm_expr: arithm_expr • "+" arithm_expr
   64            | arithm_expr "+" arithm_expr •
   65            | arithm_expr • "-" arithm_expr
   66            | arithm_expr • "*" arithm_expr
   67            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 72
    "/"  shift, and go to state 73

    $default  reduce using rule 64 (arithm_expr)


State 122

   64 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr • "-" arithm_expr
   65            | arithm_expr "-" arithm_expr •
   66            | arithm_expr • "*" arithm_expr
   67            | arithm_expr • "/" arithm_expr

    "*"  shift, and go to state 72
    "/"  shift, and go to state 73

    $default  reduce using rule 65 (arithm_expr)


State 123

   64 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr • "-" arithm_expr
   66            | arithm_expr • "*" arithm_expr
   66            | arithm_expr "*" arithm_expr •
   67            | arithm_expr • "/" arithm_expr

    $default  reduce using rule 66 (arithm_expr)


State 124

   64 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr • "-" arithm_expr
   66            | arithm_expr • "*" arithm_expr
   67            | arithm_expr • "/" arithm_expr
   67            | arithm_expr "/" arithm_expr •

    $default  reduce using rule 67 (arithm_expr)


State 125

   77 cmp_expr: cmp_expr • ">" cmp_expr
   78         | cmp_expr • "<" cmp_expr
   78         | cmp_expr "<" cmp_expr •
   79         | cmp_expr • "<=" cmp_expr
   80         | cmp_expr • ">=" cmp_expr
   81         | cmp_expr • "==" cmp_expr
   82         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 78 (cmp_expr)


State 126

   77 cmp_expr: cmp_expr • ">" cmp_expr
   77         | cmp_expr ">" cmp_expr •
   78         | cmp_expr • "<" cmp_expr
   79         | cmp_expr • "<=" cmp_expr
   80         | cmp_expr • ">=" cmp_expr
   81         | cmp_expr • "==" cmp_expr
   82         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 77 (cmp_expr)


State 127

   77 cmp_expr: cmp_expr • ">" cmp_expr
   78         | cmp_expr • "<" cmp_expr
   79         | cmp_expr • "<=" cmp_expr
   79         | cmp_expr "<=" cmp_expr •
   80         | cmp_expr • ">=" cmp_expr
   81         | cmp_expr • "==" cmp_expr
   82         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 79 (cmp_expr)


State 128

   77 cmp_expr: cmp_expr • ">" cmp_expr
   78         | cmp_expr • "<" cmp_expr
   79         | cmp_expr • "<=" cmp_expr
   80         | cmp_expr • ">=" cmp_expr
   80         | cmp_expr ">=" cmp_expr •
   81         | cmp_expr • "==" cmp_expr
   82         | cmp_expr • "!=" cmp_expr

    $default  reduce using rule 80 (cmp_expr)


State 129

   77 cmp_expr: cmp_expr • ">" cmp_expr
   78         | cmp_expr • "<" cmp_expr
   79         | cmp_expr • "<=" cmp_expr
   80         | cmp_expr • ">=" cmp_expr
   81         | cmp_expr • "==" cmp_expr
   81         | cmp_expr "==" cmp_expr •
   82         | cmp_expr • "!=" cmp_expr

    "<"   shift, and go to state 74
    ">"   shift, and go to state 75
    "<="  shift, and go to state 76
    ">="  shift, and go to state 77

    $default  reduce using rule 81 (cmp_expr)


State 130

   77 cmp_expr: cmp_expr • ">" cmp_expr
   78         | cmp_expr • "<" cmp_expr
   79         | cmp_expr • "<=" cmp_expr
   80         | cmp_expr • ">=" cmp_expr
   81         | cmp_expr • "==" cmp_expr
   82         | cmp_expr • "!=" cmp_expr
   82         | cmp_expr "!=" cmp_expr •

    "<"   shift, and go to state 74
    ">"   shift, and go to state 75
    "<="  shift, and go to state 76
    ">="  shift, and go to state 77

    $default  reduce using rule 82 (cmp_expr)


State 131

   86 if_statement: SIF "(" condition ")" • statement
   87             | SIF "(" condition ")" • "{" statements "}"

    "{"     shift, and go to state 150
    SPRINT  shift, and go to state 151

    statement  go to state 152


State 132

   49 params: "(" ")" •

    $default  reduce using rule 49 (params)


State 133

   51 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 153


State 134

   50 params: "(" type_params • ")"
   52 type_params: type_params • "," type_params

    ")"  shift, and go to state 154
    ","  shift, and go to state 155


State 135

   48 name_func: SFUNC name_func params NEWLINE •

    $default  reduce using rule 48 (name_func)


State 136

   92 while_statement: SWHILE "(" condition ")" • statement
   93                | SWHILE "(" condition ")" • "{" statements "}"

    "{"     shift, and go to state 156
    SPRINT  shift, and go to state 151

    statement  go to state 157


State 137

   22 integ: integ • "," integ
   22      | integ "," integ •

    $default  reduce using rule 22 (integ)


State 138

   24 fl: fl • "," fl
   24   | fl "," fl •

    $default  reduce using rule 24 (fl)


State 139

   26 str: str • "," str
   26    | str "," str •

    $default  reduce using rule 26 (str)


State 140

   28 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 28 (func)


State 141

   16 pos_elem: IDENTIFIER "[" • INTEGER "]"

    INTEGER  shift, and go to state 158


State 142

   31 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 31 (func)


State 143

   45 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 97
    STRING      shift, and go to state 98
    INTEGER     shift, and go to state 99
    FLOAT       shift, and go to state 100
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    pos_elem      go to state 101
    func          go to state 102
    print_params  go to state 159


State 144

   29 func: SLEN "(" len_params ")" •

    $default  reduce using rule 29 (func)


State 145

   30 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 30 (func)


State 146

   38 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109

    cmp_params  go to state 160


State 147

   73 val: val "," • val

    STRING   shift, and go to state 112
    INTEGER  shift, and go to state 113
    FLOAT    shift, and go to state 114
    "["      shift, and go to state 16

    arr_elements  go to state 115
    val           go to state 161


State 148

   68 assign: var "=" val ";" •

    $default  reduce using rule 68 (assign)


State 149

   53 code_func: "{" NEWLINE "}" •

    $default  reduce using rule 53 (code_func)


State 150

   87 if_statement: SIF "(" condition ")" "{" • statements "}"

    SPRINT  shift, and go to state 151

    statement   go to state 162
    statements  go to state 163


State 151

   89 statement: SPRINT • "(" print_params ")" ";"

    "("  shift, and go to state 164


State 152

   86 if_statement: SIF "(" condition ")" statement •

    $default  reduce using rule 86 (if_statement)


State 153

   51 type_params: type IDENTIFIER •

    $default  reduce using rule 51 (type_params)


State 154

   50 params: "(" type_params ")" •

    $default  reduce using rule 50 (params)


State 155

   52 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 12

    type         go to state 133
    type_params  go to state 165


State 156

   93 while_statement: SWHILE "(" condition ")" "{" • statements "}"

    SPRINT  shift, and go to state 151

    statement   go to state 162
    statements  go to state 166


State 157

   92 while_statement: SWHILE "(" condition ")" statement •

    $default  reduce using rule 92 (while_statement)


State 158

   16 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 167


State 159

   45 print_params: print_params • "," print_params
   45             | print_params "," print_params •

    $default  reduce using rule 45 (print_params)


State 160

   38 cmp_params: cmp_params • "," cmp_params
   38           | cmp_params "," cmp_params •

    $default  reduce using rule 38 (cmp_params)


State 161

   73 val: val • "," val
   73    | val "," val •

    $default  reduce using rule 73 (val)


State 162

   90 statements: statement •

    $default  reduce using rule 90 (statements)


State 163

   87 if_statement: SIF "(" condition ")" "{" statements • "}"
   91 statements: statements • statement

    "}"     shift, and go to state 168
    SPRINT  shift, and go to state 151

    statement  go to state 169


State 164

   89 statement: SPRINT "(" • print_params ")" ";"

    IDENTIFIER  shift, and go to state 97
    STRING      shift, and go to state 98
    INTEGER     shift, and go to state 99
    FLOAT       shift, and go to state 100
    SSCAN       shift, and go to state 17
    SPRINT      shift, and go to state 18
    SLEN        shift, and go to state 19
    SCMP        shift, and go to state 20

    pos_elem      go to state 101
    func          go to state 102
    print_params  go to state 170


State 165

   52 type_params: type_params • "," type_params
   52            | type_params "," type_params •

    $default  reduce using rule 52 (type_params)


State 166

   91 statements: statements • statement
   93 while_statement: SWHILE "(" condition ")" "{" statements • "}"

    "}"     shift, and go to state 171
    SPRINT  shift, and go to state 151

    statement  go to state 169


State 167

   16 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 16 (pos_elem)


State 168

   87 if_statement: SIF "(" condition ")" "{" statements "}" •

    $default  reduce using rule 87 (if_statement)


State 169

   91 statements: statements statement •

    $default  reduce using rule 91 (statements)


State 170

   45 print_params: print_params • "," print_params
   89 statement: SPRINT "(" print_params • ")" ";"

    ")"  shift, and go to state 172
    ","  shift, and go to state 143


State 171

   93 while_statement: SWHILE "(" condition ")" "{" statements "}" •

    $default  reduce using rule 93 (while_statement)


State 172

   89 statement: SPRINT "(" print_params ")" • ";"

    ";"  shift, and go to state 173


State 173

   89 statement: SPRINT "(" print_params ")" ";" •

    $default  reduce using rule 89 (statement)
