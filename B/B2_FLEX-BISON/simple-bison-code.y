/* Όνομα αρχείου:       simple-bison-code.y
   Περιγραφή:           Υπόδειγμα για ανάπτυξη συντακτικού αναλυτή με χρήση του εργαλείου Bison
   Συγγραφέας:          Εργαστήριο Μεταγλωττιστών, Τμήμα Μηχανικών Πληροφορικής και Υπολογιστών,
                        Πανεπιστήμιο Δυτικής Αττικής
   Σχόλια:              Το παρόν πρόγραμμα υλοποιεί (με τη χρήση Bison) έναν απλό συντακτικό αναλυτή
			που αναγνωρίζει την πρόσθεση ακεραίων αριθμών (δεκαδικού συστήματος) & μεταβλητών
			και εκτυπώνει το αποτέλεσμα στην οθόνη (θεωρώντας ότι οι μεταβλητές έχουν
			πάντα την τιμή 0). Λειτουργεί αυτόνομα, δηλαδή χωρίς Flex και αναγνωρίζει κενά
			(space & tab), ακεραίους (δεκαδικού συστήματος) και ονόματα μεταβλητών της γλώσσας
			Uni-C ενώ διαχειρίζεται τους ειδικούς χαρακτήρες νέας γραμμής '\n' (new line)
			και 'EOF' (end of file). Καθαρά για λόγους debugging τυπώνει στην οθόνη οτιδήποτε
			επιστρέφει η συνάρτηση yylex().
   Οδηγίες εκτέλεσης:   Δίνετε "make" χωρίς τα εισαγωγικά στον τρέχοντα κατάλογο. Εναλλακτικά:
			bison -o simple-bison-code.c simple-bison-code.y
                        gcc -o simple-bison-code simple-bison-code.c
                        ./simple-bison-code
*/

%{
/* Ορισμοί και δηλώσεις γλώσσας C. Οτιδήποτε έχει να κάνει με ορισμό ή αρχικοποίηση
   μεταβλητών & συναρτήσεων, αρχεία header και δηλώσεις #define μπαίνει σε αυτό το σημείο */
        #include <stdio.h>
	#include <stdlib.h>
        int yylex(void);
        void yyerror(char *);
%}

/* Ορισμός των αναγνωρίσιμων λεκτικών μονάδων. */
%token INTCONST VARIABLE PLUS NEWLINE /* FILL ME */

/* Ορισμός προτεραιοτήτων στα tokens */
%left PLUS

%%

/* Ορισμός των γραμματικών κανόνων. Κάθε φορά που αντιστοιχίζεται ένας γραμματικός
   κανόνας με τα δεδομένα εισόδου, εκτελείται ο κώδικας C που βρίσκεται ανάμεσα στα
   αγκύλια. Η αναμενόμενη σύνταξη είναι:
				όνομα : κανόνας { κώδικας C } */
program:
        program expr NEWLINE { printf("%d\n", $2); }
        |
        ;
expr:
        INTCONST         { $$ = $1; }
	| VARIABLE	 { $$ = $1; }
        | expr PLUS expr { $$ = $1 + $3; }
/* FILL ME */
        ;
%%

/* Η συνάρτηση yylex υλοποιεί έναν αυτόνομο λεκτικό αναλυτή. Εδώ αναγνωρίζονται
   οι λεκτικές μονάδες της γλώσσας Uni-C */
int yylex() {
	char buf[100];
	char num = 0;
	int zero = 0;
        char c;

	// Διάβασε έναν χαρακτήρα από την είσοδο
        c = getchar();

        // Εάν ο χαρακτήρας είναι κενό ή tab, αγνόησέ τον και διάβασε τον επόμενο
        while (c == ' ' || c == '\t') { yylval = 0; c = getchar(); }

	// Αν βρεθεί ένας χαρακτήρας A-Z, a-z ή _ τότε πρόκειται για μεταβλητή
	if ((c >= 'A' && c <= 'Z') ||
	    (c >= 'a' && c <= 'z') ||
	    (c == '_'))
	{
		sprintf(buf, "%c", c);
		c = getchar();
		// Ο επόμενος χαρακτήρας μετά τον πρώτο μπορεί να είναι και ψηφίο 0-9
		while((c >= 'A' && c <= 'Z') ||
		      (c >= 'a' && c <= 'z') ||
		      (c >= '0' && c <= '9') ||
		      (c == '_'))
		{
			sprintf(buf, "%s%c", buf, c);
			c = getchar();
		}
		ungetc(c, stdin);
		yylval = 0;
		printf("\tScanner returned: VARIABLE (%s)\n", buf);
		return VARIABLE;
	}

        // Για κάθε χαρακτήρα που είναι αριθμός γίνεται η τοποθέτησή του στην yylval
        while (c >= '0' && c <= '9')
        {
		if (zero > 0) { zero = 0; yyerror("integer starting with zero"); exit(1); }
		if (c == '0') zero++;
		if (num == 0) yylval = 0;
                yylval = (yylval * 10) + (c - '0');
		num = 1;
		c = getchar();
        }
        if (num)
	{
		ungetc(c, stdin);
		printf("\tScanner returned: INTCONST (%d)\n", yylval);
		return INTCONST;
	}

	// Εάν ο χαρακτήρας είναι το σύμβολο + πρόκειται για πρόσθεση
        if (c == '+')
	{
		printf("\tScanner returned: PLUS (%c)\n", c);
		return PLUS;
	}

	// Εάν πρόκειται για τον ειδικό χαρακτήρα νέας γραμμής
        if (c == '\n')
	{
		yylval = 0;
		printf("\tScanner returned: NEWLINE (\\n)\n");
		return NEWLINE;
	}

	// Εάν πρόκειται για τον ειδικό χαρακτήρα τέλους αρχείου
	if (c == EOF)
	{
		printf("\tScanner returned: EOF (EOF)\n");
		exit(0);
	}

	/* FILL ME */

	// Για οτιδήποτε άλλο κάλεσε την yyerror με μήνυμα λάθους
	yyerror("invalid character");
}


/* Η συνάρτηση yyerror χρησιμοποιείται για την αναφορά σφαλμάτων. Συγκεκριμένα καλείται
   από την yyparse όταν υπάρξει κάποιο συντακτικό λάθος. Στην παρακάτω περίπτωση η
   συνάρτηση επί της ουσίας τυπώνει μήνυμα λάθους στην οθόνη. */
void yyerror(char *s) {
        fprintf(stderr, "Error: %s\n", s);
}


/* Η συνάρτηση main που αποτελεί και το σημείο εκκίνησης του προγράμματος.
   Στην συγκεκριμένη περίπτωση απλά καλεί τη συνάρτηση yyparse του Bison
   για να ξεκινήσει η συντακτική ανάλυση. */
int main(void)  {
        yyparse();
        return 0;
}
