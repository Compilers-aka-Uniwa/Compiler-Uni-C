Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "&"
    "\\"
    TOKEN_ERROR


State 4 conflicts: 31 reduce/reduce
State 5 conflicts: 27 reduce/reduce
State 6 conflicts: 27 reduce/reduce
State 39 conflicts: 2 shift/reduce
State 97 conflicts: 31 reduce/reduce
State 113 conflicts: 26 reduce/reduce
State 122 conflicts: 2 shift/reduce
State 151 conflicts: 2 reduce/reduce
State 153 conflicts: 2 reduce/reduce
State 154 conflicts: 2 reduce/reduce
State 186 conflicts: 28 reduce/reduce
State 188 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_statements NEWLINE
    2        | program error NEWLINE
    3        | ε

    4 decl_var: type var

    5 type: SINT
    6     | SFLOAT
    7     | SDOUBLE
    8     | SSHORT
    9     | SLONG

   10 var: IDENTIFIER
   11    | var "," var

   12 pos_elem: IDENTIFIER "[" INTEGER "]"
   13         | IDENTIFIER "[" IDENTIFIER "]"

   14 arr_elements: "[" "]"
   15             | "[" integ "]"
   16             | "[" fl "]"
   17             | "[" str "]"

   18 integ: INTEGER
   19      | integ "," integ

   20 fl: FLOAT
   21   | fl "," fl

   22 str: STRING
   23    | str "," str

   24 build_func: func

   25 func: SSCAN "(" scan_params ")"
   26     | SLEN "(" len_params ")"
   27     | SCMP "(" cmp_params ")"
   28     | SPRINT "(" print_params ")"
   29     | IDENTIFIER "(" print_params ")"

   30 scan_params: IDENTIFIER

   31 len_params: arr_elements
   32           | STRING
   33           | IDENTIFIER

   34 cmp_params: STRING
   35           | IDENTIFIER
   36           | cmp_params "," cmp_params

   37 print_params: STRING
   38             | IDENTIFIER
   39             | INTEGER
   40             | FLOAT
   41             | func
   42             | pos_elem
   43             | print_params "," print_params

   44 decl_func: name_func decl_statement

   45 name_func: SFUNC
   46          | name_func IDENTIFIER params NEWLINE

   47 params: "(" ")"
   48       | "(" type_params ")"

   49 type_params: type IDENTIFIER
   50            | type_params "," type_params

   51 sign: INTEGER
   52     | FLOAT
   53     | "+" sign
   54     | "-" sign

   55 arithm_expr: sign
   56            | IDENTIFIER
   57            | arithm_expr "+" arithm_expr
   58            | arithm_expr "-" arithm_expr
   59            | arithm_expr "*" arithm_expr
   60            | arithm_expr "/" arithm_expr
   61            | arithm_expr "%" arithm_expr

   62 number: INTEGER
   63       | FLOAT
   64       | pos_elem

   65 assign: var "=" val
   66       | var "=" cmp_expr
   67       | var "=" arithm_expr
   68       | var "=" merge_arr
   69       | oper_eq

   70 oper_eq: var "++"
   71        | var "--"
   72        | "++" var
   73        | "--" var
   74        | var "+=" number
   75        | var "-=" number
   76        | var "*=" number
   77        | var "/=" number
   78        | var "+-"
   79        | var "-+"
   80        | "+-" var
   81        | "-+" var

   82 val: number
   83    | IDENTIFIER
   84    | STRING
   85    | arr_elements
   86    | val "," val

   87 cmp_expr: INTEGER
   88         | FLOAT
   89         | IDENTIFIER
   90         | cmp_expr ">" cmp_expr
   91         | cmp_expr "<" cmp_expr
   92         | cmp_expr "<=" cmp_expr
   93         | cmp_expr ">=" cmp_expr
   94         | cmp_expr "==" cmp_expr
   95         | cmp_expr "!=" cmp_expr
   96         | cmp_expr "||" cmp_expr
   97         | cmp_expr "&&" cmp_expr
   98         | "!" cmp_expr
   99         | cmp_expr ">" ">" arithm_expr
  100         | cmp_expr "<" "<" arithm_expr

  101 merge_arr: arr_elements "+" arr_elements

  102 decl_statements: decl_statement
  103                | decl_statements decl_statement

  104 decl_statement: if_statement
  105               | while_statement
  106               | for_statement
  107               | decl_var ";"
  108               | build_func ";"
  109               | decl_func
  110               | assign ";"
  111               | arithm_expr
  112               | cmp_expr
  113               | merge_arr
  114               | block_statement
  115               | NEWLINE

  116 if_statement: SIF condition decl_statement

  117 condition: cmp_expr
  118          | "(" condition ")"
  119          | "((" condition ")"
  120          | "(" condition "))"
  121          | condition ")"
  122          | "(" condition

  123 block_statement: "{" decl_statements "}"

  124 while_statement: SWHILE condition decl_statement

  125 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256) 2
    IDENTIFIER <sval> (258) 10 12 13 29 30 33 35 38 46 49 56 83 89
    STRING <sval> (259) 22 32 34 37 84
    INTEGER <ival> (260) 12 18 39 51 62 87
    FLOAT <fval> (261) 20 40 52 63 88
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 116
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 7
    SINT <sval> (268) 5
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 45
    SELSE <sval> (271)
    SLONG <sval> (272) 9
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 6
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279) 125
    SSHORT <sval> (280) 8
    SWHILE <sval> (281) 124
    "+" (282) 53 57 101
    "*=" (283) 76
    "--" (284) 71 73
    "-" (285) 54 58
    "/=" (286) 77
    "<" (287) 91 100
    "*" (288) 59
    "!" (289) 98
    ">" (290) 90 99
    "/" (291) 60
    "&&" (292) 97
    "<=" (293) 92
    "%" (294) 61
    "||" (295) 96
    ">=" (296) 93
    "=" (297) 65 66 67 68
    "==" (298) 94
    "&" (299)
    "+=" (300) 74
    "!=" (301) 95
    "-=" (302) 75
    "++" (303) 70 72
    "(" (304) 25 26 27 28 29 47 48 118 120 122 125
    ")" (305) 25 26 27 28 29 47 48 118 119 121 125
    "[" (306) 12 13 14 15 16 17
    "]" (307) 12 13 14 15 16 17
    "{" (308) 123
    "}" (309) 123
    "," (310) 11 19 21 23 36 43 50 86
    "\\" (311)
    ";" (312) 107 108 110 125
    SSCAN (313) 25
    SPRINT (314) 28
    SLEN (315) 26
    SCMP (316) 27
    NEWLINE (317) 1 2 46 115
    TOKEN_ERROR (318)
    "+-" (319) 78 80
    "-+" (320) 79 81
    "((" (321) 119
    "))" (322) 120


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    program <sval> (69)
        on left: 1 2 3
        on right: 0 1 2
    decl_var <sval> (70)
        on left: 4
        on right: 107
    type <sval> (71)
        on left: 5 6 7 8 9
        on right: 4 49
    var <sval> (72)
        on left: 10 11
        on right: 4 11 65 66 67 68 70 71 72 73 74 75 76 77 78 79 80 81
    pos_elem <sval> (73)
        on left: 12 13
        on right: 42 64
    arr_elements <sval> (74)
        on left: 14 15 16 17
        on right: 31 85 101
    integ <sval> (75)
        on left: 18 19
        on right: 15 19
    fl <sval> (76)
        on left: 20 21
        on right: 16 21
    str <sval> (77)
        on left: 22 23
        on right: 17 23
    build_func <sval> (78)
        on left: 24
        on right: 108
    func <sval> (79)
        on left: 25 26 27 28 29
        on right: 24 41
    scan_params <sval> (80)
        on left: 30
        on right: 25
    len_params <sval> (81)
        on left: 31 32 33
        on right: 26
    cmp_params <sval> (82)
        on left: 34 35 36
        on right: 27 36
    print_params <sval> (83)
        on left: 37 38 39 40 41 42 43
        on right: 28 29 43
    decl_func <sval> (84)
        on left: 44
        on right: 109
    name_func <sval> (85)
        on left: 45 46
        on right: 44 46
    params <sval> (86)
        on left: 47 48
        on right: 46
    type_params <sval> (87)
        on left: 49 50
        on right: 48 50
    sign <sval> (88)
        on left: 51 52 53 54
        on right: 53 54 55
    arithm_expr <sval> (89)
        on left: 55 56 57 58 59 60 61
        on right: 57 58 59 60 61 67 99 100 111
    number <sval> (90)
        on left: 62 63 64
        on right: 74 75 76 77 82
    assign <sval> (91)
        on left: 65 66 67 68 69
        on right: 110 125
    oper_eq <sval> (92)
        on left: 70 71 72 73 74 75 76 77 78 79 80 81
        on right: 69 125
    val <sval> (93)
        on left: 82 83 84 85 86
        on right: 65 86
    cmp_expr <sval> (94)
        on left: 87 88 89 90 91 92 93 94 95 96 97 98 99 100
        on right: 66 90 91 92 93 94 95 96 97 98 99 100 112 117 125
    merge_arr <sval> (95)
        on left: 101
        on right: 68 113
    decl_statements <sval> (96)
        on left: 102 103
        on right: 1 103 123
    decl_statement <sval> (97)
        on left: 104 105 106 107 108 109 110 111 112 113 114 115
        on right: 44 102 103 116 124 125
    if_statement <sval> (98)
        on left: 116
        on right: 104
    condition <sval> (99)
        on left: 117 118 119 120 121 122
        on right: 116 118 119 120 121 122 124
    block_statement <sval> (100)
        on left: 123
        on right: 114
    while_statement <sval> (101)
        on left: 124
        on right: 105
    for_statement <sval> (102)
        on left: 125
        on right: 106


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_statements NEWLINE
    2        | program • error NEWLINE

    $end        shift, and go to state 2
    error       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    decl_var         go to state 30
    type             go to state 31
    var              go to state 32
    arr_elements     go to state 33
    build_func       go to state 34
    func             go to state 35
    decl_func        go to state 36
    name_func        go to state 37
    sign             go to state 38
    arithm_expr      go to state 39
    assign           go to state 40
    oper_eq          go to state 41
    cmp_expr         go to state 42
    merge_arr        go to state 43
    decl_statements  go to state 44
    decl_statement   go to state 45
    if_statement     go to state 46
    block_statement  go to state 47
    while_statement  go to state 48
    for_statement    go to state 49


State 2

    0 $accept: program $end •

    $default  accept


State 3

    2 program: program error • NEWLINE

    NEWLINE  shift, and go to state 50


State 4

   10 var: IDENTIFIER •
   29 func: IDENTIFIER • "(" print_params ")"
   56 arithm_expr: IDENTIFIER •
   89 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 51

    IDENTIFIER  reduce using rule 56 (arithm_expr)
    IDENTIFIER  [reduce using rule 89 (cmp_expr)]
    INTEGER     reduce using rule 56 (arithm_expr)
    INTEGER     [reduce using rule 89 (cmp_expr)]
    FLOAT       reduce using rule 56 (arithm_expr)
    FLOAT       [reduce using rule 89 (cmp_expr)]
    SIF         reduce using rule 56 (arithm_expr)
    SIF         [reduce using rule 89 (cmp_expr)]
    SDOUBLE     reduce using rule 56 (arithm_expr)
    SDOUBLE     [reduce using rule 89 (cmp_expr)]
    SINT        reduce using rule 56 (arithm_expr)
    SINT        [reduce using rule 89 (cmp_expr)]
    SFUNC       reduce using rule 56 (arithm_expr)
    SFUNC       [reduce using rule 89 (cmp_expr)]
    SLONG       reduce using rule 56 (arithm_expr)
    SLONG       [reduce using rule 89 (cmp_expr)]
    SFLOAT      reduce using rule 56 (arithm_expr)
    SFLOAT      [reduce using rule 89 (cmp_expr)]
    SFOR        reduce using rule 56 (arithm_expr)
    SFOR        [reduce using rule 89 (cmp_expr)]
    SSHORT      reduce using rule 56 (arithm_expr)
    SSHORT      [reduce using rule 89 (cmp_expr)]
    SWHILE      reduce using rule 56 (arithm_expr)
    SWHILE      [reduce using rule 89 (cmp_expr)]
    "+"         reduce using rule 56 (arithm_expr)
    "+"         [reduce using rule 89 (cmp_expr)]
    "*="        reduce using rule 10 (var)
    "--"        reduce using rule 10 (var)
    "--"        [reduce using rule 56 (arithm_expr)]
    "--"        [reduce using rule 89 (cmp_expr)]
    "-"         reduce using rule 56 (arithm_expr)
    "-"         [reduce using rule 89 (cmp_expr)]
    "/="        reduce using rule 10 (var)
    "<"         reduce using rule 89 (cmp_expr)
    "!"         reduce using rule 56 (arithm_expr)
    "!"         [reduce using rule 89 (cmp_expr)]
    ">"         reduce using rule 89 (cmp_expr)
    "&&"        reduce using rule 89 (cmp_expr)
    "<="        reduce using rule 89 (cmp_expr)
    "||"        reduce using rule 89 (cmp_expr)
    ">="        reduce using rule 89 (cmp_expr)
    "="         reduce using rule 10 (var)
    "=="        reduce using rule 89 (cmp_expr)
    "+="        reduce using rule 10 (var)
    "!="        reduce using rule 89 (cmp_expr)
    "-="        reduce using rule 10 (var)
    "++"        reduce using rule 10 (var)
    "++"        [reduce using rule 56 (arithm_expr)]
    "++"        [reduce using rule 89 (cmp_expr)]
    "["         reduce using rule 56 (arithm_expr)
    "["         [reduce using rule 89 (cmp_expr)]
    "{"         reduce using rule 56 (arithm_expr)
    "{"         [reduce using rule 89 (cmp_expr)]
    "}"         reduce using rule 56 (arithm_expr)
    "}"         [reduce using rule 89 (cmp_expr)]
    ","         reduce using rule 10 (var)
    SSCAN       reduce using rule 56 (arithm_expr)
    SSCAN       [reduce using rule 89 (cmp_expr)]
    SPRINT      reduce using rule 56 (arithm_expr)
    SPRINT      [reduce using rule 89 (cmp_expr)]
    SLEN        reduce using rule 56 (arithm_expr)
    SLEN        [reduce using rule 89 (cmp_expr)]
    SCMP        reduce using rule 56 (arithm_expr)
    SCMP        [reduce using rule 89 (cmp_expr)]
    NEWLINE     reduce using rule 56 (arithm_expr)
    NEWLINE     [reduce using rule 89 (cmp_expr)]
    "+-"        reduce using rule 10 (var)
    "+-"        [reduce using rule 56 (arithm_expr)]
    "+-"        [reduce using rule 89 (cmp_expr)]
    "-+"        reduce using rule 10 (var)
    "-+"        [reduce using rule 56 (arithm_expr)]
    "-+"        [reduce using rule 89 (cmp_expr)]
    $default    reduce using rule 56 (arithm_expr)


State 5

   51 sign: INTEGER •
   87 cmp_expr: INTEGER •

    IDENTIFIER  reduce using rule 51 (sign)
    IDENTIFIER  [reduce using rule 87 (cmp_expr)]
    INTEGER     reduce using rule 51 (sign)
    INTEGER     [reduce using rule 87 (cmp_expr)]
    FLOAT       reduce using rule 51 (sign)
    FLOAT       [reduce using rule 87 (cmp_expr)]
    SIF         reduce using rule 51 (sign)
    SIF         [reduce using rule 87 (cmp_expr)]
    SDOUBLE     reduce using rule 51 (sign)
    SDOUBLE     [reduce using rule 87 (cmp_expr)]
    SINT        reduce using rule 51 (sign)
    SINT        [reduce using rule 87 (cmp_expr)]
    SFUNC       reduce using rule 51 (sign)
    SFUNC       [reduce using rule 87 (cmp_expr)]
    SLONG       reduce using rule 51 (sign)
    SLONG       [reduce using rule 87 (cmp_expr)]
    SFLOAT      reduce using rule 51 (sign)
    SFLOAT      [reduce using rule 87 (cmp_expr)]
    SFOR        reduce using rule 51 (sign)
    SFOR        [reduce using rule 87 (cmp_expr)]
    SSHORT      reduce using rule 51 (sign)
    SSHORT      [reduce using rule 87 (cmp_expr)]
    SWHILE      reduce using rule 51 (sign)
    SWHILE      [reduce using rule 87 (cmp_expr)]
    "+"         reduce using rule 51 (sign)
    "+"         [reduce using rule 87 (cmp_expr)]
    "--"        reduce using rule 51 (sign)
    "--"        [reduce using rule 87 (cmp_expr)]
    "-"         reduce using rule 51 (sign)
    "-"         [reduce using rule 87 (cmp_expr)]
    "<"         reduce using rule 87 (cmp_expr)
    "!"         reduce using rule 51 (sign)
    "!"         [reduce using rule 87 (cmp_expr)]
    ">"         reduce using rule 87 (cmp_expr)
    "&&"        reduce using rule 87 (cmp_expr)
    "<="        reduce using rule 87 (cmp_expr)
    "||"        reduce using rule 87 (cmp_expr)
    ">="        reduce using rule 87 (cmp_expr)
    "=="        reduce using rule 87 (cmp_expr)
    "!="        reduce using rule 87 (cmp_expr)
    "++"        reduce using rule 51 (sign)
    "++"        [reduce using rule 87 (cmp_expr)]
    "["         reduce using rule 51 (sign)
    "["         [reduce using rule 87 (cmp_expr)]
    "{"         reduce using rule 51 (sign)
    "{"         [reduce using rule 87 (cmp_expr)]
    "}"         reduce using rule 51 (sign)
    "}"         [reduce using rule 87 (cmp_expr)]
    SSCAN       reduce using rule 51 (sign)
    SSCAN       [reduce using rule 87 (cmp_expr)]
    SPRINT      reduce using rule 51 (sign)
    SPRINT      [reduce using rule 87 (cmp_expr)]
    SLEN        reduce using rule 51 (sign)
    SLEN        [reduce using rule 87 (cmp_expr)]
    SCMP        reduce using rule 51 (sign)
    SCMP        [reduce using rule 87 (cmp_expr)]
    NEWLINE     reduce using rule 51 (sign)
    NEWLINE     [reduce using rule 87 (cmp_expr)]
    "+-"        reduce using rule 51 (sign)
    "+-"        [reduce using rule 87 (cmp_expr)]
    "-+"        reduce using rule 51 (sign)
    "-+"        [reduce using rule 87 (cmp_expr)]
    $default    reduce using rule 51 (sign)


State 6

   52 sign: FLOAT •
   88 cmp_expr: FLOAT •

    IDENTIFIER  reduce using rule 52 (sign)
    IDENTIFIER  [reduce using rule 88 (cmp_expr)]
    INTEGER     reduce using rule 52 (sign)
    INTEGER     [reduce using rule 88 (cmp_expr)]
    FLOAT       reduce using rule 52 (sign)
    FLOAT       [reduce using rule 88 (cmp_expr)]
    SIF         reduce using rule 52 (sign)
    SIF         [reduce using rule 88 (cmp_expr)]
    SDOUBLE     reduce using rule 52 (sign)
    SDOUBLE     [reduce using rule 88 (cmp_expr)]
    SINT        reduce using rule 52 (sign)
    SINT        [reduce using rule 88 (cmp_expr)]
    SFUNC       reduce using rule 52 (sign)
    SFUNC       [reduce using rule 88 (cmp_expr)]
    SLONG       reduce using rule 52 (sign)
    SLONG       [reduce using rule 88 (cmp_expr)]
    SFLOAT      reduce using rule 52 (sign)
    SFLOAT      [reduce using rule 88 (cmp_expr)]
    SFOR        reduce using rule 52 (sign)
    SFOR        [reduce using rule 88 (cmp_expr)]
    SSHORT      reduce using rule 52 (sign)
    SSHORT      [reduce using rule 88 (cmp_expr)]
    SWHILE      reduce using rule 52 (sign)
    SWHILE      [reduce using rule 88 (cmp_expr)]
    "+"         reduce using rule 52 (sign)
    "+"         [reduce using rule 88 (cmp_expr)]
    "--"        reduce using rule 52 (sign)
    "--"        [reduce using rule 88 (cmp_expr)]
    "-"         reduce using rule 52 (sign)
    "-"         [reduce using rule 88 (cmp_expr)]
    "<"         reduce using rule 88 (cmp_expr)
    "!"         reduce using rule 52 (sign)
    "!"         [reduce using rule 88 (cmp_expr)]
    ">"         reduce using rule 88 (cmp_expr)
    "&&"        reduce using rule 88 (cmp_expr)
    "<="        reduce using rule 88 (cmp_expr)
    "||"        reduce using rule 88 (cmp_expr)
    ">="        reduce using rule 88 (cmp_expr)
    "=="        reduce using rule 88 (cmp_expr)
    "!="        reduce using rule 88 (cmp_expr)
    "++"        reduce using rule 52 (sign)
    "++"        [reduce using rule 88 (cmp_expr)]
    "["         reduce using rule 52 (sign)
    "["         [reduce using rule 88 (cmp_expr)]
    "{"         reduce using rule 52 (sign)
    "{"         [reduce using rule 88 (cmp_expr)]
    "}"         reduce using rule 52 (sign)
    "}"         [reduce using rule 88 (cmp_expr)]
    SSCAN       reduce using rule 52 (sign)
    SSCAN       [reduce using rule 88 (cmp_expr)]
    SPRINT      reduce using rule 52 (sign)
    SPRINT      [reduce using rule 88 (cmp_expr)]
    SLEN        reduce using rule 52 (sign)
    SLEN        [reduce using rule 88 (cmp_expr)]
    SCMP        reduce using rule 52 (sign)
    SCMP        [reduce using rule 88 (cmp_expr)]
    NEWLINE     reduce using rule 52 (sign)
    NEWLINE     [reduce using rule 88 (cmp_expr)]
    "+-"        reduce using rule 52 (sign)
    "+-"        [reduce using rule 88 (cmp_expr)]
    "-+"        reduce using rule 52 (sign)
    "-+"        [reduce using rule 88 (cmp_expr)]
    $default    reduce using rule 52 (sign)


State 7

  116 if_statement: SIF • condition decl_statement

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19
    "("         shift, and go to state 55
    "(("        shift, and go to state 56

    cmp_expr   go to state 57
    condition  go to state 58


State 8

    7 type: SDOUBLE •

    $default  reduce using rule 7 (type)


State 9

    5 type: SINT •

    $default  reduce using rule 5 (type)


State 10

   45 name_func: SFUNC •

    $default  reduce using rule 45 (name_func)


State 11

    9 type: SLONG •

    $default  reduce using rule 9 (type)


State 12

    6 type: SFLOAT •

    $default  reduce using rule 6 (type)


State 13

  125 for_statement: SFOR • "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement

    "("  shift, and go to state 59


State 14

    8 type: SSHORT •

    $default  reduce using rule 8 (type)


State 15

  124 while_statement: SWHILE • condition decl_statement

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19
    "("         shift, and go to state 55
    "(("        shift, and go to state 56

    cmp_expr   go to state 57
    condition  go to state 60


State 16

   53 sign: "+" • sign

    INTEGER  shift, and go to state 61
    FLOAT    shift, and go to state 62
    "+"      shift, and go to state 16
    "-"      shift, and go to state 18

    sign  go to state 63


State 17

   73 oper_eq: "--" • var

    IDENTIFIER  shift, and go to state 64

    var  go to state 65


State 18

   54 sign: "-" • sign

    INTEGER  shift, and go to state 61
    FLOAT    shift, and go to state 62
    "+"      shift, and go to state 16
    "-"      shift, and go to state 18

    sign  go to state 66


State 19

   98 cmp_expr: "!" • cmp_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19

    cmp_expr  go to state 67


State 20

   72 oper_eq: "++" • var

    IDENTIFIER  shift, and go to state 64

    var  go to state 68


State 21

   14 arr_elements: "[" • "]"
   15             | "[" • integ "]"
   16             | "[" • fl "]"
   17             | "[" • str "]"

    STRING   shift, and go to state 69
    INTEGER  shift, and go to state 70
    FLOAT    shift, and go to state 71
    "]"      shift, and go to state 72

    integ  go to state 73
    fl     go to state 74
    str    go to state 75


State 22

  123 block_statement: "{" • decl_statements "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    decl_var         go to state 30
    type             go to state 31
    var              go to state 32
    arr_elements     go to state 33
    build_func       go to state 34
    func             go to state 35
    decl_func        go to state 36
    name_func        go to state 37
    sign             go to state 38
    arithm_expr      go to state 39
    assign           go to state 40
    oper_eq          go to state 41
    cmp_expr         go to state 42
    merge_arr        go to state 43
    decl_statements  go to state 76
    decl_statement   go to state 45
    if_statement     go to state 46
    block_statement  go to state 47
    while_statement  go to state 48
    for_statement    go to state 49


State 23

   25 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 77


State 24

   28 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 78


State 25

   26 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 79


State 26

   27 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 80


State 27

  115 decl_statement: NEWLINE •

    $default  reduce using rule 115 (decl_statement)


State 28

   80 oper_eq: "+-" • var

    IDENTIFIER  shift, and go to state 64

    var  go to state 81


State 29

   81 oper_eq: "-+" • var

    IDENTIFIER  shift, and go to state 64

    var  go to state 82


State 30

  107 decl_statement: decl_var • ";"

    ";"  shift, and go to state 83


State 31

    4 decl_var: type • var

    IDENTIFIER  shift, and go to state 64

    var  go to state 84


State 32

   11 var: var • "," var
   65 assign: var • "=" val
   66       | var • "=" cmp_expr
   67       | var • "=" arithm_expr
   68       | var • "=" merge_arr
   70 oper_eq: var • "++"
   71        | var • "--"
   74        | var • "+=" number
   75        | var • "-=" number
   76        | var • "*=" number
   77        | var • "/=" number
   78        | var • "+-"
   79        | var • "-+"

    "*="  shift, and go to state 85
    "--"  shift, and go to state 86
    "/="  shift, and go to state 87
    "="   shift, and go to state 88
    "+="  shift, and go to state 89
    "-="  shift, and go to state 90
    "++"  shift, and go to state 91
    ","   shift, and go to state 92
    "+-"  shift, and go to state 93
    "-+"  shift, and go to state 94


State 33

  101 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 95


State 34

  108 decl_statement: build_func • ";"

    ";"  shift, and go to state 96


State 35

   24 build_func: func •

    $default  reduce using rule 24 (build_func)


State 36

  109 decl_statement: decl_func •

    $default  reduce using rule 109 (decl_statement)


State 37

   44 decl_func: name_func • decl_statement
   46 name_func: name_func • IDENTIFIER params NEWLINE

    IDENTIFIER  shift, and go to state 97
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    decl_var         go to state 30
    type             go to state 31
    var              go to state 32
    arr_elements     go to state 33
    build_func       go to state 34
    func             go to state 35
    decl_func        go to state 36
    name_func        go to state 37
    sign             go to state 38
    arithm_expr      go to state 39
    assign           go to state 40
    oper_eq          go to state 41
    cmp_expr         go to state 42
    merge_arr        go to state 43
    decl_statement   go to state 98
    if_statement     go to state 46
    block_statement  go to state 47
    while_statement  go to state 48
    for_statement    go to state 49


State 38

   55 arithm_expr: sign •

    $default  reduce using rule 55 (arithm_expr)


State 39

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr
  111 decl_statement: arithm_expr •

    "+"  shift, and go to state 99
    "-"  shift, and go to state 100
    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    "+"       [reduce using rule 111 (decl_statement)]
    "-"       [reduce using rule 111 (decl_statement)]
    $default  reduce using rule 111 (decl_statement)


State 40

  110 decl_statement: assign • ";"

    ";"  shift, and go to state 104


State 41

   69 assign: oper_eq •

    $default  reduce using rule 69 (assign)


State 42

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr
  112 decl_statement: cmp_expr •

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    "||"  shift, and go to state 109
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 112 (decl_statement)


State 43

  113 decl_statement: merge_arr •

    $default  reduce using rule 113 (decl_statement)


State 44

    1 program: program decl_statements • NEWLINE
  103 decl_statements: decl_statements • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 113
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    decl_var         go to state 30
    type             go to state 31
    var              go to state 32
    arr_elements     go to state 33
    build_func       go to state 34
    func             go to state 35
    decl_func        go to state 36
    name_func        go to state 37
    sign             go to state 38
    arithm_expr      go to state 39
    assign           go to state 40
    oper_eq          go to state 41
    cmp_expr         go to state 42
    merge_arr        go to state 43
    decl_statement   go to state 114
    if_statement     go to state 46
    block_statement  go to state 47
    while_statement  go to state 48
    for_statement    go to state 49


State 45

  102 decl_statements: decl_statement •

    $default  reduce using rule 102 (decl_statements)


State 46

  104 decl_statement: if_statement •

    $default  reduce using rule 104 (decl_statement)


State 47

  114 decl_statement: block_statement •

    $default  reduce using rule 114 (decl_statement)


State 48

  105 decl_statement: while_statement •

    $default  reduce using rule 105 (decl_statement)


State 49

  106 decl_statement: for_statement •

    $default  reduce using rule 106 (decl_statement)


State 50

    2 program: program error NEWLINE •

    $default  reduce using rule 2 (program)


State 51

   29 func: IDENTIFIER "(" • print_params ")"

    IDENTIFIER  shift, and go to state 115
    STRING      shift, and go to state 116
    INTEGER     shift, and go to state 117
    FLOAT       shift, and go to state 118
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 119
    func          go to state 120
    print_params  go to state 121


State 52

   89 cmp_expr: IDENTIFIER •

    $default  reduce using rule 89 (cmp_expr)


State 53

   87 cmp_expr: INTEGER •

    $default  reduce using rule 87 (cmp_expr)


State 54

   88 cmp_expr: FLOAT •

    $default  reduce using rule 88 (cmp_expr)


State 55

  118 condition: "(" • condition ")"
  120          | "(" • condition "))"
  122          | "(" • condition

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19
    "("         shift, and go to state 55
    "(("        shift, and go to state 56

    cmp_expr   go to state 57
    condition  go to state 122


State 56

  119 condition: "((" • condition ")"

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19
    "("         shift, and go to state 55
    "(("        shift, and go to state 56

    cmp_expr   go to state 57
    condition  go to state 123


State 57

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr
  117 condition: cmp_expr •

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    "||"  shift, and go to state 109
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 117 (condition)


State 58

  116 if_statement: SIF condition • decl_statement
  121 condition: condition • ")"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    ")"         shift, and go to state 124
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    decl_var         go to state 30
    type             go to state 31
    var              go to state 32
    arr_elements     go to state 33
    build_func       go to state 34
    func             go to state 35
    decl_func        go to state 36
    name_func        go to state 37
    sign             go to state 38
    arithm_expr      go to state 39
    assign           go to state 40
    oper_eq          go to state 41
    cmp_expr         go to state 42
    merge_arr        go to state 43
    decl_statement   go to state 125
    if_statement     go to state 46
    block_statement  go to state 47
    while_statement  go to state 48
    for_statement    go to state 49


State 59

  125 for_statement: SFOR "(" • assign ";" cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 64
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    var      go to state 32
    assign   go to state 126
    oper_eq  go to state 41


State 60

  121 condition: condition • ")"
  124 while_statement: SWHILE condition • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    ")"         shift, and go to state 124
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    decl_var         go to state 30
    type             go to state 31
    var              go to state 32
    arr_elements     go to state 33
    build_func       go to state 34
    func             go to state 35
    decl_func        go to state 36
    name_func        go to state 37
    sign             go to state 38
    arithm_expr      go to state 39
    assign           go to state 40
    oper_eq          go to state 41
    cmp_expr         go to state 42
    merge_arr        go to state 43
    decl_statement   go to state 127
    if_statement     go to state 46
    block_statement  go to state 47
    while_statement  go to state 48
    for_statement    go to state 49


State 61

   51 sign: INTEGER •

    $default  reduce using rule 51 (sign)


State 62

   52 sign: FLOAT •

    $default  reduce using rule 52 (sign)


State 63

   53 sign: "+" sign •

    $default  reduce using rule 53 (sign)


State 64

   10 var: IDENTIFIER •

    $default  reduce using rule 10 (var)


State 65

   11 var: var • "," var
   73 oper_eq: "--" var •

    ","  shift, and go to state 92

    $default  reduce using rule 73 (oper_eq)


State 66

   54 sign: "-" sign •

    $default  reduce using rule 54 (sign)


State 67

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   98         | "!" cmp_expr •
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 98 (cmp_expr)


State 68

   11 var: var • "," var
   72 oper_eq: "++" var •

    ","  shift, and go to state 92

    $default  reduce using rule 72 (oper_eq)


State 69

   22 str: STRING •

    $default  reduce using rule 22 (str)


State 70

   18 integ: INTEGER •

    $default  reduce using rule 18 (integ)


State 71

   20 fl: FLOAT •

    $default  reduce using rule 20 (fl)


State 72

   14 arr_elements: "[" "]" •

    $default  reduce using rule 14 (arr_elements)


State 73

   15 arr_elements: "[" integ • "]"
   19 integ: integ • "," integ

    "]"  shift, and go to state 128
    ","  shift, and go to state 129


State 74

   16 arr_elements: "[" fl • "]"
   21 fl: fl • "," fl

    "]"  shift, and go to state 130
    ","  shift, and go to state 131


State 75

   17 arr_elements: "[" str • "]"
   23 str: str • "," str

    "]"  shift, and go to state 132
    ","  shift, and go to state 133


State 76

  103 decl_statements: decl_statements • decl_statement
  123 block_statement: "{" decl_statements • "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    "}"         shift, and go to state 134
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    decl_var         go to state 30
    type             go to state 31
    var              go to state 32
    arr_elements     go to state 33
    build_func       go to state 34
    func             go to state 35
    decl_func        go to state 36
    name_func        go to state 37
    sign             go to state 38
    arithm_expr      go to state 39
    assign           go to state 40
    oper_eq          go to state 41
    cmp_expr         go to state 42
    merge_arr        go to state 43
    decl_statement   go to state 114
    if_statement     go to state 46
    block_statement  go to state 47
    while_statement  go to state 48
    for_statement    go to state 49


State 77

   25 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 135

    scan_params  go to state 136


State 78

   28 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 115
    STRING      shift, and go to state 116
    INTEGER     shift, and go to state 117
    FLOAT       shift, and go to state 118
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 119
    func          go to state 120
    print_params  go to state 137


State 79

   26 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 138
    STRING      shift, and go to state 139
    "["         shift, and go to state 21

    arr_elements  go to state 140
    len_params    go to state 141


State 80

   27 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 142
    STRING      shift, and go to state 143

    cmp_params  go to state 144


State 81

   11 var: var • "," var
   80 oper_eq: "+-" var •

    ","  shift, and go to state 92

    $default  reduce using rule 80 (oper_eq)


State 82

   11 var: var • "," var
   81 oper_eq: "-+" var •

    ","  shift, and go to state 92

    $default  reduce using rule 81 (oper_eq)


State 83

  107 decl_statement: decl_var ";" •

    $default  reduce using rule 107 (decl_statement)


State 84

    4 decl_var: type var •
   11 var: var • "," var

    ","  shift, and go to state 92

    $default  reduce using rule 4 (decl_var)


State 85

   76 oper_eq: var "*=" • number

    IDENTIFIER  shift, and go to state 145
    INTEGER     shift, and go to state 146
    FLOAT       shift, and go to state 147

    pos_elem  go to state 148
    number    go to state 149


State 86

   71 oper_eq: var "--" •

    $default  reduce using rule 71 (oper_eq)


State 87

   77 oper_eq: var "/=" • number

    IDENTIFIER  shift, and go to state 145
    INTEGER     shift, and go to state 146
    FLOAT       shift, and go to state 147

    pos_elem  go to state 148
    number    go to state 150


State 88

   65 assign: var "=" • val
   66       | var "=" • cmp_expr
   67       | var "=" • arithm_expr
   68       | var "=" • merge_arr

    IDENTIFIER  shift, and go to state 151
    STRING      shift, and go to state 152
    INTEGER     shift, and go to state 153
    FLOAT       shift, and go to state 154
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "["         shift, and go to state 21

    pos_elem      go to state 148
    arr_elements  go to state 155
    sign          go to state 38
    arithm_expr   go to state 156
    number        go to state 157
    val           go to state 158
    cmp_expr      go to state 159
    merge_arr     go to state 160


State 89

   74 oper_eq: var "+=" • number

    IDENTIFIER  shift, and go to state 145
    INTEGER     shift, and go to state 146
    FLOAT       shift, and go to state 147

    pos_elem  go to state 148
    number    go to state 161


State 90

   75 oper_eq: var "-=" • number

    IDENTIFIER  shift, and go to state 145
    INTEGER     shift, and go to state 146
    FLOAT       shift, and go to state 147

    pos_elem  go to state 148
    number    go to state 162


State 91

   70 oper_eq: var "++" •

    $default  reduce using rule 70 (oper_eq)


State 92

   11 var: var "," • var

    IDENTIFIER  shift, and go to state 64

    var  go to state 163


State 93

   78 oper_eq: var "+-" •

    $default  reduce using rule 78 (oper_eq)


State 94

   79 oper_eq: var "-+" •

    $default  reduce using rule 79 (oper_eq)


State 95

  101 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 21

    arr_elements  go to state 164


State 96

  108 decl_statement: build_func ";" •

    $default  reduce using rule 108 (decl_statement)


State 97

   10 var: IDENTIFIER •
   29 func: IDENTIFIER • "(" print_params ")"
   46 name_func: name_func IDENTIFIER • params NEWLINE
   56 arithm_expr: IDENTIFIER •
   89 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 165

    IDENTIFIER  reduce using rule 56 (arithm_expr)
    IDENTIFIER  [reduce using rule 89 (cmp_expr)]
    INTEGER     reduce using rule 56 (arithm_expr)
    INTEGER     [reduce using rule 89 (cmp_expr)]
    FLOAT       reduce using rule 56 (arithm_expr)
    FLOAT       [reduce using rule 89 (cmp_expr)]
    SIF         reduce using rule 56 (arithm_expr)
    SIF         [reduce using rule 89 (cmp_expr)]
    SDOUBLE     reduce using rule 56 (arithm_expr)
    SDOUBLE     [reduce using rule 89 (cmp_expr)]
    SINT        reduce using rule 56 (arithm_expr)
    SINT        [reduce using rule 89 (cmp_expr)]
    SFUNC       reduce using rule 56 (arithm_expr)
    SFUNC       [reduce using rule 89 (cmp_expr)]
    SLONG       reduce using rule 56 (arithm_expr)
    SLONG       [reduce using rule 89 (cmp_expr)]
    SFLOAT      reduce using rule 56 (arithm_expr)
    SFLOAT      [reduce using rule 89 (cmp_expr)]
    SFOR        reduce using rule 56 (arithm_expr)
    SFOR        [reduce using rule 89 (cmp_expr)]
    SSHORT      reduce using rule 56 (arithm_expr)
    SSHORT      [reduce using rule 89 (cmp_expr)]
    SWHILE      reduce using rule 56 (arithm_expr)
    SWHILE      [reduce using rule 89 (cmp_expr)]
    "+"         reduce using rule 56 (arithm_expr)
    "+"         [reduce using rule 89 (cmp_expr)]
    "*="        reduce using rule 10 (var)
    "--"        reduce using rule 10 (var)
    "--"        [reduce using rule 56 (arithm_expr)]
    "--"        [reduce using rule 89 (cmp_expr)]
    "-"         reduce using rule 56 (arithm_expr)
    "-"         [reduce using rule 89 (cmp_expr)]
    "/="        reduce using rule 10 (var)
    "<"         reduce using rule 89 (cmp_expr)
    "!"         reduce using rule 56 (arithm_expr)
    "!"         [reduce using rule 89 (cmp_expr)]
    ">"         reduce using rule 89 (cmp_expr)
    "&&"        reduce using rule 89 (cmp_expr)
    "<="        reduce using rule 89 (cmp_expr)
    "||"        reduce using rule 89 (cmp_expr)
    ">="        reduce using rule 89 (cmp_expr)
    "="         reduce using rule 10 (var)
    "=="        reduce using rule 89 (cmp_expr)
    "+="        reduce using rule 10 (var)
    "!="        reduce using rule 89 (cmp_expr)
    "-="        reduce using rule 10 (var)
    "++"        reduce using rule 10 (var)
    "++"        [reduce using rule 56 (arithm_expr)]
    "++"        [reduce using rule 89 (cmp_expr)]
    "["         reduce using rule 56 (arithm_expr)
    "["         [reduce using rule 89 (cmp_expr)]
    "{"         reduce using rule 56 (arithm_expr)
    "{"         [reduce using rule 89 (cmp_expr)]
    "}"         reduce using rule 56 (arithm_expr)
    "}"         [reduce using rule 89 (cmp_expr)]
    ","         reduce using rule 10 (var)
    SSCAN       reduce using rule 56 (arithm_expr)
    SSCAN       [reduce using rule 89 (cmp_expr)]
    SPRINT      reduce using rule 56 (arithm_expr)
    SPRINT      [reduce using rule 89 (cmp_expr)]
    SLEN        reduce using rule 56 (arithm_expr)
    SLEN        [reduce using rule 89 (cmp_expr)]
    SCMP        reduce using rule 56 (arithm_expr)
    SCMP        [reduce using rule 89 (cmp_expr)]
    NEWLINE     reduce using rule 56 (arithm_expr)
    NEWLINE     [reduce using rule 89 (cmp_expr)]
    "+-"        reduce using rule 10 (var)
    "+-"        [reduce using rule 56 (arithm_expr)]
    "+-"        [reduce using rule 89 (cmp_expr)]
    "-+"        reduce using rule 10 (var)
    "-+"        [reduce using rule 56 (arithm_expr)]
    "-+"        [reduce using rule 89 (cmp_expr)]
    $default    reduce using rule 56 (arithm_expr)

    params  go to state 166


State 98

   44 decl_func: name_func decl_statement •

    $default  reduce using rule 44 (decl_func)


State 99

   57 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 167
    INTEGER     shift, and go to state 61
    FLOAT       shift, and go to state 62
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 38
    arithm_expr  go to state 168


State 100

   58 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 167
    INTEGER     shift, and go to state 61
    FLOAT       shift, and go to state 62
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 38
    arithm_expr  go to state 169


State 101

   59 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 167
    INTEGER     shift, and go to state 61
    FLOAT       shift, and go to state 62
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 38
    arithm_expr  go to state 170


State 102

   60 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 167
    INTEGER     shift, and go to state 61
    FLOAT       shift, and go to state 62
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 38
    arithm_expr  go to state 171


State 103

   61 arithm_expr: arithm_expr "%" • arithm_expr

    IDENTIFIER  shift, and go to state 167
    INTEGER     shift, and go to state 61
    FLOAT       shift, and go to state 62
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 38
    arithm_expr  go to state 172


State 104

  110 decl_statement: assign ";" •

    $default  reduce using rule 110 (decl_statement)


State 105

   91 cmp_expr: cmp_expr "<" • cmp_expr
  100         | cmp_expr "<" • "<" arithm_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "<"         shift, and go to state 173
    "!"         shift, and go to state 19

    cmp_expr  go to state 174


State 106

   90 cmp_expr: cmp_expr ">" • cmp_expr
   99         | cmp_expr ">" • ">" arithm_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19
    ">"         shift, and go to state 175

    cmp_expr  go to state 176


State 107

   97 cmp_expr: cmp_expr "&&" • cmp_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19

    cmp_expr  go to state 177


State 108

   92 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19

    cmp_expr  go to state 178


State 109

   96 cmp_expr: cmp_expr "||" • cmp_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19

    cmp_expr  go to state 179


State 110

   93 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19

    cmp_expr  go to state 180


State 111

   94 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19

    cmp_expr  go to state 181


State 112

   95 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19

    cmp_expr  go to state 182


State 113

    1 program: program decl_statements NEWLINE •
  115 decl_statement: NEWLINE •

    IDENTIFIER  reduce using rule 1 (program)
    IDENTIFIER  [reduce using rule 115 (decl_statement)]
    INTEGER     reduce using rule 1 (program)
    INTEGER     [reduce using rule 115 (decl_statement)]
    FLOAT       reduce using rule 1 (program)
    FLOAT       [reduce using rule 115 (decl_statement)]
    SIF         reduce using rule 1 (program)
    SIF         [reduce using rule 115 (decl_statement)]
    SDOUBLE     reduce using rule 1 (program)
    SDOUBLE     [reduce using rule 115 (decl_statement)]
    SINT        reduce using rule 1 (program)
    SINT        [reduce using rule 115 (decl_statement)]
    SFUNC       reduce using rule 1 (program)
    SFUNC       [reduce using rule 115 (decl_statement)]
    SLONG       reduce using rule 1 (program)
    SLONG       [reduce using rule 115 (decl_statement)]
    SFLOAT      reduce using rule 1 (program)
    SFLOAT      [reduce using rule 115 (decl_statement)]
    SFOR        reduce using rule 1 (program)
    SFOR        [reduce using rule 115 (decl_statement)]
    SSHORT      reduce using rule 1 (program)
    SSHORT      [reduce using rule 115 (decl_statement)]
    SWHILE      reduce using rule 1 (program)
    SWHILE      [reduce using rule 115 (decl_statement)]
    "+"         reduce using rule 1 (program)
    "+"         [reduce using rule 115 (decl_statement)]
    "--"        reduce using rule 1 (program)
    "--"        [reduce using rule 115 (decl_statement)]
    "-"         reduce using rule 1 (program)
    "-"         [reduce using rule 115 (decl_statement)]
    "!"         reduce using rule 1 (program)
    "!"         [reduce using rule 115 (decl_statement)]
    "++"        reduce using rule 1 (program)
    "++"        [reduce using rule 115 (decl_statement)]
    "["         reduce using rule 1 (program)
    "["         [reduce using rule 115 (decl_statement)]
    "{"         reduce using rule 1 (program)
    "{"         [reduce using rule 115 (decl_statement)]
    SSCAN       reduce using rule 1 (program)
    SSCAN       [reduce using rule 115 (decl_statement)]
    SPRINT      reduce using rule 1 (program)
    SPRINT      [reduce using rule 115 (decl_statement)]
    SLEN        reduce using rule 1 (program)
    SLEN        [reduce using rule 115 (decl_statement)]
    SCMP        reduce using rule 1 (program)
    SCMP        [reduce using rule 115 (decl_statement)]
    NEWLINE     reduce using rule 1 (program)
    NEWLINE     [reduce using rule 115 (decl_statement)]
    "+-"        reduce using rule 1 (program)
    "+-"        [reduce using rule 115 (decl_statement)]
    "-+"        reduce using rule 1 (program)
    "-+"        [reduce using rule 115 (decl_statement)]
    $default    reduce using rule 1 (program)


State 114

  103 decl_statements: decl_statements decl_statement •

    $default  reduce using rule 103 (decl_statements)


State 115

   12 pos_elem: IDENTIFIER • "[" INTEGER "]"
   13         | IDENTIFIER • "[" IDENTIFIER "]"
   29 func: IDENTIFIER • "(" print_params ")"
   38 print_params: IDENTIFIER •

    "("  shift, and go to state 51
    "["  shift, and go to state 183

    $default  reduce using rule 38 (print_params)


State 116

   37 print_params: STRING •

    $default  reduce using rule 37 (print_params)


State 117

   39 print_params: INTEGER •

    $default  reduce using rule 39 (print_params)


State 118

   40 print_params: FLOAT •

    $default  reduce using rule 40 (print_params)


State 119

   42 print_params: pos_elem •

    $default  reduce using rule 42 (print_params)


State 120

   41 print_params: func •

    $default  reduce using rule 41 (print_params)


State 121

   29 func: IDENTIFIER "(" print_params • ")"
   43 print_params: print_params • "," print_params

    ")"  shift, and go to state 184
    ","  shift, and go to state 185


State 122

  118 condition: "(" condition • ")"
  120          | "(" condition • "))"
  121          | condition • ")"
  122          | "(" condition •

    ")"   shift, and go to state 186
    "))"  shift, and go to state 187

    ")"       [reduce using rule 122 (condition)]
    "))"      [reduce using rule 122 (condition)]
    $default  reduce using rule 122 (condition)


State 123

  119 condition: "((" condition • ")"
  121          | condition • ")"

    ")"  shift, and go to state 188


State 124

  121 condition: condition ")" •

    $default  reduce using rule 121 (condition)


State 125

  116 if_statement: SIF condition decl_statement •

    $default  reduce using rule 116 (if_statement)


State 126

  125 for_statement: SFOR "(" assign • ";" cmp_expr ";" oper_eq ")" decl_statement

    ";"  shift, and go to state 189


State 127

  124 while_statement: SWHILE condition decl_statement •

    $default  reduce using rule 124 (while_statement)


State 128

   15 arr_elements: "[" integ "]" •

    $default  reduce using rule 15 (arr_elements)


State 129

   19 integ: integ "," • integ

    INTEGER  shift, and go to state 70

    integ  go to state 190


State 130

   16 arr_elements: "[" fl "]" •

    $default  reduce using rule 16 (arr_elements)


State 131

   21 fl: fl "," • fl

    FLOAT  shift, and go to state 71

    fl  go to state 191


State 132

   17 arr_elements: "[" str "]" •

    $default  reduce using rule 17 (arr_elements)


State 133

   23 str: str "," • str

    STRING  shift, and go to state 69

    str  go to state 192


State 134

  123 block_statement: "{" decl_statements "}" •

    $default  reduce using rule 123 (block_statement)


State 135

   30 scan_params: IDENTIFIER •

    $default  reduce using rule 30 (scan_params)


State 136

   25 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 193


State 137

   28 func: SPRINT "(" print_params • ")"
   43 print_params: print_params • "," print_params

    ")"  shift, and go to state 194
    ","  shift, and go to state 185


State 138

   33 len_params: IDENTIFIER •

    $default  reduce using rule 33 (len_params)


State 139

   32 len_params: STRING •

    $default  reduce using rule 32 (len_params)


State 140

   31 len_params: arr_elements •

    $default  reduce using rule 31 (len_params)


State 141

   26 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 195


State 142

   35 cmp_params: IDENTIFIER •

    $default  reduce using rule 35 (cmp_params)


State 143

   34 cmp_params: STRING •

    $default  reduce using rule 34 (cmp_params)


State 144

   27 func: SCMP "(" cmp_params • ")"
   36 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 196
    ","  shift, and go to state 197


State 145

   12 pos_elem: IDENTIFIER • "[" INTEGER "]"
   13         | IDENTIFIER • "[" IDENTIFIER "]"

    "["  shift, and go to state 183


State 146

   62 number: INTEGER •

    $default  reduce using rule 62 (number)


State 147

   63 number: FLOAT •

    $default  reduce using rule 63 (number)


State 148

   64 number: pos_elem •

    $default  reduce using rule 64 (number)


State 149

   76 oper_eq: var "*=" number •

    $default  reduce using rule 76 (oper_eq)


State 150

   77 oper_eq: var "/=" number •

    $default  reduce using rule 77 (oper_eq)


State 151

   12 pos_elem: IDENTIFIER • "[" INTEGER "]"
   13         | IDENTIFIER • "[" IDENTIFIER "]"
   56 arithm_expr: IDENTIFIER •
   83 val: IDENTIFIER •
   89 cmp_expr: IDENTIFIER •

    "["  shift, and go to state 183

    "+"       reduce using rule 56 (arithm_expr)
    "-"       reduce using rule 56 (arithm_expr)
    "*"       reduce using rule 56 (arithm_expr)
    "/"       reduce using rule 56 (arithm_expr)
    "%"       reduce using rule 56 (arithm_expr)
    ","       reduce using rule 83 (val)
    ";"       reduce using rule 56 (arithm_expr)
    ";"       [reduce using rule 83 (val)]
    ";"       [reduce using rule 89 (cmp_expr)]
    $default  reduce using rule 89 (cmp_expr)


State 152

   84 val: STRING •

    $default  reduce using rule 84 (val)


State 153

   51 sign: INTEGER •
   62 number: INTEGER •
   87 cmp_expr: INTEGER •

    "+"       reduce using rule 51 (sign)
    "-"       reduce using rule 51 (sign)
    "*"       reduce using rule 51 (sign)
    "/"       reduce using rule 51 (sign)
    "%"       reduce using rule 51 (sign)
    ","       reduce using rule 62 (number)
    ";"       reduce using rule 51 (sign)
    ";"       [reduce using rule 62 (number)]
    ";"       [reduce using rule 87 (cmp_expr)]
    $default  reduce using rule 87 (cmp_expr)


State 154

   52 sign: FLOAT •
   63 number: FLOAT •
   88 cmp_expr: FLOAT •

    "+"       reduce using rule 52 (sign)
    "-"       reduce using rule 52 (sign)
    "*"       reduce using rule 52 (sign)
    "/"       reduce using rule 52 (sign)
    "%"       reduce using rule 52 (sign)
    ","       reduce using rule 63 (number)
    ";"       reduce using rule 52 (sign)
    ";"       [reduce using rule 63 (number)]
    ";"       [reduce using rule 88 (cmp_expr)]
    $default  reduce using rule 88 (cmp_expr)


State 155

   85 val: arr_elements •
  101 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 95

    $default  reduce using rule 85 (val)


State 156

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr
   67 assign: var "=" arithm_expr •

    "+"  shift, and go to state 99
    "-"  shift, and go to state 100
    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 67 (assign)


State 157

   82 val: number •

    $default  reduce using rule 82 (val)


State 158

   65 assign: var "=" val •
   86 val: val • "," val

    ","  shift, and go to state 198

    $default  reduce using rule 65 (assign)


State 159

   66 assign: var "=" cmp_expr •
   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    "||"  shift, and go to state 109
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 66 (assign)


State 160

   68 assign: var "=" merge_arr •

    $default  reduce using rule 68 (assign)


State 161

   74 oper_eq: var "+=" number •

    $default  reduce using rule 74 (oper_eq)


State 162

   75 oper_eq: var "-=" number •

    $default  reduce using rule 75 (oper_eq)


State 163

   11 var: var • "," var
   11    | var "," var •

    $default  reduce using rule 11 (var)


State 164

  101 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 101 (merge_arr)


State 165

   29 func: IDENTIFIER "(" • print_params ")"
   47 params: "(" • ")"
   48       | "(" • type_params ")"

    IDENTIFIER  shift, and go to state 115
    STRING      shift, and go to state 116
    INTEGER     shift, and go to state 117
    FLOAT       shift, and go to state 118
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SSHORT      shift, and go to state 14
    ")"         shift, and go to state 199
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    type          go to state 200
    pos_elem      go to state 119
    func          go to state 120
    print_params  go to state 121
    type_params   go to state 201


State 166

   46 name_func: name_func IDENTIFIER params • NEWLINE

    NEWLINE  shift, and go to state 202


State 167

   56 arithm_expr: IDENTIFIER •

    $default  reduce using rule 56 (arithm_expr)


State 168

   57 arithm_expr: arithm_expr • "+" arithm_expr
   57            | arithm_expr "+" arithm_expr •
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 57 (arithm_expr)


State 169

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   58            | arithm_expr "-" arithm_expr •
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 58 (arithm_expr)


State 170

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   59            | arithm_expr "*" arithm_expr •
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 59 (arithm_expr)


State 171

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   60            | arithm_expr "/" arithm_expr •
   61            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 60 (arithm_expr)


State 172

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr
   61            | arithm_expr "%" arithm_expr •

    $default  reduce using rule 61 (arithm_expr)


State 173

  100 cmp_expr: cmp_expr "<" "<" • arithm_expr

    IDENTIFIER  shift, and go to state 167
    INTEGER     shift, and go to state 61
    FLOAT       shift, and go to state 62
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 38
    arithm_expr  go to state 203


State 174

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   91         | cmp_expr "<" cmp_expr •
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 91 (cmp_expr)


State 175

   99 cmp_expr: cmp_expr ">" ">" • arithm_expr

    IDENTIFIER  shift, and go to state 167
    INTEGER     shift, and go to state 61
    FLOAT       shift, and go to state 62
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 38
    arithm_expr  go to state 204


State 176

   90 cmp_expr: cmp_expr • ">" cmp_expr
   90         | cmp_expr ">" cmp_expr •
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 90 (cmp_expr)


State 177

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr "&&" cmp_expr •
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "<="  shift, and go to state 108
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 97 (cmp_expr)


State 178

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   92         | cmp_expr "<=" cmp_expr •
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 92 (cmp_expr)


State 179

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   96         | cmp_expr "||" cmp_expr •
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 96 (cmp_expr)


State 180

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   93         | cmp_expr ">=" cmp_expr •
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 93 (cmp_expr)


State 181

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   94         | cmp_expr "==" cmp_expr •
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "<="  shift, and go to state 108
    ">="  shift, and go to state 110

    $default  reduce using rule 94 (cmp_expr)


State 182

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   95         | cmp_expr "!=" cmp_expr •
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "<="  shift, and go to state 108
    ">="  shift, and go to state 110

    $default  reduce using rule 95 (cmp_expr)


State 183

   12 pos_elem: IDENTIFIER "[" • INTEGER "]"
   13         | IDENTIFIER "[" • IDENTIFIER "]"

    IDENTIFIER  shift, and go to state 205
    INTEGER     shift, and go to state 206


State 184

   29 func: IDENTIFIER "(" print_params ")" •

    $default  reduce using rule 29 (func)


State 185

   43 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 115
    STRING      shift, and go to state 116
    INTEGER     shift, and go to state 117
    FLOAT       shift, and go to state 118
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 119
    func          go to state 120
    print_params  go to state 207


State 186

  118 condition: "(" condition ")" •
  121          | condition ")" •

    IDENTIFIER  reduce using rule 118 (condition)
    IDENTIFIER  [reduce using rule 121 (condition)]
    INTEGER     reduce using rule 118 (condition)
    INTEGER     [reduce using rule 121 (condition)]
    FLOAT       reduce using rule 118 (condition)
    FLOAT       [reduce using rule 121 (condition)]
    SIF         reduce using rule 118 (condition)
    SIF         [reduce using rule 121 (condition)]
    SDOUBLE     reduce using rule 118 (condition)
    SDOUBLE     [reduce using rule 121 (condition)]
    SINT        reduce using rule 118 (condition)
    SINT        [reduce using rule 121 (condition)]
    SFUNC       reduce using rule 118 (condition)
    SFUNC       [reduce using rule 121 (condition)]
    SLONG       reduce using rule 118 (condition)
    SLONG       [reduce using rule 121 (condition)]
    SFLOAT      reduce using rule 118 (condition)
    SFLOAT      [reduce using rule 121 (condition)]
    SFOR        reduce using rule 118 (condition)
    SFOR        [reduce using rule 121 (condition)]
    SSHORT      reduce using rule 118 (condition)
    SSHORT      [reduce using rule 121 (condition)]
    SWHILE      reduce using rule 118 (condition)
    SWHILE      [reduce using rule 121 (condition)]
    "+"         reduce using rule 118 (condition)
    "+"         [reduce using rule 121 (condition)]
    "--"        reduce using rule 118 (condition)
    "--"        [reduce using rule 121 (condition)]
    "-"         reduce using rule 118 (condition)
    "-"         [reduce using rule 121 (condition)]
    "!"         reduce using rule 118 (condition)
    "!"         [reduce using rule 121 (condition)]
    "++"        reduce using rule 118 (condition)
    "++"        [reduce using rule 121 (condition)]
    ")"         reduce using rule 118 (condition)
    ")"         [reduce using rule 121 (condition)]
    "["         reduce using rule 118 (condition)
    "["         [reduce using rule 121 (condition)]
    "{"         reduce using rule 118 (condition)
    "{"         [reduce using rule 121 (condition)]
    SSCAN       reduce using rule 118 (condition)
    SSCAN       [reduce using rule 121 (condition)]
    SPRINT      reduce using rule 118 (condition)
    SPRINT      [reduce using rule 121 (condition)]
    SLEN        reduce using rule 118 (condition)
    SLEN        [reduce using rule 121 (condition)]
    SCMP        reduce using rule 118 (condition)
    SCMP        [reduce using rule 121 (condition)]
    NEWLINE     reduce using rule 118 (condition)
    NEWLINE     [reduce using rule 121 (condition)]
    "+-"        reduce using rule 118 (condition)
    "+-"        [reduce using rule 121 (condition)]
    "-+"        reduce using rule 118 (condition)
    "-+"        [reduce using rule 121 (condition)]
    "))"        reduce using rule 118 (condition)
    "))"        [reduce using rule 121 (condition)]
    $default    reduce using rule 118 (condition)


State 187

  120 condition: "(" condition "))" •

    $default  reduce using rule 120 (condition)


State 188

  119 condition: "((" condition ")" •
  121          | condition ")" •

    ")"       reduce using rule 119 (condition)
    ")"       [reduce using rule 121 (condition)]
    $default  reduce using rule 119 (condition)


State 189

  125 for_statement: SFOR "(" assign ";" • cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 52
    INTEGER     shift, and go to state 53
    FLOAT       shift, and go to state 54
    "!"         shift, and go to state 19

    cmp_expr  go to state 208


State 190

   19 integ: integ • "," integ
   19      | integ "," integ •

    $default  reduce using rule 19 (integ)


State 191

   21 fl: fl • "," fl
   21   | fl "," fl •

    $default  reduce using rule 21 (fl)


State 192

   23 str: str • "," str
   23    | str "," str •

    $default  reduce using rule 23 (str)


State 193

   25 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 25 (func)


State 194

   28 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 28 (func)


State 195

   26 func: SLEN "(" len_params ")" •

    $default  reduce using rule 26 (func)


State 196

   27 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 27 (func)


State 197

   36 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 142
    STRING      shift, and go to state 143

    cmp_params  go to state 209


State 198

   86 val: val "," • val

    IDENTIFIER  shift, and go to state 210
    STRING      shift, and go to state 152
    INTEGER     shift, and go to state 146
    FLOAT       shift, and go to state 147
    "["         shift, and go to state 21

    pos_elem      go to state 148
    arr_elements  go to state 211
    number        go to state 157
    val           go to state 212


State 199

   47 params: "(" ")" •

    $default  reduce using rule 47 (params)


State 200

   49 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 213


State 201

   48 params: "(" type_params • ")"
   50 type_params: type_params • "," type_params

    ")"  shift, and go to state 214
    ","  shift, and go to state 215


State 202

   46 name_func: name_func IDENTIFIER params NEWLINE •

    $default  reduce using rule 46 (name_func)


State 203

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr
  100 cmp_expr: cmp_expr "<" "<" arithm_expr •

    "+"  shift, and go to state 99
    "-"  shift, and go to state 100
    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 100 (cmp_expr)


State 204

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr
   99 cmp_expr: cmp_expr ">" ">" arithm_expr •

    "+"  shift, and go to state 99
    "-"  shift, and go to state 100
    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 99 (cmp_expr)


State 205

   13 pos_elem: IDENTIFIER "[" IDENTIFIER • "]"

    "]"  shift, and go to state 216


State 206

   12 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 217


State 207

   43 print_params: print_params • "," print_params
   43             | print_params "," print_params •

    $default  reduce using rule 43 (print_params)


State 208

   90 cmp_expr: cmp_expr • ">" cmp_expr
   91         | cmp_expr • "<" cmp_expr
   92         | cmp_expr • "<=" cmp_expr
   93         | cmp_expr • ">=" cmp_expr
   94         | cmp_expr • "==" cmp_expr
   95         | cmp_expr • "!=" cmp_expr
   96         | cmp_expr • "||" cmp_expr
   97         | cmp_expr • "&&" cmp_expr
   99         | cmp_expr • ">" ">" arithm_expr
  100         | cmp_expr • "<" "<" arithm_expr
  125 for_statement: SFOR "(" assign ";" cmp_expr • ";" oper_eq ")" decl_statement

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    "||"  shift, and go to state 109
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112
    ";"   shift, and go to state 218


State 209

   36 cmp_params: cmp_params • "," cmp_params
   36           | cmp_params "," cmp_params •

    $default  reduce using rule 36 (cmp_params)


State 210

   12 pos_elem: IDENTIFIER • "[" INTEGER "]"
   13         | IDENTIFIER • "[" IDENTIFIER "]"
   83 val: IDENTIFIER •

    "["  shift, and go to state 183

    $default  reduce using rule 83 (val)


State 211

   85 val: arr_elements •

    $default  reduce using rule 85 (val)


State 212

   86 val: val • "," val
   86    | val "," val •

    $default  reduce using rule 86 (val)


State 213

   49 type_params: type IDENTIFIER •

    $default  reduce using rule 49 (type_params)


State 214

   48 params: "(" type_params ")" •

    $default  reduce using rule 48 (params)


State 215

   50 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 8
    SINT     shift, and go to state 9
    SLONG    shift, and go to state 11
    SFLOAT   shift, and go to state 12
    SSHORT   shift, and go to state 14

    type         go to state 200
    type_params  go to state 219


State 216

   13 pos_elem: IDENTIFIER "[" IDENTIFIER "]" •

    $default  reduce using rule 13 (pos_elem)


State 217

   12 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 12 (pos_elem)


State 218

  125 for_statement: SFOR "(" assign ";" cmp_expr ";" • oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 64
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    var      go to state 220
    oper_eq  go to state 221


State 219

   50 type_params: type_params • "," type_params
   50            | type_params "," type_params •

    $default  reduce using rule 50 (type_params)


State 220

   11 var: var • "," var
   70 oper_eq: var • "++"
   71        | var • "--"
   74        | var • "+=" number
   75        | var • "-=" number
   76        | var • "*=" number
   77        | var • "/=" number
   78        | var • "+-"
   79        | var • "-+"

    "*="  shift, and go to state 85
    "--"  shift, and go to state 86
    "/="  shift, and go to state 87
    "+="  shift, and go to state 89
    "-="  shift, and go to state 90
    "++"  shift, and go to state 91
    ","   shift, and go to state 92
    "+-"  shift, and go to state 93
    "-+"  shift, and go to state 94


State 221

  125 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq • ")" decl_statement

    ")"  shift, and go to state 222


State 222

  125 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27
    "+-"        shift, and go to state 28
    "-+"        shift, and go to state 29

    decl_var         go to state 30
    type             go to state 31
    var              go to state 32
    arr_elements     go to state 33
    build_func       go to state 34
    func             go to state 35
    decl_func        go to state 36
    name_func        go to state 37
    sign             go to state 38
    arithm_expr      go to state 39
    assign           go to state 40
    oper_eq          go to state 41
    cmp_expr         go to state 42
    merge_arr        go to state 43
    decl_statement   go to state 223
    if_statement     go to state 46
    block_statement  go to state 47
    while_statement  go to state 48
    for_statement    go to state 49


State 223

  125 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement •

    $default  reduce using rule 125 (for_statement)
