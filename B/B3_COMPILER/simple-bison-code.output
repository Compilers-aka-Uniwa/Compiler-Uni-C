Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "&"
    "\\"
    TOKEN_ERROR


State 4 conflicts: 28 reduce/reduce
State 5 conflicts: 25 reduce/reduce
State 6 conflicts: 25 reduce/reduce
State 37 conflicts: 2 shift/reduce
State 90 conflicts: 28 reduce/reduce
State 106 conflicts: 24 reduce/reduce
State 142 conflicts: 2 reduce/reduce
State 144 conflicts: 2 reduce/reduce
State 145 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_statements NEWLINE
    2        | program error NEWLINE
    3        | ε

    4 decl_var: type var

    5 type: SINT
    6     | SFLOAT
    7     | SDOUBLE
    8     | SSHORT
    9     | SLONG
   10     | IDENTIFIER

   11 var: IDENTIFIER
   12    | var "," var

   13 pos_elem: IDENTIFIER "[" INTEGER "]"
   14         | IDENTIFIER "[" IDENTIFIER "]"

   15 arr_elements: "[" "]"
   16             | "[" integ "]"
   17             | "[" fl "]"
   18             | "[" str "]"

   19 integ: INTEGER
   20      | integ "," integ

   21 fl: FLOAT
   22   | fl "," fl

   23 str: STRING
   24    | str "," str

   25 build_func: func

   26 func: SSCAN "(" scan_params ")"
   27     | SLEN "(" len_params ")"
   28     | SCMP "(" cmp_params ")"
   29     | SPRINT "(" print_params ")"
   30     | IDENTIFIER "(" print_params ")"

   31 scan_params: IDENTIFIER

   32 len_params: arr_elements
   33           | STRING
   34           | IDENTIFIER

   35 cmp_params: STRING
   36           | IDENTIFIER
   37           | cmp_params "," cmp_params

   38 print_params: STRING
   39             | IDENTIFIER
   40             | INTEGER
   41             | FLOAT
   42             | func
   43             | pos_elem
   44             | print_params "," print_params

   45 decl_func: name_func decl_statement

   46 name_func: SFUNC
   47          | name_func IDENTIFIER params NEWLINE

   48 params: "(" ")"
   49       | "(" type_params ")"

   50 type_params: type IDENTIFIER
   51            | type_params "," type_params

   52 sign: INTEGER
   53     | FLOAT
   54     | "+" sign
   55     | "-" sign

   56 arithm_expr: sign
   57            | IDENTIFIER
   58            | arithm_expr "+" arithm_expr
   59            | arithm_expr "-" arithm_expr
   60            | arithm_expr "*" arithm_expr
   61            | arithm_expr "/" arithm_expr
   62            | arithm_expr "%" arithm_expr
   63            | arithm_expr "*" "*" arithm_expr

   64 number: INTEGER
   65       | FLOAT
   66       | pos_elem

   67 assign: var "=" val
   68       | var "=" cmp_expr
   69       | var "=" arithm_expr
   70       | var "=" merge_arr
   71       | oper_eq

   72 oper_eq: var "++"
   73        | var "--"
   74        | "++" var
   75        | "--" var
   76        | var "+=" number
   77        | var "-=" number
   78        | var "*=" number
   79        | var "/=" number

   80 val: number
   81    | IDENTIFIER
   82    | STRING
   83    | arr_elements
   84    | val "," val

   85 cmp_expr: INTEGER
   86         | FLOAT
   87         | IDENTIFIER
   88         | cmp_expr ">" cmp_expr
   89         | cmp_expr "<" cmp_expr
   90         | cmp_expr "<=" cmp_expr
   91         | cmp_expr ">=" cmp_expr
   92         | cmp_expr "==" cmp_expr
   93         | cmp_expr "!=" cmp_expr
   94         | cmp_expr "||" cmp_expr
   95         | cmp_expr "&&" cmp_expr
   96         | "!" cmp_expr

   97 merge_arr: arr_elements "+" arr_elements

   98 decl_statements: decl_statement
   99                | decl_statements decl_statement

  100 decl_statement: if_statement
  101               | while_statement
  102               | for_statement
  103               | decl_var ";"
  104               | build_func ";"
  105               | decl_func
  106               | assign ";"
  107               | arithm_expr
  108               | cmp_expr
  109               | merge_arr
  110               | block_statement
  111               | NEWLINE

  112 if_statement: SIF condition decl_statement

  113 condition: cmp_expr
  114          | "(" condition ")"

  115 block_statement: "{" decl_statements "}"

  116 while_statement: SWHILE condition decl_statement

  117 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256) 2
    IDENTIFIER <sval> (258) 10 11 13 14 30 31 34 36 39 47 50 57 81 87
    STRING <sval> (259) 23 33 35 38 82
    INTEGER <ival> (260) 13 19 40 52 64 85
    FLOAT <fval> (261) 21 41 53 65 86
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 112
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 7
    SINT <sval> (268) 5
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 46
    SELSE <sval> (271)
    SLONG <sval> (272) 9
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 6
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279) 117
    SSHORT <sval> (280) 8
    SWHILE <sval> (281) 116
    "+" (282) 54 58 97
    "*=" (283) 78
    "--" (284) 73 75
    "-" (285) 55 59
    "/=" (286) 79
    "<" (287) 89
    "*" (288) 60 63
    "!" (289) 96
    ">" (290) 88
    "/" (291) 61
    "&&" (292) 95
    "<=" (293) 90
    "%" (294) 62
    "||" (295) 94
    ">=" (296) 91
    "=" (297) 67 68 69 70
    "==" (298) 92
    "&" (299)
    "+=" (300) 76
    "!=" (301) 93
    "-=" (302) 77
    "++" (303) 72 74
    "(" (304) 26 27 28 29 30 48 49 114 117
    ")" (305) 26 27 28 29 30 48 49 114 117
    "[" (306) 13 14 15 16 17 18
    "]" (307) 13 14 15 16 17 18
    "{" (308) 115
    "}" (309) 115
    "," (310) 12 20 22 24 37 44 51 84
    "\\" (311)
    ";" (312) 103 104 106 117
    SSCAN (313) 26
    SPRINT (314) 29
    SLEN (315) 27
    SCMP (316) 28
    NEWLINE (317) 1 2 47 111
    TOKEN_ERROR (318)


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program <sval> (65)
        on left: 1 2 3
        on right: 0 1 2
    decl_var <sval> (66)
        on left: 4
        on right: 103
    type <sval> (67)
        on left: 5 6 7 8 9 10
        on right: 4 50
    var <sval> (68)
        on left: 11 12
        on right: 4 12 67 68 69 70 72 73 74 75 76 77 78 79
    pos_elem <sval> (69)
        on left: 13 14
        on right: 43 66
    arr_elements <sval> (70)
        on left: 15 16 17 18
        on right: 32 83 97
    integ <sval> (71)
        on left: 19 20
        on right: 16 20
    fl <sval> (72)
        on left: 21 22
        on right: 17 22
    str <sval> (73)
        on left: 23 24
        on right: 18 24
    build_func <sval> (74)
        on left: 25
        on right: 104
    func <sval> (75)
        on left: 26 27 28 29 30
        on right: 25 42
    scan_params <sval> (76)
        on left: 31
        on right: 26
    len_params <sval> (77)
        on left: 32 33 34
        on right: 27
    cmp_params <sval> (78)
        on left: 35 36 37
        on right: 28 37
    print_params <sval> (79)
        on left: 38 39 40 41 42 43 44
        on right: 29 30 44
    decl_func <sval> (80)
        on left: 45
        on right: 105
    name_func <sval> (81)
        on left: 46 47
        on right: 45 47
    params <sval> (82)
        on left: 48 49
        on right: 47
    type_params <sval> (83)
        on left: 50 51
        on right: 49 51
    sign <sval> (84)
        on left: 52 53 54 55
        on right: 54 55 56
    arithm_expr <sval> (85)
        on left: 56 57 58 59 60 61 62 63
        on right: 58 59 60 61 62 63 69 107
    number <sval> (86)
        on left: 64 65 66
        on right: 76 77 78 79 80
    assign <sval> (87)
        on left: 67 68 69 70 71
        on right: 106 117
    oper_eq <sval> (88)
        on left: 72 73 74 75 76 77 78 79
        on right: 71 117
    val <sval> (89)
        on left: 80 81 82 83 84
        on right: 67 84
    cmp_expr <sval> (90)
        on left: 85 86 87 88 89 90 91 92 93 94 95 96
        on right: 68 88 89 90 91 92 93 94 95 96 108 113 117
    merge_arr <sval> (91)
        on left: 97
        on right: 70 109
    decl_statements <sval> (92)
        on left: 98 99
        on right: 1 99 115
    decl_statement <sval> (93)
        on left: 100 101 102 103 104 105 106 107 108 109 110 111
        on right: 45 98 99 112 116 117
    if_statement <sval> (94)
        on left: 112
        on right: 100
    condition <sval> (95)
        on left: 113 114
        on right: 112 114 116
    block_statement <sval> (96)
        on left: 115
        on right: 110
    while_statement <sval> (97)
        on left: 116
        on right: 101
    for_statement <sval> (98)
        on left: 117
        on right: 102


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_statements NEWLINE
    2        | program • error NEWLINE

    $end        shift, and go to state 2
    error       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statements  go to state 42
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 2

    0 $accept: program $end •

    $default  accept


State 3

    2 program: program error • NEWLINE

    NEWLINE  shift, and go to state 48


State 4

   10 type: IDENTIFIER •
   11 var: IDENTIFIER •
   30 func: IDENTIFIER • "(" print_params ")"
   57 arithm_expr: IDENTIFIER •
   87 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 49

    IDENTIFIER  reduce using rule 10 (type)
    IDENTIFIER  [reduce using rule 57 (arithm_expr)]
    IDENTIFIER  [reduce using rule 87 (cmp_expr)]
    INTEGER     reduce using rule 57 (arithm_expr)
    INTEGER     [reduce using rule 87 (cmp_expr)]
    FLOAT       reduce using rule 57 (arithm_expr)
    FLOAT       [reduce using rule 87 (cmp_expr)]
    SIF         reduce using rule 57 (arithm_expr)
    SIF         [reduce using rule 87 (cmp_expr)]
    SDOUBLE     reduce using rule 57 (arithm_expr)
    SDOUBLE     [reduce using rule 87 (cmp_expr)]
    SINT        reduce using rule 57 (arithm_expr)
    SINT        [reduce using rule 87 (cmp_expr)]
    SFUNC       reduce using rule 57 (arithm_expr)
    SFUNC       [reduce using rule 87 (cmp_expr)]
    SLONG       reduce using rule 57 (arithm_expr)
    SLONG       [reduce using rule 87 (cmp_expr)]
    SFLOAT      reduce using rule 57 (arithm_expr)
    SFLOAT      [reduce using rule 87 (cmp_expr)]
    SFOR        reduce using rule 57 (arithm_expr)
    SFOR        [reduce using rule 87 (cmp_expr)]
    SSHORT      reduce using rule 57 (arithm_expr)
    SSHORT      [reduce using rule 87 (cmp_expr)]
    SWHILE      reduce using rule 57 (arithm_expr)
    SWHILE      [reduce using rule 87 (cmp_expr)]
    "+"         reduce using rule 57 (arithm_expr)
    "+"         [reduce using rule 87 (cmp_expr)]
    "*="        reduce using rule 11 (var)
    "--"        reduce using rule 11 (var)
    "--"        [reduce using rule 57 (arithm_expr)]
    "--"        [reduce using rule 87 (cmp_expr)]
    "-"         reduce using rule 57 (arithm_expr)
    "-"         [reduce using rule 87 (cmp_expr)]
    "/="        reduce using rule 11 (var)
    "<"         reduce using rule 87 (cmp_expr)
    "!"         reduce using rule 57 (arithm_expr)
    "!"         [reduce using rule 87 (cmp_expr)]
    ">"         reduce using rule 87 (cmp_expr)
    "&&"        reduce using rule 87 (cmp_expr)
    "<="        reduce using rule 87 (cmp_expr)
    "||"        reduce using rule 87 (cmp_expr)
    ">="        reduce using rule 87 (cmp_expr)
    "="         reduce using rule 11 (var)
    "=="        reduce using rule 87 (cmp_expr)
    "+="        reduce using rule 11 (var)
    "!="        reduce using rule 87 (cmp_expr)
    "-="        reduce using rule 11 (var)
    "++"        reduce using rule 11 (var)
    "++"        [reduce using rule 57 (arithm_expr)]
    "++"        [reduce using rule 87 (cmp_expr)]
    "["         reduce using rule 57 (arithm_expr)
    "["         [reduce using rule 87 (cmp_expr)]
    "{"         reduce using rule 57 (arithm_expr)
    "{"         [reduce using rule 87 (cmp_expr)]
    "}"         reduce using rule 57 (arithm_expr)
    "}"         [reduce using rule 87 (cmp_expr)]
    ","         reduce using rule 11 (var)
    SSCAN       reduce using rule 57 (arithm_expr)
    SSCAN       [reduce using rule 87 (cmp_expr)]
    SPRINT      reduce using rule 57 (arithm_expr)
    SPRINT      [reduce using rule 87 (cmp_expr)]
    SLEN        reduce using rule 57 (arithm_expr)
    SLEN        [reduce using rule 87 (cmp_expr)]
    SCMP        reduce using rule 57 (arithm_expr)
    SCMP        [reduce using rule 87 (cmp_expr)]
    NEWLINE     reduce using rule 57 (arithm_expr)
    NEWLINE     [reduce using rule 87 (cmp_expr)]
    $default    reduce using rule 57 (arithm_expr)


State 5

   52 sign: INTEGER •
   85 cmp_expr: INTEGER •

    IDENTIFIER  reduce using rule 52 (sign)
    IDENTIFIER  [reduce using rule 85 (cmp_expr)]
    INTEGER     reduce using rule 52 (sign)
    INTEGER     [reduce using rule 85 (cmp_expr)]
    FLOAT       reduce using rule 52 (sign)
    FLOAT       [reduce using rule 85 (cmp_expr)]
    SIF         reduce using rule 52 (sign)
    SIF         [reduce using rule 85 (cmp_expr)]
    SDOUBLE     reduce using rule 52 (sign)
    SDOUBLE     [reduce using rule 85 (cmp_expr)]
    SINT        reduce using rule 52 (sign)
    SINT        [reduce using rule 85 (cmp_expr)]
    SFUNC       reduce using rule 52 (sign)
    SFUNC       [reduce using rule 85 (cmp_expr)]
    SLONG       reduce using rule 52 (sign)
    SLONG       [reduce using rule 85 (cmp_expr)]
    SFLOAT      reduce using rule 52 (sign)
    SFLOAT      [reduce using rule 85 (cmp_expr)]
    SFOR        reduce using rule 52 (sign)
    SFOR        [reduce using rule 85 (cmp_expr)]
    SSHORT      reduce using rule 52 (sign)
    SSHORT      [reduce using rule 85 (cmp_expr)]
    SWHILE      reduce using rule 52 (sign)
    SWHILE      [reduce using rule 85 (cmp_expr)]
    "+"         reduce using rule 52 (sign)
    "+"         [reduce using rule 85 (cmp_expr)]
    "--"        reduce using rule 52 (sign)
    "--"        [reduce using rule 85 (cmp_expr)]
    "-"         reduce using rule 52 (sign)
    "-"         [reduce using rule 85 (cmp_expr)]
    "<"         reduce using rule 85 (cmp_expr)
    "!"         reduce using rule 52 (sign)
    "!"         [reduce using rule 85 (cmp_expr)]
    ">"         reduce using rule 85 (cmp_expr)
    "&&"        reduce using rule 85 (cmp_expr)
    "<="        reduce using rule 85 (cmp_expr)
    "||"        reduce using rule 85 (cmp_expr)
    ">="        reduce using rule 85 (cmp_expr)
    "=="        reduce using rule 85 (cmp_expr)
    "!="        reduce using rule 85 (cmp_expr)
    "++"        reduce using rule 52 (sign)
    "++"        [reduce using rule 85 (cmp_expr)]
    "["         reduce using rule 52 (sign)
    "["         [reduce using rule 85 (cmp_expr)]
    "{"         reduce using rule 52 (sign)
    "{"         [reduce using rule 85 (cmp_expr)]
    "}"         reduce using rule 52 (sign)
    "}"         [reduce using rule 85 (cmp_expr)]
    SSCAN       reduce using rule 52 (sign)
    SSCAN       [reduce using rule 85 (cmp_expr)]
    SPRINT      reduce using rule 52 (sign)
    SPRINT      [reduce using rule 85 (cmp_expr)]
    SLEN        reduce using rule 52 (sign)
    SLEN        [reduce using rule 85 (cmp_expr)]
    SCMP        reduce using rule 52 (sign)
    SCMP        [reduce using rule 85 (cmp_expr)]
    NEWLINE     reduce using rule 52 (sign)
    NEWLINE     [reduce using rule 85 (cmp_expr)]
    $default    reduce using rule 52 (sign)


State 6

   53 sign: FLOAT •
   86 cmp_expr: FLOAT •

    IDENTIFIER  reduce using rule 53 (sign)
    IDENTIFIER  [reduce using rule 86 (cmp_expr)]
    INTEGER     reduce using rule 53 (sign)
    INTEGER     [reduce using rule 86 (cmp_expr)]
    FLOAT       reduce using rule 53 (sign)
    FLOAT       [reduce using rule 86 (cmp_expr)]
    SIF         reduce using rule 53 (sign)
    SIF         [reduce using rule 86 (cmp_expr)]
    SDOUBLE     reduce using rule 53 (sign)
    SDOUBLE     [reduce using rule 86 (cmp_expr)]
    SINT        reduce using rule 53 (sign)
    SINT        [reduce using rule 86 (cmp_expr)]
    SFUNC       reduce using rule 53 (sign)
    SFUNC       [reduce using rule 86 (cmp_expr)]
    SLONG       reduce using rule 53 (sign)
    SLONG       [reduce using rule 86 (cmp_expr)]
    SFLOAT      reduce using rule 53 (sign)
    SFLOAT      [reduce using rule 86 (cmp_expr)]
    SFOR        reduce using rule 53 (sign)
    SFOR        [reduce using rule 86 (cmp_expr)]
    SSHORT      reduce using rule 53 (sign)
    SSHORT      [reduce using rule 86 (cmp_expr)]
    SWHILE      reduce using rule 53 (sign)
    SWHILE      [reduce using rule 86 (cmp_expr)]
    "+"         reduce using rule 53 (sign)
    "+"         [reduce using rule 86 (cmp_expr)]
    "--"        reduce using rule 53 (sign)
    "--"        [reduce using rule 86 (cmp_expr)]
    "-"         reduce using rule 53 (sign)
    "-"         [reduce using rule 86 (cmp_expr)]
    "<"         reduce using rule 86 (cmp_expr)
    "!"         reduce using rule 53 (sign)
    "!"         [reduce using rule 86 (cmp_expr)]
    ">"         reduce using rule 86 (cmp_expr)
    "&&"        reduce using rule 86 (cmp_expr)
    "<="        reduce using rule 86 (cmp_expr)
    "||"        reduce using rule 86 (cmp_expr)
    ">="        reduce using rule 86 (cmp_expr)
    "=="        reduce using rule 86 (cmp_expr)
    "!="        reduce using rule 86 (cmp_expr)
    "++"        reduce using rule 53 (sign)
    "++"        [reduce using rule 86 (cmp_expr)]
    "["         reduce using rule 53 (sign)
    "["         [reduce using rule 86 (cmp_expr)]
    "{"         reduce using rule 53 (sign)
    "{"         [reduce using rule 86 (cmp_expr)]
    "}"         reduce using rule 53 (sign)
    "}"         [reduce using rule 86 (cmp_expr)]
    SSCAN       reduce using rule 53 (sign)
    SSCAN       [reduce using rule 86 (cmp_expr)]
    SPRINT      reduce using rule 53 (sign)
    SPRINT      [reduce using rule 86 (cmp_expr)]
    SLEN        reduce using rule 53 (sign)
    SLEN        [reduce using rule 86 (cmp_expr)]
    SCMP        reduce using rule 53 (sign)
    SCMP        [reduce using rule 86 (cmp_expr)]
    NEWLINE     reduce using rule 53 (sign)
    NEWLINE     [reduce using rule 86 (cmp_expr)]
    $default    reduce using rule 53 (sign)


State 7

  112 if_statement: SIF • condition decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53

    cmp_expr   go to state 54
    condition  go to state 55


State 8

    7 type: SDOUBLE •

    $default  reduce using rule 7 (type)


State 9

    5 type: SINT •

    $default  reduce using rule 5 (type)


State 10

   46 name_func: SFUNC •

    $default  reduce using rule 46 (name_func)


State 11

    9 type: SLONG •

    $default  reduce using rule 9 (type)


State 12

    6 type: SFLOAT •

    $default  reduce using rule 6 (type)


State 13

  117 for_statement: SFOR • "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement

    "("  shift, and go to state 56


State 14

    8 type: SSHORT •

    $default  reduce using rule 8 (type)


State 15

  116 while_statement: SWHILE • condition decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53

    cmp_expr   go to state 54
    condition  go to state 57


State 16

   54 sign: "+" • sign

    INTEGER  shift, and go to state 58
    FLOAT    shift, and go to state 59
    "+"      shift, and go to state 16
    "-"      shift, and go to state 18

    sign  go to state 60


State 17

   75 oper_eq: "--" • var

    IDENTIFIER  shift, and go to state 61

    var  go to state 62


State 18

   55 sign: "-" • sign

    INTEGER  shift, and go to state 58
    FLOAT    shift, and go to state 59
    "+"      shift, and go to state 16
    "-"      shift, and go to state 18

    sign  go to state 63


State 19

   96 cmp_expr: "!" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 64


State 20

   74 oper_eq: "++" • var

    IDENTIFIER  shift, and go to state 61

    var  go to state 65


State 21

   15 arr_elements: "[" • "]"
   16             | "[" • integ "]"
   17             | "[" • fl "]"
   18             | "[" • str "]"

    STRING   shift, and go to state 66
    INTEGER  shift, and go to state 67
    FLOAT    shift, and go to state 68
    "]"      shift, and go to state 69

    integ  go to state 70
    fl     go to state 71
    str    go to state 72


State 22

  115 block_statement: "{" • decl_statements "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statements  go to state 73
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 23

   26 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 74


State 24

   29 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 75


State 25

   27 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 76


State 26

   28 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 77


State 27

  111 decl_statement: NEWLINE •

    $default  reduce using rule 111 (decl_statement)


State 28

  103 decl_statement: decl_var • ";"

    ";"  shift, and go to state 78


State 29

    4 decl_var: type • var

    IDENTIFIER  shift, and go to state 61

    var  go to state 79


State 30

   12 var: var • "," var
   67 assign: var • "=" val
   68       | var • "=" cmp_expr
   69       | var • "=" arithm_expr
   70       | var • "=" merge_arr
   72 oper_eq: var • "++"
   73        | var • "--"
   76        | var • "+=" number
   77        | var • "-=" number
   78        | var • "*=" number
   79        | var • "/=" number

    "*="  shift, and go to state 80
    "--"  shift, and go to state 81
    "/="  shift, and go to state 82
    "="   shift, and go to state 83
    "+="  shift, and go to state 84
    "-="  shift, and go to state 85
    "++"  shift, and go to state 86
    ","   shift, and go to state 87


State 31

   97 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 88


State 32

  104 decl_statement: build_func • ";"

    ";"  shift, and go to state 89


State 33

   25 build_func: func •

    $default  reduce using rule 25 (build_func)


State 34

  105 decl_statement: decl_func •

    $default  reduce using rule 105 (decl_statement)


State 35

   45 decl_func: name_func • decl_statement
   47 name_func: name_func • IDENTIFIER params NEWLINE

    IDENTIFIER  shift, and go to state 90
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 91
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 36

   56 arithm_expr: sign •

    $default  reduce using rule 56 (arithm_expr)


State 37

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   63            | arithm_expr • "*" "*" arithm_expr
  107 decl_statement: arithm_expr •

    "+"  shift, and go to state 92
    "-"  shift, and go to state 93
    "*"  shift, and go to state 94
    "/"  shift, and go to state 95
    "%"  shift, and go to state 96

    "+"       [reduce using rule 107 (decl_statement)]
    "-"       [reduce using rule 107 (decl_statement)]
    $default  reduce using rule 107 (decl_statement)


State 38

  106 decl_statement: assign • ";"

    ";"  shift, and go to state 97


State 39

   71 assign: oper_eq •

    $default  reduce using rule 71 (assign)


State 40

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
  108 decl_statement: cmp_expr •

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    "||"  shift, and go to state 102
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 108 (decl_statement)


State 41

  109 decl_statement: merge_arr •

    $default  reduce using rule 109 (decl_statement)


State 42

    1 program: program decl_statements • NEWLINE
   99 decl_statements: decl_statements • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 106

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 107
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 43

   98 decl_statements: decl_statement •

    $default  reduce using rule 98 (decl_statements)


State 44

  100 decl_statement: if_statement •

    $default  reduce using rule 100 (decl_statement)


State 45

  110 decl_statement: block_statement •

    $default  reduce using rule 110 (decl_statement)


State 46

  101 decl_statement: while_statement •

    $default  reduce using rule 101 (decl_statement)


State 47

  102 decl_statement: for_statement •

    $default  reduce using rule 102 (decl_statement)


State 48

    2 program: program error NEWLINE •

    $default  reduce using rule 2 (program)


State 49

   30 func: IDENTIFIER "(" • print_params ")"

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109
    INTEGER     shift, and go to state 110
    FLOAT       shift, and go to state 111
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 112
    func          go to state 113
    print_params  go to state 114


State 50

   87 cmp_expr: IDENTIFIER •

    $default  reduce using rule 87 (cmp_expr)


State 51

   85 cmp_expr: INTEGER •

    $default  reduce using rule 85 (cmp_expr)


State 52

   86 cmp_expr: FLOAT •

    $default  reduce using rule 86 (cmp_expr)


State 53

  114 condition: "(" • condition ")"

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53

    cmp_expr   go to state 54
    condition  go to state 115


State 54

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
  113 condition: cmp_expr •

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    "||"  shift, and go to state 102
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 113 (condition)


State 55

  112 if_statement: SIF condition • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 116
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 56

  117 for_statement: SFOR "(" • assign ";" cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 61
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20

    var      go to state 30
    assign   go to state 117
    oper_eq  go to state 39


State 57

  116 while_statement: SWHILE condition • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 118
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 58

   52 sign: INTEGER •

    $default  reduce using rule 52 (sign)


State 59

   53 sign: FLOAT •

    $default  reduce using rule 53 (sign)


State 60

   54 sign: "+" sign •

    $default  reduce using rule 54 (sign)


State 61

   11 var: IDENTIFIER •

    $default  reduce using rule 11 (var)


State 62

   12 var: var • "," var
   75 oper_eq: "--" var •

    ","  shift, and go to state 87

    $default  reduce using rule 75 (oper_eq)


State 63

   55 sign: "-" sign •

    $default  reduce using rule 55 (sign)


State 64

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   96         | "!" cmp_expr •

    $default  reduce using rule 96 (cmp_expr)


State 65

   12 var: var • "," var
   74 oper_eq: "++" var •

    ","  shift, and go to state 87

    $default  reduce using rule 74 (oper_eq)


State 66

   23 str: STRING •

    $default  reduce using rule 23 (str)


State 67

   19 integ: INTEGER •

    $default  reduce using rule 19 (integ)


State 68

   21 fl: FLOAT •

    $default  reduce using rule 21 (fl)


State 69

   15 arr_elements: "[" "]" •

    $default  reduce using rule 15 (arr_elements)


State 70

   16 arr_elements: "[" integ • "]"
   20 integ: integ • "," integ

    "]"  shift, and go to state 119
    ","  shift, and go to state 120


State 71

   17 arr_elements: "[" fl • "]"
   22 fl: fl • "," fl

    "]"  shift, and go to state 121
    ","  shift, and go to state 122


State 72

   18 arr_elements: "[" str • "]"
   24 str: str • "," str

    "]"  shift, and go to state 123
    ","  shift, and go to state 124


State 73

   99 decl_statements: decl_statements • decl_statement
  115 block_statement: "{" decl_statements • "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    "}"         shift, and go to state 125
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 107
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 74

   26 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 126

    scan_params  go to state 127


State 75

   29 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109
    INTEGER     shift, and go to state 110
    FLOAT       shift, and go to state 111
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 112
    func          go to state 113
    print_params  go to state 128


State 76

   27 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 129
    STRING      shift, and go to state 130
    "["         shift, and go to state 21

    arr_elements  go to state 131
    len_params    go to state 132


State 77

   28 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 133
    STRING      shift, and go to state 134

    cmp_params  go to state 135


State 78

  103 decl_statement: decl_var ";" •

    $default  reduce using rule 103 (decl_statement)


State 79

    4 decl_var: type var •
   12 var: var • "," var

    ","  shift, and go to state 87

    $default  reduce using rule 4 (decl_var)


State 80

   78 oper_eq: var "*=" • number

    IDENTIFIER  shift, and go to state 136
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138

    pos_elem  go to state 139
    number    go to state 140


State 81

   73 oper_eq: var "--" •

    $default  reduce using rule 73 (oper_eq)


State 82

   79 oper_eq: var "/=" • number

    IDENTIFIER  shift, and go to state 136
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138

    pos_elem  go to state 139
    number    go to state 141


State 83

   67 assign: var "=" • val
   68       | var "=" • cmp_expr
   69       | var "=" • arithm_expr
   70       | var "=" • merge_arr

    IDENTIFIER  shift, and go to state 142
    STRING      shift, and go to state 143
    INTEGER     shift, and go to state 144
    FLOAT       shift, and go to state 145
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "["         shift, and go to state 21

    pos_elem      go to state 139
    arr_elements  go to state 146
    sign          go to state 36
    arithm_expr   go to state 147
    number        go to state 148
    val           go to state 149
    cmp_expr      go to state 150
    merge_arr     go to state 151


State 84

   76 oper_eq: var "+=" • number

    IDENTIFIER  shift, and go to state 136
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138

    pos_elem  go to state 139
    number    go to state 152


State 85

   77 oper_eq: var "-=" • number

    IDENTIFIER  shift, and go to state 136
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138

    pos_elem  go to state 139
    number    go to state 153


State 86

   72 oper_eq: var "++" •

    $default  reduce using rule 72 (oper_eq)


State 87

   12 var: var "," • var

    IDENTIFIER  shift, and go to state 61

    var  go to state 154


State 88

   97 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 21

    arr_elements  go to state 155


State 89

  104 decl_statement: build_func ";" •

    $default  reduce using rule 104 (decl_statement)


State 90

   10 type: IDENTIFIER •
   11 var: IDENTIFIER •
   30 func: IDENTIFIER • "(" print_params ")"
   47 name_func: name_func IDENTIFIER • params NEWLINE
   57 arithm_expr: IDENTIFIER •
   87 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 156

    IDENTIFIER  reduce using rule 10 (type)
    IDENTIFIER  [reduce using rule 57 (arithm_expr)]
    IDENTIFIER  [reduce using rule 87 (cmp_expr)]
    INTEGER     reduce using rule 57 (arithm_expr)
    INTEGER     [reduce using rule 87 (cmp_expr)]
    FLOAT       reduce using rule 57 (arithm_expr)
    FLOAT       [reduce using rule 87 (cmp_expr)]
    SIF         reduce using rule 57 (arithm_expr)
    SIF         [reduce using rule 87 (cmp_expr)]
    SDOUBLE     reduce using rule 57 (arithm_expr)
    SDOUBLE     [reduce using rule 87 (cmp_expr)]
    SINT        reduce using rule 57 (arithm_expr)
    SINT        [reduce using rule 87 (cmp_expr)]
    SFUNC       reduce using rule 57 (arithm_expr)
    SFUNC       [reduce using rule 87 (cmp_expr)]
    SLONG       reduce using rule 57 (arithm_expr)
    SLONG       [reduce using rule 87 (cmp_expr)]
    SFLOAT      reduce using rule 57 (arithm_expr)
    SFLOAT      [reduce using rule 87 (cmp_expr)]
    SFOR        reduce using rule 57 (arithm_expr)
    SFOR        [reduce using rule 87 (cmp_expr)]
    SSHORT      reduce using rule 57 (arithm_expr)
    SSHORT      [reduce using rule 87 (cmp_expr)]
    SWHILE      reduce using rule 57 (arithm_expr)
    SWHILE      [reduce using rule 87 (cmp_expr)]
    "+"         reduce using rule 57 (arithm_expr)
    "+"         [reduce using rule 87 (cmp_expr)]
    "*="        reduce using rule 11 (var)
    "--"        reduce using rule 11 (var)
    "--"        [reduce using rule 57 (arithm_expr)]
    "--"        [reduce using rule 87 (cmp_expr)]
    "-"         reduce using rule 57 (arithm_expr)
    "-"         [reduce using rule 87 (cmp_expr)]
    "/="        reduce using rule 11 (var)
    "<"         reduce using rule 87 (cmp_expr)
    "!"         reduce using rule 57 (arithm_expr)
    "!"         [reduce using rule 87 (cmp_expr)]
    ">"         reduce using rule 87 (cmp_expr)
    "&&"        reduce using rule 87 (cmp_expr)
    "<="        reduce using rule 87 (cmp_expr)
    "||"        reduce using rule 87 (cmp_expr)
    ">="        reduce using rule 87 (cmp_expr)
    "="         reduce using rule 11 (var)
    "=="        reduce using rule 87 (cmp_expr)
    "+="        reduce using rule 11 (var)
    "!="        reduce using rule 87 (cmp_expr)
    "-="        reduce using rule 11 (var)
    "++"        reduce using rule 11 (var)
    "++"        [reduce using rule 57 (arithm_expr)]
    "++"        [reduce using rule 87 (cmp_expr)]
    "["         reduce using rule 57 (arithm_expr)
    "["         [reduce using rule 87 (cmp_expr)]
    "{"         reduce using rule 57 (arithm_expr)
    "{"         [reduce using rule 87 (cmp_expr)]
    "}"         reduce using rule 57 (arithm_expr)
    "}"         [reduce using rule 87 (cmp_expr)]
    ","         reduce using rule 11 (var)
    SSCAN       reduce using rule 57 (arithm_expr)
    SSCAN       [reduce using rule 87 (cmp_expr)]
    SPRINT      reduce using rule 57 (arithm_expr)
    SPRINT      [reduce using rule 87 (cmp_expr)]
    SLEN        reduce using rule 57 (arithm_expr)
    SLEN        [reduce using rule 87 (cmp_expr)]
    SCMP        reduce using rule 57 (arithm_expr)
    SCMP        [reduce using rule 87 (cmp_expr)]
    NEWLINE     reduce using rule 57 (arithm_expr)
    NEWLINE     [reduce using rule 87 (cmp_expr)]
    $default    reduce using rule 57 (arithm_expr)

    params  go to state 157


State 91

   45 decl_func: name_func decl_statement •

    $default  reduce using rule 45 (decl_func)


State 92

   58 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 58
    FLOAT       shift, and go to state 59
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 159


State 93

   59 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 58
    FLOAT       shift, and go to state 59
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 160


State 94

   60 arithm_expr: arithm_expr "*" • arithm_expr
   63            | arithm_expr "*" • "*" arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 58
    FLOAT       shift, and go to state 59
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18
    "*"         shift, and go to state 161

    sign         go to state 36
    arithm_expr  go to state 162


State 95

   61 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 58
    FLOAT       shift, and go to state 59
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 163


State 96

   62 arithm_expr: arithm_expr "%" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 58
    FLOAT       shift, and go to state 59
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 164


State 97

  106 decl_statement: assign ";" •

    $default  reduce using rule 106 (decl_statement)


State 98

   89 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 165


State 99

   88 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 166


State 100

   95 cmp_expr: cmp_expr "&&" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 167


State 101

   90 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 168


State 102

   94 cmp_expr: cmp_expr "||" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 169


State 103

   91 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 170


State 104

   92 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 171


State 105

   93 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 172


State 106

    1 program: program decl_statements NEWLINE •
  111 decl_statement: NEWLINE •

    IDENTIFIER  reduce using rule 1 (program)
    IDENTIFIER  [reduce using rule 111 (decl_statement)]
    INTEGER     reduce using rule 1 (program)
    INTEGER     [reduce using rule 111 (decl_statement)]
    FLOAT       reduce using rule 1 (program)
    FLOAT       [reduce using rule 111 (decl_statement)]
    SIF         reduce using rule 1 (program)
    SIF         [reduce using rule 111 (decl_statement)]
    SDOUBLE     reduce using rule 1 (program)
    SDOUBLE     [reduce using rule 111 (decl_statement)]
    SINT        reduce using rule 1 (program)
    SINT        [reduce using rule 111 (decl_statement)]
    SFUNC       reduce using rule 1 (program)
    SFUNC       [reduce using rule 111 (decl_statement)]
    SLONG       reduce using rule 1 (program)
    SLONG       [reduce using rule 111 (decl_statement)]
    SFLOAT      reduce using rule 1 (program)
    SFLOAT      [reduce using rule 111 (decl_statement)]
    SFOR        reduce using rule 1 (program)
    SFOR        [reduce using rule 111 (decl_statement)]
    SSHORT      reduce using rule 1 (program)
    SSHORT      [reduce using rule 111 (decl_statement)]
    SWHILE      reduce using rule 1 (program)
    SWHILE      [reduce using rule 111 (decl_statement)]
    "+"         reduce using rule 1 (program)
    "+"         [reduce using rule 111 (decl_statement)]
    "--"        reduce using rule 1 (program)
    "--"        [reduce using rule 111 (decl_statement)]
    "-"         reduce using rule 1 (program)
    "-"         [reduce using rule 111 (decl_statement)]
    "!"         reduce using rule 1 (program)
    "!"         [reduce using rule 111 (decl_statement)]
    "++"        reduce using rule 1 (program)
    "++"        [reduce using rule 111 (decl_statement)]
    "["         reduce using rule 1 (program)
    "["         [reduce using rule 111 (decl_statement)]
    "{"         reduce using rule 1 (program)
    "{"         [reduce using rule 111 (decl_statement)]
    SSCAN       reduce using rule 1 (program)
    SSCAN       [reduce using rule 111 (decl_statement)]
    SPRINT      reduce using rule 1 (program)
    SPRINT      [reduce using rule 111 (decl_statement)]
    SLEN        reduce using rule 1 (program)
    SLEN        [reduce using rule 111 (decl_statement)]
    SCMP        reduce using rule 1 (program)
    SCMP        [reduce using rule 111 (decl_statement)]
    NEWLINE     reduce using rule 1 (program)
    NEWLINE     [reduce using rule 111 (decl_statement)]
    $default    reduce using rule 1 (program)


State 107

   99 decl_statements: decl_statements decl_statement •

    $default  reduce using rule 99 (decl_statements)


State 108

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   30 func: IDENTIFIER • "(" print_params ")"
   39 print_params: IDENTIFIER •

    "("  shift, and go to state 49
    "["  shift, and go to state 173

    $default  reduce using rule 39 (print_params)


State 109

   38 print_params: STRING •

    $default  reduce using rule 38 (print_params)


State 110

   40 print_params: INTEGER •

    $default  reduce using rule 40 (print_params)


State 111

   41 print_params: FLOAT •

    $default  reduce using rule 41 (print_params)


State 112

   43 print_params: pos_elem •

    $default  reduce using rule 43 (print_params)


State 113

   42 print_params: func •

    $default  reduce using rule 42 (print_params)


State 114

   30 func: IDENTIFIER "(" print_params • ")"
   44 print_params: print_params • "," print_params

    ")"  shift, and go to state 174
    ","  shift, and go to state 175


State 115

  114 condition: "(" condition • ")"

    ")"  shift, and go to state 176


State 116

  112 if_statement: SIF condition decl_statement •

    $default  reduce using rule 112 (if_statement)


State 117

  117 for_statement: SFOR "(" assign • ";" cmp_expr ";" oper_eq ")" decl_statement

    ";"  shift, and go to state 177


State 118

  116 while_statement: SWHILE condition decl_statement •

    $default  reduce using rule 116 (while_statement)


State 119

   16 arr_elements: "[" integ "]" •

    $default  reduce using rule 16 (arr_elements)


State 120

   20 integ: integ "," • integ

    INTEGER  shift, and go to state 67

    integ  go to state 178


State 121

   17 arr_elements: "[" fl "]" •

    $default  reduce using rule 17 (arr_elements)


State 122

   22 fl: fl "," • fl

    FLOAT  shift, and go to state 68

    fl  go to state 179


State 123

   18 arr_elements: "[" str "]" •

    $default  reduce using rule 18 (arr_elements)


State 124

   24 str: str "," • str

    STRING  shift, and go to state 66

    str  go to state 180


State 125

  115 block_statement: "{" decl_statements "}" •

    $default  reduce using rule 115 (block_statement)


State 126

   31 scan_params: IDENTIFIER •

    $default  reduce using rule 31 (scan_params)


State 127

   26 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 181


State 128

   29 func: SPRINT "(" print_params • ")"
   44 print_params: print_params • "," print_params

    ")"  shift, and go to state 182
    ","  shift, and go to state 175


State 129

   34 len_params: IDENTIFIER •

    $default  reduce using rule 34 (len_params)


State 130

   33 len_params: STRING •

    $default  reduce using rule 33 (len_params)


State 131

   32 len_params: arr_elements •

    $default  reduce using rule 32 (len_params)


State 132

   27 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 183


State 133

   36 cmp_params: IDENTIFIER •

    $default  reduce using rule 36 (cmp_params)


State 134

   35 cmp_params: STRING •

    $default  reduce using rule 35 (cmp_params)


State 135

   28 func: SCMP "(" cmp_params • ")"
   37 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 184
    ","  shift, and go to state 185


State 136

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"

    "["  shift, and go to state 173


State 137

   64 number: INTEGER •

    $default  reduce using rule 64 (number)


State 138

   65 number: FLOAT •

    $default  reduce using rule 65 (number)


State 139

   66 number: pos_elem •

    $default  reduce using rule 66 (number)


State 140

   78 oper_eq: var "*=" number •

    $default  reduce using rule 78 (oper_eq)


State 141

   79 oper_eq: var "/=" number •

    $default  reduce using rule 79 (oper_eq)


State 142

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   57 arithm_expr: IDENTIFIER •
   81 val: IDENTIFIER •
   87 cmp_expr: IDENTIFIER •

    "["  shift, and go to state 173

    "+"       reduce using rule 57 (arithm_expr)
    "-"       reduce using rule 57 (arithm_expr)
    "*"       reduce using rule 57 (arithm_expr)
    "/"       reduce using rule 57 (arithm_expr)
    "%"       reduce using rule 57 (arithm_expr)
    ","       reduce using rule 81 (val)
    ";"       reduce using rule 57 (arithm_expr)
    ";"       [reduce using rule 81 (val)]
    ";"       [reduce using rule 87 (cmp_expr)]
    $default  reduce using rule 87 (cmp_expr)


State 143

   82 val: STRING •

    $default  reduce using rule 82 (val)


State 144

   52 sign: INTEGER •
   64 number: INTEGER •
   85 cmp_expr: INTEGER •

    "+"       reduce using rule 52 (sign)
    "-"       reduce using rule 52 (sign)
    "*"       reduce using rule 52 (sign)
    "/"       reduce using rule 52 (sign)
    "%"       reduce using rule 52 (sign)
    ","       reduce using rule 64 (number)
    ";"       reduce using rule 52 (sign)
    ";"       [reduce using rule 64 (number)]
    ";"       [reduce using rule 85 (cmp_expr)]
    $default  reduce using rule 85 (cmp_expr)


State 145

   53 sign: FLOAT •
   65 number: FLOAT •
   86 cmp_expr: FLOAT •

    "+"       reduce using rule 53 (sign)
    "-"       reduce using rule 53 (sign)
    "*"       reduce using rule 53 (sign)
    "/"       reduce using rule 53 (sign)
    "%"       reduce using rule 53 (sign)
    ","       reduce using rule 65 (number)
    ";"       reduce using rule 53 (sign)
    ";"       [reduce using rule 65 (number)]
    ";"       [reduce using rule 86 (cmp_expr)]
    $default  reduce using rule 86 (cmp_expr)


State 146

   83 val: arr_elements •
   97 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 88

    $default  reduce using rule 83 (val)


State 147

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   63            | arithm_expr • "*" "*" arithm_expr
   69 assign: var "=" arithm_expr •

    "+"  shift, and go to state 92
    "-"  shift, and go to state 93
    "*"  shift, and go to state 94
    "/"  shift, and go to state 95
    "%"  shift, and go to state 96

    $default  reduce using rule 69 (assign)


State 148

   80 val: number •

    $default  reduce using rule 80 (val)


State 149

   67 assign: var "=" val •
   84 val: val • "," val

    ","  shift, and go to state 186

    $default  reduce using rule 67 (assign)


State 150

   68 assign: var "=" cmp_expr •
   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    "||"  shift, and go to state 102
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 68 (assign)


State 151

   70 assign: var "=" merge_arr •

    $default  reduce using rule 70 (assign)


State 152

   76 oper_eq: var "+=" number •

    $default  reduce using rule 76 (oper_eq)


State 153

   77 oper_eq: var "-=" number •

    $default  reduce using rule 77 (oper_eq)


State 154

   12 var: var • "," var
   12    | var "," var •

    $default  reduce using rule 12 (var)


State 155

   97 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 97 (merge_arr)


State 156

   30 func: IDENTIFIER "(" • print_params ")"
   48 params: "(" • ")"
   49       | "(" • type_params ")"

    IDENTIFIER  shift, and go to state 187
    STRING      shift, and go to state 109
    INTEGER     shift, and go to state 110
    FLOAT       shift, and go to state 111
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SSHORT      shift, and go to state 14
    ")"         shift, and go to state 188
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    type          go to state 189
    pos_elem      go to state 112
    func          go to state 113
    print_params  go to state 114
    type_params   go to state 190


State 157

   47 name_func: name_func IDENTIFIER params • NEWLINE

    NEWLINE  shift, and go to state 191


State 158

   57 arithm_expr: IDENTIFIER •

    $default  reduce using rule 57 (arithm_expr)


State 159

   58 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr "+" arithm_expr •
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   63            | arithm_expr • "*" "*" arithm_expr

    "*"  shift, and go to state 94
    "/"  shift, and go to state 95
    "%"  shift, and go to state 96

    $default  reduce using rule 58 (arithm_expr)


State 160

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   59            | arithm_expr "-" arithm_expr •
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   63            | arithm_expr • "*" "*" arithm_expr

    "*"  shift, and go to state 94
    "/"  shift, and go to state 95
    "%"  shift, and go to state 96

    $default  reduce using rule 59 (arithm_expr)


State 161

   63 arithm_expr: arithm_expr "*" "*" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 58
    FLOAT       shift, and go to state 59
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 192


State 162

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   60            | arithm_expr "*" arithm_expr •
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   63            | arithm_expr • "*" "*" arithm_expr

    $default  reduce using rule 60 (arithm_expr)


State 163

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   61            | arithm_expr "/" arithm_expr •
   62            | arithm_expr • "%" arithm_expr
   63            | arithm_expr • "*" "*" arithm_expr

    $default  reduce using rule 61 (arithm_expr)


State 164

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   62            | arithm_expr "%" arithm_expr •
   63            | arithm_expr • "*" "*" arithm_expr

    $default  reduce using rule 62 (arithm_expr)


State 165

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   89         | cmp_expr "<" cmp_expr •
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 89 (cmp_expr)


State 166

   88 cmp_expr: cmp_expr • ">" cmp_expr
   88         | cmp_expr ">" cmp_expr •
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 88 (cmp_expr)


State 167

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   95         | cmp_expr "&&" cmp_expr •

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "<="  shift, and go to state 101
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 95 (cmp_expr)


State 168

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   90         | cmp_expr "<=" cmp_expr •
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 90 (cmp_expr)


State 169

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   94         | cmp_expr "||" cmp_expr •
   95         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 94 (cmp_expr)


State 170

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   91         | cmp_expr ">=" cmp_expr •
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 91 (cmp_expr)


State 171

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   92         | cmp_expr "==" cmp_expr •
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "<="  shift, and go to state 101
    ">="  shift, and go to state 103

    $default  reduce using rule 92 (cmp_expr)


State 172

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   93         | cmp_expr "!=" cmp_expr •
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "<="  shift, and go to state 101
    ">="  shift, and go to state 103

    $default  reduce using rule 93 (cmp_expr)


State 173

   13 pos_elem: IDENTIFIER "[" • INTEGER "]"
   14         | IDENTIFIER "[" • IDENTIFIER "]"

    IDENTIFIER  shift, and go to state 193
    INTEGER     shift, and go to state 194


State 174

   30 func: IDENTIFIER "(" print_params ")" •

    $default  reduce using rule 30 (func)


State 175

   44 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109
    INTEGER     shift, and go to state 110
    FLOAT       shift, and go to state 111
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 112
    func          go to state 113
    print_params  go to state 195


State 176

  114 condition: "(" condition ")" •

    $default  reduce using rule 114 (condition)


State 177

  117 for_statement: SFOR "(" assign ";" • cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 196


State 178

   20 integ: integ • "," integ
   20      | integ "," integ •

    $default  reduce using rule 20 (integ)


State 179

   22 fl: fl • "," fl
   22   | fl "," fl •

    $default  reduce using rule 22 (fl)


State 180

   24 str: str • "," str
   24    | str "," str •

    $default  reduce using rule 24 (str)


State 181

   26 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 26 (func)


State 182

   29 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 29 (func)


State 183

   27 func: SLEN "(" len_params ")" •

    $default  reduce using rule 27 (func)


State 184

   28 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 28 (func)


State 185

   37 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 133
    STRING      shift, and go to state 134

    cmp_params  go to state 197


State 186

   84 val: val "," • val

    IDENTIFIER  shift, and go to state 198
    STRING      shift, and go to state 143
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138
    "["         shift, and go to state 21

    pos_elem      go to state 139
    arr_elements  go to state 199
    number        go to state 148
    val           go to state 200


State 187

   10 type: IDENTIFIER •
   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   30 func: IDENTIFIER • "(" print_params ")"
   39 print_params: IDENTIFIER •

    "("  shift, and go to state 49
    "["  shift, and go to state 173

    IDENTIFIER  reduce using rule 10 (type)
    $default    reduce using rule 39 (print_params)


State 188

   48 params: "(" ")" •

    $default  reduce using rule 48 (params)


State 189

   50 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 201


State 190

   49 params: "(" type_params • ")"
   51 type_params: type_params • "," type_params

    ")"  shift, and go to state 202
    ","  shift, and go to state 203


State 191

   47 name_func: name_func IDENTIFIER params NEWLINE •

    $default  reduce using rule 47 (name_func)


State 192

   58 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr • "-" arithm_expr
   60            | arithm_expr • "*" arithm_expr
   61            | arithm_expr • "/" arithm_expr
   62            | arithm_expr • "%" arithm_expr
   63            | arithm_expr • "*" "*" arithm_expr
   63            | arithm_expr "*" "*" arithm_expr •

    $default  reduce using rule 63 (arithm_expr)


State 193

   14 pos_elem: IDENTIFIER "[" IDENTIFIER • "]"

    "]"  shift, and go to state 204


State 194

   13 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 205


State 195

   44 print_params: print_params • "," print_params
   44             | print_params "," print_params •

    $default  reduce using rule 44 (print_params)


State 196

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
  117 for_statement: SFOR "(" assign ";" cmp_expr • ";" oper_eq ")" decl_statement

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    "||"  shift, and go to state 102
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105
    ";"   shift, and go to state 206


State 197

   37 cmp_params: cmp_params • "," cmp_params
   37           | cmp_params "," cmp_params •

    $default  reduce using rule 37 (cmp_params)


State 198

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   81 val: IDENTIFIER •

    "["  shift, and go to state 173

    $default  reduce using rule 81 (val)


State 199

   83 val: arr_elements •

    $default  reduce using rule 83 (val)


State 200

   84 val: val • "," val
   84    | val "," val •

    $default  reduce using rule 84 (val)


State 201

   50 type_params: type IDENTIFIER •

    $default  reduce using rule 50 (type_params)


State 202

   49 params: "(" type_params ")" •

    $default  reduce using rule 49 (params)


State 203

   51 type_params: type_params "," • type_params

    IDENTIFIER  shift, and go to state 207
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SSHORT      shift, and go to state 14

    type         go to state 189
    type_params  go to state 208


State 204

   14 pos_elem: IDENTIFIER "[" IDENTIFIER "]" •

    $default  reduce using rule 14 (pos_elem)


State 205

   13 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 13 (pos_elem)


State 206

  117 for_statement: SFOR "(" assign ";" cmp_expr ";" • oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 61
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20

    var      go to state 209
    oper_eq  go to state 210


State 207

   10 type: IDENTIFIER •

    $default  reduce using rule 10 (type)


State 208

   51 type_params: type_params • "," type_params
   51            | type_params "," type_params •

    $default  reduce using rule 51 (type_params)


State 209

   12 var: var • "," var
   72 oper_eq: var • "++"
   73        | var • "--"
   76        | var • "+=" number
   77        | var • "-=" number
   78        | var • "*=" number
   79        | var • "/=" number

    "*="  shift, and go to state 80
    "--"  shift, and go to state 81
    "/="  shift, and go to state 82
    "+="  shift, and go to state 84
    "-="  shift, and go to state 85
    "++"  shift, and go to state 86
    ","   shift, and go to state 87


State 210

  117 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq • ")" decl_statement

    ")"  shift, and go to state 211


State 211

  117 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 212
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 212

  117 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement •

    $default  reduce using rule 117 (for_statement)
