Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "&"
    "\\"


State 4 conflicts: 27 reduce/reduce
State 5 conflicts: 25 reduce/reduce
State 6 conflicts: 25 reduce/reduce
State 8 conflicts: 1 shift/reduce
State 9 conflicts: 1 shift/reduce
State 10 conflicts: 5 shift/reduce
State 11 conflicts: 1 shift/reduce
State 12 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce
State 37 conflicts: 2 shift/reduce
State 41 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 98 conflicts: 27 reduce/reduce
State 116 conflicts: 24 reduce/reduce
State 156 conflicts: 2 reduce/reduce
State 158 conflicts: 2 reduce/reduce
State 159 conflicts: 2 reduce/reduce
State 160 conflicts: 1 reduce/reduce
State 189 conflicts: 1 shift/reduce
State 213 conflicts: 2 shift/reduce
State 214 conflicts: 1 shift/reduce
State 219 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_statements NEWLINE
    2        | program error NEWLINE
    3        | program merge_arr TOKEN_ERROR merge_arr NEWLINE
    4        | ε

    5 decl_var: type var

    6 type: SINT
    7     | SFLOAT
    8     | SDOUBLE
    9     | SSHORT
   10     | SLONG
   11     | SFLOAT SFLOAT
   12     | SDOUBLE SDOUBLE
   13     | SINT SINT
   14     | SLONG SLONG
   15     | SSHORT SSHORT

   16 var: IDENTIFIER
   17    | var "," var

   18 pos_elem: IDENTIFIER "[" INTEGER "]"
   19         | IDENTIFIER "[" IDENTIFIER "]"

   20 arr_elements: "[" "]"
   21             | "[" integ "]"
   22             | "[" fl "]"
   23             | "[" str "]"
   24             | "[" var "]"

   25 integ: INTEGER
   26      | integ "," integ

   27 fl: FLOAT
   28   | fl "," fl

   29 str: STRING
   30    | str "," str

   31 build_func: func

   32 func: SSCAN "(" scan_params ")"
   33     | SLEN "(" len_params ")"
   34     | SCMP "(" cmp_params ")"
   35     | SPRINT "(" print_params ")"
   36     | IDENTIFIER "(" print_params ")"

   37 scan_params: IDENTIFIER

   38 len_params: arr_elements
   39           | STRING
   40           | IDENTIFIER

   41 cmp_params: STRING
   42           | IDENTIFIER
   43           | cmp_params "," cmp_params

   44 print_params: STRING
   45             | IDENTIFIER
   46             | INTEGER
   47             | FLOAT
   48             | func
   49             | pos_elem
   50             | print_params "," print_params

   51 decl_func: name_func decl_statement

   52 name_func: SFUNC
   53          | SFUNC type
   54          | name_func IDENTIFIER params NEWLINE

   55 params: "(" ")"
   56       | "(" type_params ")"

   57 type_params: type IDENTIFIER
   58            | type_params "," type_params

   59 sign: INTEGER
   60     | FLOAT
   61     | IDENTIFIER
   62     | "+" sign
   63     | "-" sign

   64 arithm_expr: sign
   65            | arithm_expr "+" arithm_expr
   66            | arithm_expr "-" arithm_expr
   67            | arithm_expr "*" arithm_expr
   68            | arithm_expr "/" arithm_expr
   69            | arithm_expr "%" arithm_expr

   70 number: INTEGER
   71       | FLOAT
   72       | pos_elem

   73 assign: var "=" val
   74       | var "=" cmp_expr
   75       | var "=" arithm_expr
   76       | var "=" merge_arr
   77       | oper_eq

   78 oper_eq: var "++"
   79        | var "--"
   80        | "++" var
   81        | "--" var
   82        | var "+=" val
   83        | var "-=" val2
   84        | var "*=" val2
   85        | var "/=" val2

   86 val2: number
   87     | IDENTIFIER

   88 val: number
   89    | IDENTIFIER
   90    | STRING
   91    | arr_elements
   92    | val "," val

   93 cmp_expr: INTEGER
   94         | FLOAT
   95         | IDENTIFIER
   96         | cmp_expr ">" cmp_expr
   97         | cmp_expr "<" cmp_expr
   98         | cmp_expr "<=" cmp_expr
   99         | cmp_expr ">=" cmp_expr
  100         | cmp_expr "==" cmp_expr
  101         | cmp_expr "!=" cmp_expr
  102         | cmp_expr "||" cmp_expr
  103         | cmp_expr "&&" cmp_expr
  104         | "!" cmp_expr
  105         | cmp_expr ">" ">" cmp_expr
  106         | cmp_expr "<" "<" cmp_expr

  107 merge_arr: arr_elements
  108          | merge_arr "+" merge_arr
  109          | merge_arr TOKEN_ERROR "+" merge_arr
  110          | merge_arr "+" TOKEN_ERROR merge_arr

  111 decl_statements: decl_statement
  112                | decl_statements decl_statement

  113 decl_statement: if_statement
  114               | while_statement
  115               | for_statement
  116               | decl_var ";"
  117               | build_func ";"
  118               | decl_func
  119               | assign ";"
  120               | arithm_expr
  121               | cmp_expr
  122               | merge_arr
  123               | block_statement
  124               | NEWLINE

  125 if_statement: SIF condition decl_statement

  126 condition: cmp_expr
  127          | "(" condition ")"
  128          | "(" "(" condition ")" ")"

  129 block_statement: "{" decl_statements "}"

  130 while_statement: SWHILE condition decl_statement

  131 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256) 2
    IDENTIFIER (258) 16 18 19 36 37 40 42 45 54 57 61 87 89 95
    STRING (259) 29 39 41 44 90
    INTEGER (260) 18 25 46 59 70 93
    FLOAT (261) 27 47 60 71 94
    SBREAK (262)
    SDO (263)
    SIF (264) 125
    SSIZEOF (265)
    SCASE (266)
    SDOUBLE (267) 8 12
    SINT (268) 6 13
    SSTRUCT (269)
    SFUNC (270) 52 53
    SELSE (271)
    SLONG (272) 10 14
    SSWITCH (273)
    SCONST (274)
    SFLOAT (275) 7 11
    SRETURN (276)
    SVOID (277)
    SCONTINUE (278)
    SFOR (279) 131
    SSHORT (280) 9 15
    SWHILE (281) 130
    "+" (282) 62 65 108 109 110
    "*=" (283) 84
    "--" (284) 79 81
    "-" (285) 63 66
    "/=" (286) 85
    "<" (287) 97 106
    "*" (288) 67
    "!" (289) 104
    ">" (290) 96 105
    "/" (291) 68
    "&&" (292) 103
    "<=" (293) 98
    "%" (294) 69
    "||" (295) 102
    ">=" (296) 99
    "=" (297) 73 74 75 76
    "==" (298) 100
    "&" (299)
    "+=" (300) 82
    "!=" (301) 101
    "-=" (302) 83
    "++" (303) 78 80
    "(" (304) 32 33 34 35 36 55 56 127 128 131
    ")" (305) 32 33 34 35 36 55 56 127 128 131
    "[" (306) 18 19 20 21 22 23 24
    "]" (307) 18 19 20 21 22 23 24
    "{" (308) 129
    "}" (309) 129
    "," (310) 17 26 28 30 43 50 58 92
    "\\" (311)
    ";" (312) 116 117 119 131
    SSCAN (313) 32
    SPRINT (314) 35
    SLEN (315) 33
    SCMP (316) 34
    NEWLINE (317) 1 2 3 54 124
    TOKEN_ERROR (318) 3 109 110


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1 2 3 4
        on right: 0 1 2 3
    decl_var (66)
        on left: 5
        on right: 116
    type (67)
        on left: 6 7 8 9 10 11 12 13 14 15
        on right: 5 53 57
    var (68)
        on left: 16 17
        on right: 5 17 24 73 74 75 76 78 79 80 81 82 83 84 85
    pos_elem (69)
        on left: 18 19
        on right: 49 72
    arr_elements (70)
        on left: 20 21 22 23 24
        on right: 38 91 107
    integ (71)
        on left: 25 26
        on right: 21 26
    fl (72)
        on left: 27 28
        on right: 22 28
    str (73)
        on left: 29 30
        on right: 23 30
    build_func (74)
        on left: 31
        on right: 117
    func (75)
        on left: 32 33 34 35 36
        on right: 31 48
    scan_params (76)
        on left: 37
        on right: 32
    len_params (77)
        on left: 38 39 40
        on right: 33
    cmp_params (78)
        on left: 41 42 43
        on right: 34 43
    print_params (79)
        on left: 44 45 46 47 48 49 50
        on right: 35 36 50
    decl_func (80)
        on left: 51
        on right: 118
    name_func (81)
        on left: 52 53 54
        on right: 51 54
    params (82)
        on left: 55 56
        on right: 54
    type_params (83)
        on left: 57 58
        on right: 56 58
    sign (84)
        on left: 59 60 61 62 63
        on right: 62 63 64
    arithm_expr (85)
        on left: 64 65 66 67 68 69
        on right: 65 66 67 68 69 75 120
    number (86)
        on left: 70 71 72
        on right: 86 88
    assign (87)
        on left: 73 74 75 76 77
        on right: 119 131
    oper_eq (88)
        on left: 78 79 80 81 82 83 84 85
        on right: 77 131
    val2 (89)
        on left: 86 87
        on right: 83 84 85
    val (90)
        on left: 88 89 90 91 92
        on right: 73 82 92
    cmp_expr (91)
        on left: 93 94 95 96 97 98 99 100 101 102 103 104 105 106
        on right: 74 96 97 98 99 100 101 102 103 104 105 106 121 126 131
    merge_arr (92)
        on left: 107 108 109 110
        on right: 3 76 108 109 110 122
    decl_statements (93)
        on left: 111 112
        on right: 1 112 129
    decl_statement (94)
        on left: 113 114 115 116 117 118 119 120 121 122 123 124
        on right: 51 111 112 125 130 131
    if_statement (95)
        on left: 125
        on right: 113
    condition (96)
        on left: 126 127 128
        on right: 125 127 128 130
    block_statement (97)
        on left: 129
        on right: 123
    while_statement (98)
        on left: 130
        on right: 114
    for_statement (99)
        on left: 131
        on right: 115


State 0

    0 $accept: • program $end

    $default  reduce using rule 4 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_statements NEWLINE
    2        | program • error NEWLINE
    3        | program • merge_arr TOKEN_ERROR merge_arr NEWLINE

    $end        shift, and go to state 2
    error       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statements  go to state 42
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 2

    0 $accept: program $end •

    $default  accept


State 3

    2 program: program error • NEWLINE

    NEWLINE  shift, and go to state 48


State 4

   16 var: IDENTIFIER •
   36 func: IDENTIFIER • "(" print_params ")"
   61 sign: IDENTIFIER •
   95 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 49

    IDENTIFIER  reduce using rule 61 (sign)
    IDENTIFIER  [reduce using rule 95 (cmp_expr)]
    INTEGER     reduce using rule 61 (sign)
    INTEGER     [reduce using rule 95 (cmp_expr)]
    FLOAT       reduce using rule 61 (sign)
    FLOAT       [reduce using rule 95 (cmp_expr)]
    SIF         reduce using rule 61 (sign)
    SIF         [reduce using rule 95 (cmp_expr)]
    SDOUBLE     reduce using rule 61 (sign)
    SDOUBLE     [reduce using rule 95 (cmp_expr)]
    SINT        reduce using rule 61 (sign)
    SINT        [reduce using rule 95 (cmp_expr)]
    SFUNC       reduce using rule 61 (sign)
    SFUNC       [reduce using rule 95 (cmp_expr)]
    SLONG       reduce using rule 61 (sign)
    SLONG       [reduce using rule 95 (cmp_expr)]
    SFLOAT      reduce using rule 61 (sign)
    SFLOAT      [reduce using rule 95 (cmp_expr)]
    SFOR        reduce using rule 61 (sign)
    SFOR        [reduce using rule 95 (cmp_expr)]
    SSHORT      reduce using rule 61 (sign)
    SSHORT      [reduce using rule 95 (cmp_expr)]
    SWHILE      reduce using rule 61 (sign)
    SWHILE      [reduce using rule 95 (cmp_expr)]
    "+"         reduce using rule 61 (sign)
    "+"         [reduce using rule 95 (cmp_expr)]
    "*="        reduce using rule 16 (var)
    "--"        reduce using rule 16 (var)
    "--"        [reduce using rule 61 (sign)]
    "--"        [reduce using rule 95 (cmp_expr)]
    "-"         reduce using rule 61 (sign)
    "-"         [reduce using rule 95 (cmp_expr)]
    "/="        reduce using rule 16 (var)
    "<"         reduce using rule 95 (cmp_expr)
    "!"         reduce using rule 61 (sign)
    "!"         [reduce using rule 95 (cmp_expr)]
    ">"         reduce using rule 95 (cmp_expr)
    "&&"        reduce using rule 95 (cmp_expr)
    "<="        reduce using rule 95 (cmp_expr)
    "||"        reduce using rule 95 (cmp_expr)
    ">="        reduce using rule 95 (cmp_expr)
    "="         reduce using rule 16 (var)
    "=="        reduce using rule 95 (cmp_expr)
    "+="        reduce using rule 16 (var)
    "!="        reduce using rule 95 (cmp_expr)
    "-="        reduce using rule 16 (var)
    "++"        reduce using rule 16 (var)
    "++"        [reduce using rule 61 (sign)]
    "++"        [reduce using rule 95 (cmp_expr)]
    "["         reduce using rule 61 (sign)
    "["         [reduce using rule 95 (cmp_expr)]
    "{"         reduce using rule 61 (sign)
    "{"         [reduce using rule 95 (cmp_expr)]
    "}"         reduce using rule 61 (sign)
    "}"         [reduce using rule 95 (cmp_expr)]
    ","         reduce using rule 16 (var)
    SSCAN       reduce using rule 61 (sign)
    SSCAN       [reduce using rule 95 (cmp_expr)]
    SPRINT      reduce using rule 61 (sign)
    SPRINT      [reduce using rule 95 (cmp_expr)]
    SLEN        reduce using rule 61 (sign)
    SLEN        [reduce using rule 95 (cmp_expr)]
    SCMP        reduce using rule 61 (sign)
    SCMP        [reduce using rule 95 (cmp_expr)]
    NEWLINE     reduce using rule 61 (sign)
    NEWLINE     [reduce using rule 95 (cmp_expr)]
    $default    reduce using rule 61 (sign)


State 5

   59 sign: INTEGER •
   93 cmp_expr: INTEGER •

    IDENTIFIER  reduce using rule 59 (sign)
    IDENTIFIER  [reduce using rule 93 (cmp_expr)]
    INTEGER     reduce using rule 59 (sign)
    INTEGER     [reduce using rule 93 (cmp_expr)]
    FLOAT       reduce using rule 59 (sign)
    FLOAT       [reduce using rule 93 (cmp_expr)]
    SIF         reduce using rule 59 (sign)
    SIF         [reduce using rule 93 (cmp_expr)]
    SDOUBLE     reduce using rule 59 (sign)
    SDOUBLE     [reduce using rule 93 (cmp_expr)]
    SINT        reduce using rule 59 (sign)
    SINT        [reduce using rule 93 (cmp_expr)]
    SFUNC       reduce using rule 59 (sign)
    SFUNC       [reduce using rule 93 (cmp_expr)]
    SLONG       reduce using rule 59 (sign)
    SLONG       [reduce using rule 93 (cmp_expr)]
    SFLOAT      reduce using rule 59 (sign)
    SFLOAT      [reduce using rule 93 (cmp_expr)]
    SFOR        reduce using rule 59 (sign)
    SFOR        [reduce using rule 93 (cmp_expr)]
    SSHORT      reduce using rule 59 (sign)
    SSHORT      [reduce using rule 93 (cmp_expr)]
    SWHILE      reduce using rule 59 (sign)
    SWHILE      [reduce using rule 93 (cmp_expr)]
    "+"         reduce using rule 59 (sign)
    "+"         [reduce using rule 93 (cmp_expr)]
    "--"        reduce using rule 59 (sign)
    "--"        [reduce using rule 93 (cmp_expr)]
    "-"         reduce using rule 59 (sign)
    "-"         [reduce using rule 93 (cmp_expr)]
    "<"         reduce using rule 93 (cmp_expr)
    "!"         reduce using rule 59 (sign)
    "!"         [reduce using rule 93 (cmp_expr)]
    ">"         reduce using rule 93 (cmp_expr)
    "&&"        reduce using rule 93 (cmp_expr)
    "<="        reduce using rule 93 (cmp_expr)
    "||"        reduce using rule 93 (cmp_expr)
    ">="        reduce using rule 93 (cmp_expr)
    "=="        reduce using rule 93 (cmp_expr)
    "!="        reduce using rule 93 (cmp_expr)
    "++"        reduce using rule 59 (sign)
    "++"        [reduce using rule 93 (cmp_expr)]
    "["         reduce using rule 59 (sign)
    "["         [reduce using rule 93 (cmp_expr)]
    "{"         reduce using rule 59 (sign)
    "{"         [reduce using rule 93 (cmp_expr)]
    "}"         reduce using rule 59 (sign)
    "}"         [reduce using rule 93 (cmp_expr)]
    SSCAN       reduce using rule 59 (sign)
    SSCAN       [reduce using rule 93 (cmp_expr)]
    SPRINT      reduce using rule 59 (sign)
    SPRINT      [reduce using rule 93 (cmp_expr)]
    SLEN        reduce using rule 59 (sign)
    SLEN        [reduce using rule 93 (cmp_expr)]
    SCMP        reduce using rule 59 (sign)
    SCMP        [reduce using rule 93 (cmp_expr)]
    NEWLINE     reduce using rule 59 (sign)
    NEWLINE     [reduce using rule 93 (cmp_expr)]
    $default    reduce using rule 59 (sign)


State 6

   60 sign: FLOAT •
   94 cmp_expr: FLOAT •

    IDENTIFIER  reduce using rule 60 (sign)
    IDENTIFIER  [reduce using rule 94 (cmp_expr)]
    INTEGER     reduce using rule 60 (sign)
    INTEGER     [reduce using rule 94 (cmp_expr)]
    FLOAT       reduce using rule 60 (sign)
    FLOAT       [reduce using rule 94 (cmp_expr)]
    SIF         reduce using rule 60 (sign)
    SIF         [reduce using rule 94 (cmp_expr)]
    SDOUBLE     reduce using rule 60 (sign)
    SDOUBLE     [reduce using rule 94 (cmp_expr)]
    SINT        reduce using rule 60 (sign)
    SINT        [reduce using rule 94 (cmp_expr)]
    SFUNC       reduce using rule 60 (sign)
    SFUNC       [reduce using rule 94 (cmp_expr)]
    SLONG       reduce using rule 60 (sign)
    SLONG       [reduce using rule 94 (cmp_expr)]
    SFLOAT      reduce using rule 60 (sign)
    SFLOAT      [reduce using rule 94 (cmp_expr)]
    SFOR        reduce using rule 60 (sign)
    SFOR        [reduce using rule 94 (cmp_expr)]
    SSHORT      reduce using rule 60 (sign)
    SSHORT      [reduce using rule 94 (cmp_expr)]
    SWHILE      reduce using rule 60 (sign)
    SWHILE      [reduce using rule 94 (cmp_expr)]
    "+"         reduce using rule 60 (sign)
    "+"         [reduce using rule 94 (cmp_expr)]
    "--"        reduce using rule 60 (sign)
    "--"        [reduce using rule 94 (cmp_expr)]
    "-"         reduce using rule 60 (sign)
    "-"         [reduce using rule 94 (cmp_expr)]
    "<"         reduce using rule 94 (cmp_expr)
    "!"         reduce using rule 60 (sign)
    "!"         [reduce using rule 94 (cmp_expr)]
    ">"         reduce using rule 94 (cmp_expr)
    "&&"        reduce using rule 94 (cmp_expr)
    "<="        reduce using rule 94 (cmp_expr)
    "||"        reduce using rule 94 (cmp_expr)
    ">="        reduce using rule 94 (cmp_expr)
    "=="        reduce using rule 94 (cmp_expr)
    "!="        reduce using rule 94 (cmp_expr)
    "++"        reduce using rule 60 (sign)
    "++"        [reduce using rule 94 (cmp_expr)]
    "["         reduce using rule 60 (sign)
    "["         [reduce using rule 94 (cmp_expr)]
    "{"         reduce using rule 60 (sign)
    "{"         [reduce using rule 94 (cmp_expr)]
    "}"         reduce using rule 60 (sign)
    "}"         [reduce using rule 94 (cmp_expr)]
    SSCAN       reduce using rule 60 (sign)
    SSCAN       [reduce using rule 94 (cmp_expr)]
    SPRINT      reduce using rule 60 (sign)
    SPRINT      [reduce using rule 94 (cmp_expr)]
    SLEN        reduce using rule 60 (sign)
    SLEN        [reduce using rule 94 (cmp_expr)]
    SCMP        reduce using rule 60 (sign)
    SCMP        [reduce using rule 94 (cmp_expr)]
    NEWLINE     reduce using rule 60 (sign)
    NEWLINE     [reduce using rule 94 (cmp_expr)]
    $default    reduce using rule 60 (sign)


State 7

  125 if_statement: SIF • condition decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53

    cmp_expr   go to state 54
    condition  go to state 55


State 8

    8 type: SDOUBLE •
   12     | SDOUBLE • SDOUBLE

    SDOUBLE  shift, and go to state 56

    SDOUBLE   [reduce using rule 8 (type)]
    $default  reduce using rule 8 (type)


State 9

    6 type: SINT •
   13     | SINT • SINT

    SINT  shift, and go to state 57

    SINT      [reduce using rule 6 (type)]
    $default  reduce using rule 6 (type)


State 10

   52 name_func: SFUNC •
   53          | SFUNC • type

    SDOUBLE  shift, and go to state 8
    SINT     shift, and go to state 9
    SLONG    shift, and go to state 11
    SFLOAT   shift, and go to state 12
    SSHORT   shift, and go to state 14

    SDOUBLE   [reduce using rule 52 (name_func)]
    SINT      [reduce using rule 52 (name_func)]
    SLONG     [reduce using rule 52 (name_func)]
    SFLOAT    [reduce using rule 52 (name_func)]
    SSHORT    [reduce using rule 52 (name_func)]
    $default  reduce using rule 52 (name_func)

    type  go to state 58


State 11

   10 type: SLONG •
   14     | SLONG • SLONG

    SLONG  shift, and go to state 59

    SLONG     [reduce using rule 10 (type)]
    $default  reduce using rule 10 (type)


State 12

    7 type: SFLOAT •
   11     | SFLOAT • SFLOAT

    SFLOAT  shift, and go to state 60

    SFLOAT    [reduce using rule 7 (type)]
    $default  reduce using rule 7 (type)


State 13

  131 for_statement: SFOR • "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement

    "("  shift, and go to state 61


State 14

    9 type: SSHORT •
   15     | SSHORT • SSHORT

    SSHORT  shift, and go to state 62

    SSHORT    [reduce using rule 9 (type)]
    $default  reduce using rule 9 (type)


State 15

  130 while_statement: SWHILE • condition decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53

    cmp_expr   go to state 54
    condition  go to state 63


State 16

   62 sign: "+" • sign

    IDENTIFIER  shift, and go to state 64
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign  go to state 67


State 17

   81 oper_eq: "--" • var

    IDENTIFIER  shift, and go to state 68

    var  go to state 69


State 18

   63 sign: "-" • sign

    IDENTIFIER  shift, and go to state 64
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign  go to state 70


State 19

  104 cmp_expr: "!" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 71


State 20

   80 oper_eq: "++" • var

    IDENTIFIER  shift, and go to state 68

    var  go to state 72


State 21

   20 arr_elements: "[" • "]"
   21             | "[" • integ "]"
   22             | "[" • fl "]"
   23             | "[" • str "]"
   24             | "[" • var "]"

    IDENTIFIER  shift, and go to state 68
    STRING      shift, and go to state 73
    INTEGER     shift, and go to state 74
    FLOAT       shift, and go to state 75
    "]"         shift, and go to state 76

    var    go to state 77
    integ  go to state 78
    fl     go to state 79
    str    go to state 80


State 22

  129 block_statement: "{" • decl_statements "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 81
    decl_statements  go to state 82
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 23

   32 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 83


State 24

   35 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 84


State 25

   33 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 85


State 26

   34 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 86


State 27

  124 decl_statement: NEWLINE •

    $default  reduce using rule 124 (decl_statement)


State 28

  116 decl_statement: decl_var • ";"

    ";"  shift, and go to state 87


State 29

    5 decl_var: type • var

    IDENTIFIER  shift, and go to state 68

    var  go to state 88


State 30

   17 var: var • "," var
   73 assign: var • "=" val
   74       | var • "=" cmp_expr
   75       | var • "=" arithm_expr
   76       | var • "=" merge_arr
   78 oper_eq: var • "++"
   79        | var • "--"
   82        | var • "+=" val
   83        | var • "-=" val2
   84        | var • "*=" val2
   85        | var • "/=" val2

    "*="  shift, and go to state 89
    "--"  shift, and go to state 90
    "/="  shift, and go to state 91
    "="   shift, and go to state 92
    "+="  shift, and go to state 93
    "-="  shift, and go to state 94
    "++"  shift, and go to state 95
    ","   shift, and go to state 96


State 31

  107 merge_arr: arr_elements •

    $default  reduce using rule 107 (merge_arr)


State 32

  117 decl_statement: build_func • ";"

    ";"  shift, and go to state 97


State 33

   31 build_func: func •

    $default  reduce using rule 31 (build_func)


State 34

  118 decl_statement: decl_func •

    $default  reduce using rule 118 (decl_statement)


State 35

   51 decl_func: name_func • decl_statement
   54 name_func: name_func • IDENTIFIER params NEWLINE

    IDENTIFIER  shift, and go to state 98
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 81
    decl_statement   go to state 99
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 36

   64 arithm_expr: sign •

    $default  reduce using rule 64 (arithm_expr)


State 37

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr
   69            | arithm_expr • "%" arithm_expr
  120 decl_statement: arithm_expr •

    "+"  shift, and go to state 100
    "-"  shift, and go to state 101
    "*"  shift, and go to state 102
    "/"  shift, and go to state 103
    "%"  shift, and go to state 104

    "+"       [reduce using rule 120 (decl_statement)]
    "-"       [reduce using rule 120 (decl_statement)]
    $default  reduce using rule 120 (decl_statement)


State 38

  119 decl_statement: assign • ";"

    ";"  shift, and go to state 105


State 39

   77 assign: oper_eq •

    $default  reduce using rule 77 (assign)


State 40

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr
  121 decl_statement: cmp_expr •

    "<"   shift, and go to state 106
    ">"   shift, and go to state 107
    "&&"  shift, and go to state 108
    "<="  shift, and go to state 109
    "||"  shift, and go to state 110
    ">="  shift, and go to state 111
    "=="  shift, and go to state 112
    "!="  shift, and go to state 113

    $default  reduce using rule 121 (decl_statement)


State 41

    3 program: program merge_arr • TOKEN_ERROR merge_arr NEWLINE
  108 merge_arr: merge_arr • "+" merge_arr
  109          | merge_arr • TOKEN_ERROR "+" merge_arr
  110          | merge_arr • "+" TOKEN_ERROR merge_arr
  122 decl_statement: merge_arr •

    "+"          shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 115

    "+"       [reduce using rule 122 (decl_statement)]
    $default  reduce using rule 122 (decl_statement)


State 42

    1 program: program decl_statements • NEWLINE
  112 decl_statements: decl_statements • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 116

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 81
    decl_statement   go to state 117
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 43

  111 decl_statements: decl_statement •

    $default  reduce using rule 111 (decl_statements)


State 44

  113 decl_statement: if_statement •

    $default  reduce using rule 113 (decl_statement)


State 45

  123 decl_statement: block_statement •

    $default  reduce using rule 123 (decl_statement)


State 46

  114 decl_statement: while_statement •

    $default  reduce using rule 114 (decl_statement)


State 47

  115 decl_statement: for_statement •

    $default  reduce using rule 115 (decl_statement)


State 48

    2 program: program error NEWLINE •

    $default  reduce using rule 2 (program)


State 49

   36 func: IDENTIFIER "(" • print_params ")"

    IDENTIFIER  shift, and go to state 118
    STRING      shift, and go to state 119
    INTEGER     shift, and go to state 120
    FLOAT       shift, and go to state 121
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 122
    func          go to state 123
    print_params  go to state 124


State 50

   95 cmp_expr: IDENTIFIER •

    $default  reduce using rule 95 (cmp_expr)


State 51

   93 cmp_expr: INTEGER •

    $default  reduce using rule 93 (cmp_expr)


State 52

   94 cmp_expr: FLOAT •

    $default  reduce using rule 94 (cmp_expr)


State 53

  127 condition: "(" • condition ")"
  128          | "(" • "(" condition ")" ")"

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 125

    cmp_expr   go to state 54
    condition  go to state 126


State 54

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr
  126 condition: cmp_expr •

    "<"   shift, and go to state 106
    ">"   shift, and go to state 107
    "&&"  shift, and go to state 108
    "<="  shift, and go to state 109
    "||"  shift, and go to state 110
    ">="  shift, and go to state 111
    "=="  shift, and go to state 112
    "!="  shift, and go to state 113

    $default  reduce using rule 126 (condition)


State 55

  125 if_statement: SIF condition • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 81
    decl_statement   go to state 127
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 56

   12 type: SDOUBLE SDOUBLE •

    $default  reduce using rule 12 (type)


State 57

   13 type: SINT SINT •

    $default  reduce using rule 13 (type)


State 58

   53 name_func: SFUNC type •

    $default  reduce using rule 53 (name_func)


State 59

   14 type: SLONG SLONG •

    $default  reduce using rule 14 (type)


State 60

   11 type: SFLOAT SFLOAT •

    $default  reduce using rule 11 (type)


State 61

  131 for_statement: SFOR "(" • assign ";" cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 68
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20

    var      go to state 30
    assign   go to state 128
    oper_eq  go to state 39


State 62

   15 type: SSHORT SSHORT •

    $default  reduce using rule 15 (type)


State 63

  130 while_statement: SWHILE condition • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 81
    decl_statement   go to state 129
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 64

   61 sign: IDENTIFIER •

    $default  reduce using rule 61 (sign)


State 65

   59 sign: INTEGER •

    $default  reduce using rule 59 (sign)


State 66

   60 sign: FLOAT •

    $default  reduce using rule 60 (sign)


State 67

   62 sign: "+" sign •

    $default  reduce using rule 62 (sign)


State 68

   16 var: IDENTIFIER •

    $default  reduce using rule 16 (var)


State 69

   17 var: var • "," var
   81 oper_eq: "--" var •

    ","  shift, and go to state 96

    $default  reduce using rule 81 (oper_eq)


State 70

   63 sign: "-" sign •

    $default  reduce using rule 63 (sign)


State 71

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  104         | "!" cmp_expr •
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    $default  reduce using rule 104 (cmp_expr)


State 72

   17 var: var • "," var
   80 oper_eq: "++" var •

    ","  shift, and go to state 96

    $default  reduce using rule 80 (oper_eq)


State 73

   29 str: STRING •

    $default  reduce using rule 29 (str)


State 74

   25 integ: INTEGER •

    $default  reduce using rule 25 (integ)


State 75

   27 fl: FLOAT •

    $default  reduce using rule 27 (fl)


State 76

   20 arr_elements: "[" "]" •

    $default  reduce using rule 20 (arr_elements)


State 77

   17 var: var • "," var
   24 arr_elements: "[" var • "]"

    "]"  shift, and go to state 130
    ","  shift, and go to state 96


State 78

   21 arr_elements: "[" integ • "]"
   26 integ: integ • "," integ

    "]"  shift, and go to state 131
    ","  shift, and go to state 132


State 79

   22 arr_elements: "[" fl • "]"
   28 fl: fl • "," fl

    "]"  shift, and go to state 133
    ","  shift, and go to state 134


State 80

   23 arr_elements: "[" str • "]"
   30 str: str • "," str

    "]"  shift, and go to state 135
    ","  shift, and go to state 136


State 81

  108 merge_arr: merge_arr • "+" merge_arr
  109          | merge_arr • TOKEN_ERROR "+" merge_arr
  110          | merge_arr • "+" TOKEN_ERROR merge_arr
  122 decl_statement: merge_arr •

    "+"          shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 137

    "+"       [reduce using rule 122 (decl_statement)]
    $default  reduce using rule 122 (decl_statement)


State 82

  112 decl_statements: decl_statements • decl_statement
  129 block_statement: "{" decl_statements • "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    "}"         shift, and go to state 138
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 81
    decl_statement   go to state 117
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 83

   32 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 139

    scan_params  go to state 140


State 84

   35 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 118
    STRING      shift, and go to state 119
    INTEGER     shift, and go to state 120
    FLOAT       shift, and go to state 121
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 122
    func          go to state 123
    print_params  go to state 141


State 85

   33 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 142
    STRING      shift, and go to state 143
    "["         shift, and go to state 21

    arr_elements  go to state 144
    len_params    go to state 145


State 86

   34 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 146
    STRING      shift, and go to state 147

    cmp_params  go to state 148


State 87

  116 decl_statement: decl_var ";" •

    $default  reduce using rule 116 (decl_statement)


State 88

    5 decl_var: type var •
   17 var: var • "," var

    ","  shift, and go to state 96

    $default  reduce using rule 5 (decl_var)


State 89

   84 oper_eq: var "*=" • val2

    IDENTIFIER  shift, and go to state 149
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151

    pos_elem  go to state 152
    number    go to state 153
    val2      go to state 154


State 90

   79 oper_eq: var "--" •

    $default  reduce using rule 79 (oper_eq)


State 91

   85 oper_eq: var "/=" • val2

    IDENTIFIER  shift, and go to state 149
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151

    pos_elem  go to state 152
    number    go to state 153
    val2      go to state 155


State 92

   73 assign: var "=" • val
   74       | var "=" • cmp_expr
   75       | var "=" • arithm_expr
   76       | var "=" • merge_arr

    IDENTIFIER  shift, and go to state 156
    STRING      shift, and go to state 157
    INTEGER     shift, and go to state 158
    FLOAT       shift, and go to state 159
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "["         shift, and go to state 21

    pos_elem      go to state 152
    arr_elements  go to state 160
    sign          go to state 36
    arithm_expr   go to state 161
    number        go to state 162
    val           go to state 163
    cmp_expr      go to state 164
    merge_arr     go to state 165


State 93

   82 oper_eq: var "+=" • val

    IDENTIFIER  shift, and go to state 166
    STRING      shift, and go to state 157
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151
    "["         shift, and go to state 21

    pos_elem      go to state 152
    arr_elements  go to state 167
    number        go to state 162
    val           go to state 168


State 94

   83 oper_eq: var "-=" • val2

    IDENTIFIER  shift, and go to state 149
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151

    pos_elem  go to state 152
    number    go to state 153
    val2      go to state 169


State 95

   78 oper_eq: var "++" •

    $default  reduce using rule 78 (oper_eq)


State 96

   17 var: var "," • var

    IDENTIFIER  shift, and go to state 68

    var  go to state 170


State 97

  117 decl_statement: build_func ";" •

    $default  reduce using rule 117 (decl_statement)


State 98

   16 var: IDENTIFIER •
   36 func: IDENTIFIER • "(" print_params ")"
   54 name_func: name_func IDENTIFIER • params NEWLINE
   61 sign: IDENTIFIER •
   95 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 171

    IDENTIFIER  reduce using rule 61 (sign)
    IDENTIFIER  [reduce using rule 95 (cmp_expr)]
    INTEGER     reduce using rule 61 (sign)
    INTEGER     [reduce using rule 95 (cmp_expr)]
    FLOAT       reduce using rule 61 (sign)
    FLOAT       [reduce using rule 95 (cmp_expr)]
    SIF         reduce using rule 61 (sign)
    SIF         [reduce using rule 95 (cmp_expr)]
    SDOUBLE     reduce using rule 61 (sign)
    SDOUBLE     [reduce using rule 95 (cmp_expr)]
    SINT        reduce using rule 61 (sign)
    SINT        [reduce using rule 95 (cmp_expr)]
    SFUNC       reduce using rule 61 (sign)
    SFUNC       [reduce using rule 95 (cmp_expr)]
    SLONG       reduce using rule 61 (sign)
    SLONG       [reduce using rule 95 (cmp_expr)]
    SFLOAT      reduce using rule 61 (sign)
    SFLOAT      [reduce using rule 95 (cmp_expr)]
    SFOR        reduce using rule 61 (sign)
    SFOR        [reduce using rule 95 (cmp_expr)]
    SSHORT      reduce using rule 61 (sign)
    SSHORT      [reduce using rule 95 (cmp_expr)]
    SWHILE      reduce using rule 61 (sign)
    SWHILE      [reduce using rule 95 (cmp_expr)]
    "+"         reduce using rule 61 (sign)
    "+"         [reduce using rule 95 (cmp_expr)]
    "*="        reduce using rule 16 (var)
    "--"        reduce using rule 16 (var)
    "--"        [reduce using rule 61 (sign)]
    "--"        [reduce using rule 95 (cmp_expr)]
    "-"         reduce using rule 61 (sign)
    "-"         [reduce using rule 95 (cmp_expr)]
    "/="        reduce using rule 16 (var)
    "<"         reduce using rule 95 (cmp_expr)
    "!"         reduce using rule 61 (sign)
    "!"         [reduce using rule 95 (cmp_expr)]
    ">"         reduce using rule 95 (cmp_expr)
    "&&"        reduce using rule 95 (cmp_expr)
    "<="        reduce using rule 95 (cmp_expr)
    "||"        reduce using rule 95 (cmp_expr)
    ">="        reduce using rule 95 (cmp_expr)
    "="         reduce using rule 16 (var)
    "=="        reduce using rule 95 (cmp_expr)
    "+="        reduce using rule 16 (var)
    "!="        reduce using rule 95 (cmp_expr)
    "-="        reduce using rule 16 (var)
    "++"        reduce using rule 16 (var)
    "++"        [reduce using rule 61 (sign)]
    "++"        [reduce using rule 95 (cmp_expr)]
    "["         reduce using rule 61 (sign)
    "["         [reduce using rule 95 (cmp_expr)]
    "{"         reduce using rule 61 (sign)
    "{"         [reduce using rule 95 (cmp_expr)]
    "}"         reduce using rule 61 (sign)
    "}"         [reduce using rule 95 (cmp_expr)]
    ","         reduce using rule 16 (var)
    SSCAN       reduce using rule 61 (sign)
    SSCAN       [reduce using rule 95 (cmp_expr)]
    SPRINT      reduce using rule 61 (sign)
    SPRINT      [reduce using rule 95 (cmp_expr)]
    SLEN        reduce using rule 61 (sign)
    SLEN        [reduce using rule 95 (cmp_expr)]
    SCMP        reduce using rule 61 (sign)
    SCMP        [reduce using rule 95 (cmp_expr)]
    NEWLINE     reduce using rule 61 (sign)
    NEWLINE     [reduce using rule 95 (cmp_expr)]
    $default    reduce using rule 61 (sign)

    params  go to state 172


State 99

   51 decl_func: name_func decl_statement •

    $default  reduce using rule 51 (decl_func)


State 100

   65 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 64
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 173


State 101

   66 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 64
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 174


State 102

   67 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 64
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 175


State 103

   68 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 64
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 176


State 104

   69 arithm_expr: arithm_expr "%" • arithm_expr

    IDENTIFIER  shift, and go to state 64
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 177


State 105

  119 decl_statement: assign ";" •

    $default  reduce using rule 119 (decl_statement)


State 106

   97 cmp_expr: cmp_expr "<" • cmp_expr
  106         | cmp_expr "<" • "<" cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "<"         shift, and go to state 178
    "!"         shift, and go to state 19

    cmp_expr  go to state 179


State 107

   96 cmp_expr: cmp_expr ">" • cmp_expr
  105         | cmp_expr ">" • ">" cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    ">"         shift, and go to state 180

    cmp_expr  go to state 181


State 108

  103 cmp_expr: cmp_expr "&&" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 182


State 109

   98 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 183


State 110

  102 cmp_expr: cmp_expr "||" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 184


State 111

   99 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 185


State 112

  100 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 186


State 113

  101 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 187


State 114

  108 merge_arr: merge_arr "+" • merge_arr
  110          | merge_arr "+" • TOKEN_ERROR merge_arr

    "["          shift, and go to state 21
    TOKEN_ERROR  shift, and go to state 188

    arr_elements  go to state 31
    merge_arr     go to state 189


State 115

    3 program: program merge_arr TOKEN_ERROR • merge_arr NEWLINE
  109 merge_arr: merge_arr TOKEN_ERROR • "+" merge_arr

    "+"  shift, and go to state 190
    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 191


State 116

    1 program: program decl_statements NEWLINE •
  124 decl_statement: NEWLINE •

    IDENTIFIER  reduce using rule 1 (program)
    IDENTIFIER  [reduce using rule 124 (decl_statement)]
    INTEGER     reduce using rule 1 (program)
    INTEGER     [reduce using rule 124 (decl_statement)]
    FLOAT       reduce using rule 1 (program)
    FLOAT       [reduce using rule 124 (decl_statement)]
    SIF         reduce using rule 1 (program)
    SIF         [reduce using rule 124 (decl_statement)]
    SDOUBLE     reduce using rule 1 (program)
    SDOUBLE     [reduce using rule 124 (decl_statement)]
    SINT        reduce using rule 1 (program)
    SINT        [reduce using rule 124 (decl_statement)]
    SFUNC       reduce using rule 1 (program)
    SFUNC       [reduce using rule 124 (decl_statement)]
    SLONG       reduce using rule 1 (program)
    SLONG       [reduce using rule 124 (decl_statement)]
    SFLOAT      reduce using rule 1 (program)
    SFLOAT      [reduce using rule 124 (decl_statement)]
    SFOR        reduce using rule 1 (program)
    SFOR        [reduce using rule 124 (decl_statement)]
    SSHORT      reduce using rule 1 (program)
    SSHORT      [reduce using rule 124 (decl_statement)]
    SWHILE      reduce using rule 1 (program)
    SWHILE      [reduce using rule 124 (decl_statement)]
    "+"         reduce using rule 1 (program)
    "+"         [reduce using rule 124 (decl_statement)]
    "--"        reduce using rule 1 (program)
    "--"        [reduce using rule 124 (decl_statement)]
    "-"         reduce using rule 1 (program)
    "-"         [reduce using rule 124 (decl_statement)]
    "!"         reduce using rule 1 (program)
    "!"         [reduce using rule 124 (decl_statement)]
    "++"        reduce using rule 1 (program)
    "++"        [reduce using rule 124 (decl_statement)]
    "["         reduce using rule 1 (program)
    "["         [reduce using rule 124 (decl_statement)]
    "{"         reduce using rule 1 (program)
    "{"         [reduce using rule 124 (decl_statement)]
    SSCAN       reduce using rule 1 (program)
    SSCAN       [reduce using rule 124 (decl_statement)]
    SPRINT      reduce using rule 1 (program)
    SPRINT      [reduce using rule 124 (decl_statement)]
    SLEN        reduce using rule 1 (program)
    SLEN        [reduce using rule 124 (decl_statement)]
    SCMP        reduce using rule 1 (program)
    SCMP        [reduce using rule 124 (decl_statement)]
    NEWLINE     reduce using rule 1 (program)
    NEWLINE     [reduce using rule 124 (decl_statement)]
    $default    reduce using rule 1 (program)


State 117

  112 decl_statements: decl_statements decl_statement •

    $default  reduce using rule 112 (decl_statements)


State 118

   18 pos_elem: IDENTIFIER • "[" INTEGER "]"
   19         | IDENTIFIER • "[" IDENTIFIER "]"
   36 func: IDENTIFIER • "(" print_params ")"
   45 print_params: IDENTIFIER •

    "("  shift, and go to state 49
    "["  shift, and go to state 192

    $default  reduce using rule 45 (print_params)


State 119

   44 print_params: STRING •

    $default  reduce using rule 44 (print_params)


State 120

   46 print_params: INTEGER •

    $default  reduce using rule 46 (print_params)


State 121

   47 print_params: FLOAT •

    $default  reduce using rule 47 (print_params)


State 122

   49 print_params: pos_elem •

    $default  reduce using rule 49 (print_params)


State 123

   48 print_params: func •

    $default  reduce using rule 48 (print_params)


State 124

   36 func: IDENTIFIER "(" print_params • ")"
   50 print_params: print_params • "," print_params

    ")"  shift, and go to state 193
    ","  shift, and go to state 194


State 125

  127 condition: "(" • condition ")"
  128          | "(" • "(" condition ")" ")"
  128          | "(" "(" • condition ")" ")"

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 125

    cmp_expr   go to state 54
    condition  go to state 195


State 126

  127 condition: "(" condition • ")"

    ")"  shift, and go to state 196


State 127

  125 if_statement: SIF condition decl_statement •

    $default  reduce using rule 125 (if_statement)


State 128

  131 for_statement: SFOR "(" assign • ";" cmp_expr ";" oper_eq ")" decl_statement

    ";"  shift, and go to state 197


State 129

  130 while_statement: SWHILE condition decl_statement •

    $default  reduce using rule 130 (while_statement)


State 130

   24 arr_elements: "[" var "]" •

    $default  reduce using rule 24 (arr_elements)


State 131

   21 arr_elements: "[" integ "]" •

    $default  reduce using rule 21 (arr_elements)


State 132

   26 integ: integ "," • integ

    INTEGER  shift, and go to state 74

    integ  go to state 198


State 133

   22 arr_elements: "[" fl "]" •

    $default  reduce using rule 22 (arr_elements)


State 134

   28 fl: fl "," • fl

    FLOAT  shift, and go to state 75

    fl  go to state 199


State 135

   23 arr_elements: "[" str "]" •

    $default  reduce using rule 23 (arr_elements)


State 136

   30 str: str "," • str

    STRING  shift, and go to state 73

    str  go to state 200


State 137

  109 merge_arr: merge_arr TOKEN_ERROR • "+" merge_arr

    "+"  shift, and go to state 190


State 138

  129 block_statement: "{" decl_statements "}" •

    $default  reduce using rule 129 (block_statement)


State 139

   37 scan_params: IDENTIFIER •

    $default  reduce using rule 37 (scan_params)


State 140

   32 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 201


State 141

   35 func: SPRINT "(" print_params • ")"
   50 print_params: print_params • "," print_params

    ")"  shift, and go to state 202
    ","  shift, and go to state 194


State 142

   40 len_params: IDENTIFIER •

    $default  reduce using rule 40 (len_params)


State 143

   39 len_params: STRING •

    $default  reduce using rule 39 (len_params)


State 144

   38 len_params: arr_elements •

    $default  reduce using rule 38 (len_params)


State 145

   33 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 203


State 146

   42 cmp_params: IDENTIFIER •

    $default  reduce using rule 42 (cmp_params)


State 147

   41 cmp_params: STRING •

    $default  reduce using rule 41 (cmp_params)


State 148

   34 func: SCMP "(" cmp_params • ")"
   43 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 204
    ","  shift, and go to state 205


State 149

   18 pos_elem: IDENTIFIER • "[" INTEGER "]"
   19         | IDENTIFIER • "[" IDENTIFIER "]"
   87 val2: IDENTIFIER •

    "["  shift, and go to state 192

    $default  reduce using rule 87 (val2)


State 150

   70 number: INTEGER •

    $default  reduce using rule 70 (number)


State 151

   71 number: FLOAT •

    $default  reduce using rule 71 (number)


State 152

   72 number: pos_elem •

    $default  reduce using rule 72 (number)


State 153

   86 val2: number •

    $default  reduce using rule 86 (val2)


State 154

   84 oper_eq: var "*=" val2 •

    $default  reduce using rule 84 (oper_eq)


State 155

   85 oper_eq: var "/=" val2 •

    $default  reduce using rule 85 (oper_eq)


State 156

   18 pos_elem: IDENTIFIER • "[" INTEGER "]"
   19         | IDENTIFIER • "[" IDENTIFIER "]"
   61 sign: IDENTIFIER •
   89 val: IDENTIFIER •
   95 cmp_expr: IDENTIFIER •

    "["  shift, and go to state 192

    "+"       reduce using rule 61 (sign)
    "-"       reduce using rule 61 (sign)
    "*"       reduce using rule 61 (sign)
    "/"       reduce using rule 61 (sign)
    "%"       reduce using rule 61 (sign)
    ","       reduce using rule 89 (val)
    ";"       reduce using rule 61 (sign)
    ";"       [reduce using rule 89 (val)]
    ";"       [reduce using rule 95 (cmp_expr)]
    $default  reduce using rule 95 (cmp_expr)


State 157

   90 val: STRING •

    $default  reduce using rule 90 (val)


State 158

   59 sign: INTEGER •
   70 number: INTEGER •
   93 cmp_expr: INTEGER •

    "+"       reduce using rule 59 (sign)
    "-"       reduce using rule 59 (sign)
    "*"       reduce using rule 59 (sign)
    "/"       reduce using rule 59 (sign)
    "%"       reduce using rule 59 (sign)
    ","       reduce using rule 70 (number)
    ";"       reduce using rule 59 (sign)
    ";"       [reduce using rule 70 (number)]
    ";"       [reduce using rule 93 (cmp_expr)]
    $default  reduce using rule 93 (cmp_expr)


State 159

   60 sign: FLOAT •
   71 number: FLOAT •
   94 cmp_expr: FLOAT •

    "+"       reduce using rule 60 (sign)
    "-"       reduce using rule 60 (sign)
    "*"       reduce using rule 60 (sign)
    "/"       reduce using rule 60 (sign)
    "%"       reduce using rule 60 (sign)
    ","       reduce using rule 71 (number)
    ";"       reduce using rule 60 (sign)
    ";"       [reduce using rule 71 (number)]
    ";"       [reduce using rule 94 (cmp_expr)]
    $default  reduce using rule 94 (cmp_expr)


State 160

   91 val: arr_elements •
  107 merge_arr: arr_elements •

    "+"          reduce using rule 107 (merge_arr)
    ";"          reduce using rule 91 (val)
    ";"          [reduce using rule 107 (merge_arr)]
    TOKEN_ERROR  reduce using rule 107 (merge_arr)
    $default     reduce using rule 91 (val)


State 161

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr
   69            | arithm_expr • "%" arithm_expr
   75 assign: var "=" arithm_expr •

    "+"  shift, and go to state 100
    "-"  shift, and go to state 101
    "*"  shift, and go to state 102
    "/"  shift, and go to state 103
    "%"  shift, and go to state 104

    $default  reduce using rule 75 (assign)


State 162

   88 val: number •

    $default  reduce using rule 88 (val)


State 163

   73 assign: var "=" val •
   92 val: val • "," val

    ","  shift, and go to state 206

    $default  reduce using rule 73 (assign)


State 164

   74 assign: var "=" cmp_expr •
   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    "<"   shift, and go to state 106
    ">"   shift, and go to state 107
    "&&"  shift, and go to state 108
    "<="  shift, and go to state 109
    "||"  shift, and go to state 110
    ">="  shift, and go to state 111
    "=="  shift, and go to state 112
    "!="  shift, and go to state 113

    $default  reduce using rule 74 (assign)


State 165

   76 assign: var "=" merge_arr •
  108 merge_arr: merge_arr • "+" merge_arr
  109          | merge_arr • TOKEN_ERROR "+" merge_arr
  110          | merge_arr • "+" TOKEN_ERROR merge_arr

    "+"          shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 137

    $default  reduce using rule 76 (assign)


State 166

   18 pos_elem: IDENTIFIER • "[" INTEGER "]"
   19         | IDENTIFIER • "[" IDENTIFIER "]"
   89 val: IDENTIFIER •

    "["  shift, and go to state 192

    $default  reduce using rule 89 (val)


State 167

   91 val: arr_elements •

    $default  reduce using rule 91 (val)


State 168

   82 oper_eq: var "+=" val •
   92 val: val • "," val

    ","  shift, and go to state 206

    $default  reduce using rule 82 (oper_eq)


State 169

   83 oper_eq: var "-=" val2 •

    $default  reduce using rule 83 (oper_eq)


State 170

   17 var: var • "," var
   17    | var "," var •

    $default  reduce using rule 17 (var)


State 171

   36 func: IDENTIFIER "(" • print_params ")"
   55 params: "(" • ")"
   56       | "(" • type_params ")"

    IDENTIFIER  shift, and go to state 118
    STRING      shift, and go to state 119
    INTEGER     shift, and go to state 120
    FLOAT       shift, and go to state 121
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SSHORT      shift, and go to state 14
    ")"         shift, and go to state 207
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    type          go to state 208
    pos_elem      go to state 122
    func          go to state 123
    print_params  go to state 124
    type_params   go to state 209


State 172

   54 name_func: name_func IDENTIFIER params • NEWLINE

    NEWLINE  shift, and go to state 210


State 173

   65 arithm_expr: arithm_expr • "+" arithm_expr
   65            | arithm_expr "+" arithm_expr •
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr
   69            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 102
    "/"  shift, and go to state 103
    "%"  shift, and go to state 104

    $default  reduce using rule 65 (arithm_expr)


State 174

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   66            | arithm_expr "-" arithm_expr •
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr
   69            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 102
    "/"  shift, and go to state 103
    "%"  shift, and go to state 104

    $default  reduce using rule 66 (arithm_expr)


State 175

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   67            | arithm_expr "*" arithm_expr •
   68            | arithm_expr • "/" arithm_expr
   69            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 67 (arithm_expr)


State 176

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr
   68            | arithm_expr "/" arithm_expr •
   69            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 68 (arithm_expr)


State 177

   65 arithm_expr: arithm_expr • "+" arithm_expr
   66            | arithm_expr • "-" arithm_expr
   67            | arithm_expr • "*" arithm_expr
   68            | arithm_expr • "/" arithm_expr
   69            | arithm_expr • "%" arithm_expr
   69            | arithm_expr "%" arithm_expr •

    $default  reduce using rule 69 (arithm_expr)


State 178

  106 cmp_expr: cmp_expr "<" "<" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 211


State 179

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   97         | cmp_expr "<" cmp_expr •
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    $default  reduce using rule 97 (cmp_expr)


State 180

  105 cmp_expr: cmp_expr ">" ">" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 212


State 181

   96 cmp_expr: cmp_expr • ">" cmp_expr
   96         | cmp_expr ">" cmp_expr •
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    $default  reduce using rule 96 (cmp_expr)


State 182

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  103         | cmp_expr "&&" cmp_expr •
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    "<"   shift, and go to state 106
    ">"   shift, and go to state 107
    "<="  shift, and go to state 109
    ">="  shift, and go to state 111
    "=="  shift, and go to state 112
    "!="  shift, and go to state 113

    $default  reduce using rule 103 (cmp_expr)


State 183

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   98         | cmp_expr "<=" cmp_expr •
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    $default  reduce using rule 98 (cmp_expr)


State 184

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  102         | cmp_expr "||" cmp_expr •
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    "<"   shift, and go to state 106
    ">"   shift, and go to state 107
    "&&"  shift, and go to state 108
    "<="  shift, and go to state 109
    ">="  shift, and go to state 111
    "=="  shift, and go to state 112
    "!="  shift, and go to state 113

    $default  reduce using rule 102 (cmp_expr)


State 185

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
   99         | cmp_expr ">=" cmp_expr •
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    $default  reduce using rule 99 (cmp_expr)


State 186

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  100         | cmp_expr "==" cmp_expr •
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    "<"   shift, and go to state 106
    ">"   shift, and go to state 107
    "<="  shift, and go to state 109
    ">="  shift, and go to state 111

    $default  reduce using rule 100 (cmp_expr)


State 187

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  101         | cmp_expr "!=" cmp_expr •
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr

    "<"   shift, and go to state 106
    ">"   shift, and go to state 107
    "<="  shift, and go to state 109
    ">="  shift, and go to state 111

    $default  reduce using rule 101 (cmp_expr)


State 188

  110 merge_arr: merge_arr "+" TOKEN_ERROR • merge_arr

    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 213


State 189

  108 merge_arr: merge_arr • "+" merge_arr
  108          | merge_arr "+" merge_arr •
  109          | merge_arr • TOKEN_ERROR "+" merge_arr
  110          | merge_arr • "+" TOKEN_ERROR merge_arr

    TOKEN_ERROR  shift, and go to state 137

    TOKEN_ERROR  [reduce using rule 108 (merge_arr)]
    $default     reduce using rule 108 (merge_arr)


State 190

  109 merge_arr: merge_arr TOKEN_ERROR "+" • merge_arr

    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 214


State 191

    3 program: program merge_arr TOKEN_ERROR merge_arr • NEWLINE
  108 merge_arr: merge_arr • "+" merge_arr
  109          | merge_arr • TOKEN_ERROR "+" merge_arr
  110          | merge_arr • "+" TOKEN_ERROR merge_arr

    "+"          shift, and go to state 114
    NEWLINE      shift, and go to state 215
    TOKEN_ERROR  shift, and go to state 137


State 192

   18 pos_elem: IDENTIFIER "[" • INTEGER "]"
   19         | IDENTIFIER "[" • IDENTIFIER "]"

    IDENTIFIER  shift, and go to state 216
    INTEGER     shift, and go to state 217


State 193

   36 func: IDENTIFIER "(" print_params ")" •

    $default  reduce using rule 36 (func)


State 194

   50 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 118
    STRING      shift, and go to state 119
    INTEGER     shift, and go to state 120
    FLOAT       shift, and go to state 121
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 122
    func          go to state 123
    print_params  go to state 218


State 195

  127 condition: "(" condition • ")"
  128          | "(" "(" condition • ")" ")"

    ")"  shift, and go to state 219


State 196

  127 condition: "(" condition ")" •

    $default  reduce using rule 127 (condition)


State 197

  131 for_statement: SFOR "(" assign ";" • cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 220


State 198

   26 integ: integ • "," integ
   26      | integ "," integ •

    $default  reduce using rule 26 (integ)


State 199

   28 fl: fl • "," fl
   28   | fl "," fl •

    $default  reduce using rule 28 (fl)


State 200

   30 str: str • "," str
   30    | str "," str •

    $default  reduce using rule 30 (str)


State 201

   32 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 32 (func)


State 202

   35 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 35 (func)


State 203

   33 func: SLEN "(" len_params ")" •

    $default  reduce using rule 33 (func)


State 204

   34 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 34 (func)


State 205

   43 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 146
    STRING      shift, and go to state 147

    cmp_params  go to state 221


State 206

   92 val: val "," • val

    IDENTIFIER  shift, and go to state 166
    STRING      shift, and go to state 157
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151
    "["         shift, and go to state 21

    pos_elem      go to state 152
    arr_elements  go to state 167
    number        go to state 162
    val           go to state 222


State 207

   55 params: "(" ")" •

    $default  reduce using rule 55 (params)


State 208

   57 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 223


State 209

   56 params: "(" type_params • ")"
   58 type_params: type_params • "," type_params

    ")"  shift, and go to state 224
    ","  shift, and go to state 225


State 210

   54 name_func: name_func IDENTIFIER params NEWLINE •

    $default  reduce using rule 54 (name_func)


State 211

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr
  106         | cmp_expr "<" "<" cmp_expr •

    $default  reduce using rule 106 (cmp_expr)


State 212

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  105         | cmp_expr ">" ">" cmp_expr •
  106         | cmp_expr • "<" "<" cmp_expr

    $default  reduce using rule 105 (cmp_expr)


State 213

  108 merge_arr: merge_arr • "+" merge_arr
  109          | merge_arr • TOKEN_ERROR "+" merge_arr
  110          | merge_arr • "+" TOKEN_ERROR merge_arr
  110          | merge_arr "+" TOKEN_ERROR merge_arr •

    "+"          shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 137

    "+"          [reduce using rule 110 (merge_arr)]
    TOKEN_ERROR  [reduce using rule 110 (merge_arr)]
    $default     reduce using rule 110 (merge_arr)


State 214

  108 merge_arr: merge_arr • "+" merge_arr
  109          | merge_arr • TOKEN_ERROR "+" merge_arr
  109          | merge_arr TOKEN_ERROR "+" merge_arr •
  110          | merge_arr • "+" TOKEN_ERROR merge_arr

    TOKEN_ERROR  shift, and go to state 137

    TOKEN_ERROR  [reduce using rule 109 (merge_arr)]
    $default     reduce using rule 109 (merge_arr)


State 215

    3 program: program merge_arr TOKEN_ERROR merge_arr NEWLINE •

    $default  reduce using rule 3 (program)


State 216

   19 pos_elem: IDENTIFIER "[" IDENTIFIER • "]"

    "]"  shift, and go to state 226


State 217

   18 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 227


State 218

   50 print_params: print_params • "," print_params
   50             | print_params "," print_params •

    $default  reduce using rule 50 (print_params)


State 219

  127 condition: "(" condition ")" •
  128          | "(" "(" condition ")" • ")"

    ")"  shift, and go to state 228

    ")"  [reduce using rule 127 (condition)]


State 220

   96 cmp_expr: cmp_expr • ">" cmp_expr
   97         | cmp_expr • "<" cmp_expr
   98         | cmp_expr • "<=" cmp_expr
   99         | cmp_expr • ">=" cmp_expr
  100         | cmp_expr • "==" cmp_expr
  101         | cmp_expr • "!=" cmp_expr
  102         | cmp_expr • "||" cmp_expr
  103         | cmp_expr • "&&" cmp_expr
  105         | cmp_expr • ">" ">" cmp_expr
  106         | cmp_expr • "<" "<" cmp_expr
  131 for_statement: SFOR "(" assign ";" cmp_expr • ";" oper_eq ")" decl_statement

    "<"   shift, and go to state 106
    ">"   shift, and go to state 107
    "&&"  shift, and go to state 108
    "<="  shift, and go to state 109
    "||"  shift, and go to state 110
    ">="  shift, and go to state 111
    "=="  shift, and go to state 112
    "!="  shift, and go to state 113
    ";"   shift, and go to state 229


State 221

   43 cmp_params: cmp_params • "," cmp_params
   43           | cmp_params "," cmp_params •

    $default  reduce using rule 43 (cmp_params)


State 222

   92 val: val • "," val
   92    | val "," val •

    $default  reduce using rule 92 (val)


State 223

   57 type_params: type IDENTIFIER •

    $default  reduce using rule 57 (type_params)


State 224

   56 params: "(" type_params ")" •

    $default  reduce using rule 56 (params)


State 225

   58 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 8
    SINT     shift, and go to state 9
    SLONG    shift, and go to state 11
    SFLOAT   shift, and go to state 12
    SSHORT   shift, and go to state 14

    type         go to state 208
    type_params  go to state 230


State 226

   19 pos_elem: IDENTIFIER "[" IDENTIFIER "]" •

    $default  reduce using rule 19 (pos_elem)


State 227

   18 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 18 (pos_elem)


State 228

  128 condition: "(" "(" condition ")" ")" •

    $default  reduce using rule 128 (condition)


State 229

  131 for_statement: SFOR "(" assign ";" cmp_expr ";" • oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 68
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20

    var      go to state 231
    oper_eq  go to state 232


State 230

   58 type_params: type_params • "," type_params
   58            | type_params "," type_params •

    $default  reduce using rule 58 (type_params)


State 231

   17 var: var • "," var
   78 oper_eq: var • "++"
   79        | var • "--"
   82        | var • "+=" val
   83        | var • "-=" val2
   84        | var • "*=" val2
   85        | var • "/=" val2

    "*="  shift, and go to state 89
    "--"  shift, and go to state 90
    "/="  shift, and go to state 91
    "+="  shift, and go to state 93
    "-="  shift, and go to state 94
    "++"  shift, and go to state 95
    ","   shift, and go to state 96


State 232

  131 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq • ")" decl_statement

    ")"  shift, and go to state 233


State 233

  131 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 81
    decl_statement   go to state 234
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 234

  131 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement •

    $default  reduce using rule 131 (for_statement)
