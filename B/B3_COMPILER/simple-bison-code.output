Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "&"
    "\\"


State 4 conflicts: 27 reduce/reduce
State 5 conflicts: 25 reduce/reduce
State 6 conflicts: 25 reduce/reduce
State 8 conflicts: 1 shift/reduce
State 9 conflicts: 1 shift/reduce
State 10 conflicts: 5 shift/reduce
State 11 conflicts: 1 shift/reduce
State 12 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce
State 37 conflicts: 2 shift/reduce
State 41 conflicts: 2 shift/reduce
State 80 conflicts: 2 shift/reduce
State 97 conflicts: 27 reduce/reduce
State 116 conflicts: 24 reduce/reduce
State 125 conflicts: 2 shift/reduce
State 155 conflicts: 2 reduce/reduce
State 157 conflicts: 2 reduce/reduce
State 158 conflicts: 2 reduce/reduce
State 159 conflicts: 1 reduce/reduce
State 187 conflicts: 1 shift/reduce
State 188 conflicts: 1 shift/reduce
State 194 conflicts: 26 reduce/reduce
State 196 conflicts: 1 reduce/reduce
State 213 conflicts: 3 shift/reduce
State 214 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_statements NEWLINE
    2        | program error NEWLINE
    3        | program merge_arr TOKEN_ERROR merge_arr NEWLINE
    4        | Îµ

    5 decl_var: type var

    6 type: SINT
    7     | SINT SINT
    8     | SFLOAT
    9     | SFLOAT SFLOAT
   10     | SDOUBLE
   11     | SDOUBLE SDOUBLE
   12     | SSHORT
   13     | SSHORT SSHORT
   14     | SLONG
   15     | SLONG SLONG

   16 var: IDENTIFIER
   17    | var "," var

   18 pos_elem: IDENTIFIER "[" INTEGER "]"
   19         | IDENTIFIER "[" IDENTIFIER "]"

   20 arr_elements: "[" "]"
   21             | "[" integ "]"
   22             | "[" fl "]"
   23             | "[" str "]"

   24 integ: INTEGER
   25      | integ "," integ

   26 fl: FLOAT
   27   | fl "," fl

   28 str: STRING
   29    | str "," str

   30 build_func: func

   31 func: SSCAN "(" scan_params ")"
   32     | SLEN "(" len_params ")"
   33     | SCMP "(" cmp_params ")"
   34     | SPRINT "(" print_params ")"
   35     | IDENTIFIER "(" print_params ")"

   36 scan_params: IDENTIFIER

   37 len_params: arr_elements
   38           | STRING
   39           | IDENTIFIER

   40 cmp_params: STRING
   41           | IDENTIFIER
   42           | cmp_params "," cmp_params

   43 print_params: STRING
   44             | IDENTIFIER
   45             | INTEGER
   46             | FLOAT
   47             | func
   48             | pos_elem
   49             | print_params "," print_params

   50 decl_func: name_func decl_statement

   51 name_func: SFUNC
   52          | SFUNC type
   53          | name_func IDENTIFIER params NEWLINE

   54 params: "(" ")"
   55       | "(" type_params ")"

   56 type_params: type IDENTIFIER
   57            | type_params "," type_params

   58 sign: INTEGER
   59     | FLOAT
   60     | "+" sign
   61     | "-" sign

   62 arithm_expr: sign
   63            | IDENTIFIER
   64            | arithm_expr "+" arithm_expr
   65            | arithm_expr "-" arithm_expr
   66            | arithm_expr "*" arithm_expr
   67            | arithm_expr "/" arithm_expr
   68            | arithm_expr "%" arithm_expr

   69 number: INTEGER
   70       | FLOAT
   71       | pos_elem

   72 assign: var "=" val
   73       | var "=" cmp_expr
   74       | var "=" arithm_expr
   75       | var "=" merge_arr
   76       | oper_eq

   77 oper_eq: var "++"
   78        | var "--"
   79        | "++" var
   80        | "--" var
   81        | var "+=" number
   82        | var "-=" number
   83        | var "*=" number
   84        | var "/=" number

   85 val: number
   86    | IDENTIFIER
   87    | STRING
   88    | arr_elements
   89    | val "," val

   90 cmp_expr: INTEGER
   91         | FLOAT
   92         | IDENTIFIER
   93         | cmp_expr ">" cmp_expr
   94         | cmp_expr "<" cmp_expr
   95         | cmp_expr "<=" cmp_expr
   96         | cmp_expr ">=" cmp_expr
   97         | cmp_expr "==" cmp_expr
   98         | cmp_expr "!=" cmp_expr
   99         | cmp_expr "||" cmp_expr
  100         | cmp_expr "&&" cmp_expr
  101         | "!" cmp_expr
  102         | cmp_expr ">" ">" arithm_expr
  103         | cmp_expr "<" "<" arithm_expr

  104 merge_arr: arr_elements
  105          | merge_arr "+" merge_arr
  106          | merge_arr TOKEN_ERROR "+" merge_arr
  107          | merge_arr "+" TOKEN_ERROR merge_arr
  108          | merge_arr "++" merge_arr

  109 decl_statements: decl_statement
  110                | decl_statements decl_statement

  111 decl_statement: if_statement
  112               | while_statement
  113               | for_statement
  114               | decl_var ";"
  115               | build_func ";"
  116               | decl_func
  117               | assign ";"
  118               | arithm_expr
  119               | cmp_expr
  120               | merge_arr
  121               | block_statement
  122               | NEWLINE

  123 if_statement: SIF condition decl_statement

  124 condition: cmp_expr
  125          | "(" condition ")"
  126          | "((" condition ")"
  127          | "(" condition "))"
  128          | condition ")"
  129          | "(" condition

  130 block_statement: "{" decl_statements "}"

  131 while_statement: SWHILE condition decl_statement

  132 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256) 2
    IDENTIFIER <sval> (258) 16 18 19 35 36 39 41 44 53 56 63 86 92
    STRING <sval> (259) 28 38 40 43 87
    INTEGER <ival> (260) 18 24 45 58 69 90
    FLOAT <fval> (261) 26 46 59 70 91
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 123
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 10 11
    SINT <sval> (268) 6 7
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 51 52
    SELSE <sval> (271)
    SLONG <sval> (272) 14 15
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 8 9
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279) 132
    SSHORT <sval> (280) 12 13
    SWHILE <sval> (281) 131
    "+" (282) 60 64 105 106 107
    "*=" (283) 83
    "--" (284) 78 80
    "-" (285) 61 65
    "/=" (286) 84
    "<" (287) 94 103
    "*" (288) 66
    "!" (289) 101
    ">" (290) 93 102
    "/" (291) 67
    "&&" (292) 100
    "<=" (293) 95
    "%" (294) 68
    "||" (295) 99
    ">=" (296) 96
    "=" (297) 72 73 74 75
    "==" (298) 97
    "&" (299)
    "+=" (300) 81
    "!=" (301) 98
    "-=" (302) 82
    "++" (303) 77 79 108
    "(" (304) 31 32 33 34 35 54 55 125 127 129 132
    ")" (305) 31 32 33 34 35 54 55 125 126 128 132
    "[" (306) 18 19 20 21 22 23
    "]" (307) 18 19 20 21 22 23
    "{" (308) 130
    "}" (309) 130
    "," (310) 17 25 27 29 42 49 57 89
    "\\" (311)
    ";" (312) 114 115 117 132
    SSCAN (313) 31
    SPRINT (314) 34
    SLEN (315) 32
    SCMP (316) 33
    NEWLINE (317) 1 2 3 53 122
    TOKEN_ERROR (318) 3 106 107
    "((" (319) 126
    "))" (320) 127


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    program <sval> (67)
        on left: 1 2 3 4
        on right: 0 1 2 3
    decl_var <sval> (68)
        on left: 5
        on right: 114
    type <sval> (69)
        on left: 6 7 8 9 10 11 12 13 14 15
        on right: 5 52 56
    var <sval> (70)
        on left: 16 17
        on right: 5 17 72 73 74 75 77 78 79 80 81 82 83 84
    pos_elem <sval> (71)
        on left: 18 19
        on right: 48 71
    arr_elements <sval> (72)
        on left: 20 21 22 23
        on right: 37 88 104
    integ <sval> (73)
        on left: 24 25
        on right: 21 25
    fl <sval> (74)
        on left: 26 27
        on right: 22 27
    str <sval> (75)
        on left: 28 29
        on right: 23 29
    build_func <sval> (76)
        on left: 30
        on right: 115
    func <sval> (77)
        on left: 31 32 33 34 35
        on right: 30 47
    scan_params <sval> (78)
        on left: 36
        on right: 31
    len_params <sval> (79)
        on left: 37 38 39
        on right: 32
    cmp_params <sval> (80)
        on left: 40 41 42
        on right: 33 42
    print_params <sval> (81)
        on left: 43 44 45 46 47 48 49
        on right: 34 35 49
    decl_func <sval> (82)
        on left: 50
        on right: 116
    name_func <sval> (83)
        on left: 51 52 53
        on right: 50 53
    params <sval> (84)
        on left: 54 55
        on right: 53
    type_params <sval> (85)
        on left: 56 57
        on right: 55 57
    sign <sval> (86)
        on left: 58 59 60 61
        on right: 60 61 62
    arithm_expr <sval> (87)
        on left: 62 63 64 65 66 67 68
        on right: 64 65 66 67 68 74 102 103 118
    number <sval> (88)
        on left: 69 70 71
        on right: 81 82 83 84 85
    assign <sval> (89)
        on left: 72 73 74 75 76
        on right: 117 132
    oper_eq <sval> (90)
        on left: 77 78 79 80 81 82 83 84
        on right: 76 132
    val <sval> (91)
        on left: 85 86 87 88 89
        on right: 72 89
    cmp_expr <sval> (92)
        on left: 90 91 92 93 94 95 96 97 98 99 100 101 102 103
        on right: 73 93 94 95 96 97 98 99 100 101 102 103 119 124 132
    merge_arr <sval> (93)
        on left: 104 105 106 107 108
        on right: 3 75 105 106 107 108 120
    decl_statements <sval> (94)
        on left: 109 110
        on right: 1 110 130
    decl_statement <sval> (95)
        on left: 111 112 113 114 115 116 117 118 119 120 121 122
        on right: 50 109 110 123 131 132
    if_statement <sval> (96)
        on left: 123
        on right: 111
    condition <sval> (97)
        on left: 124 125 126 127 128 129
        on right: 123 125 126 127 128 129 131
    block_statement <sval> (98)
        on left: 130
        on right: 121
    while_statement <sval> (99)
        on left: 131
        on right: 112
    for_statement <sval> (100)
        on left: 132
        on right: 113


State 0

    0 $accept: â¢ program $end

    $default  reduce using rule 4 (program)

    program  go to state 1


State 1

    0 $accept: program â¢ $end
    1 program: program â¢ decl_statements NEWLINE
    2        | program â¢ error NEWLINE
    3        | program â¢ merge_arr TOKEN_ERROR merge_arr NEWLINE

    $end        shift, and go to state 2
    error       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statements  go to state 42
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 2

    0 $accept: program $end â¢

    $default  accept


State 3

    2 program: program error â¢ NEWLINE

    NEWLINE  shift, and go to state 48


State 4

   16 var: IDENTIFIER â¢
   35 func: IDENTIFIER â¢ "(" print_params ")"
   63 arithm_expr: IDENTIFIER â¢
   92 cmp_expr: IDENTIFIER â¢

    "("  shift, and go to state 49

    IDENTIFIER  reduce using rule 63 (arithm_expr)
    IDENTIFIER  [reduce using rule 92 (cmp_expr)]
    INTEGER     reduce using rule 63 (arithm_expr)
    INTEGER     [reduce using rule 92 (cmp_expr)]
    FLOAT       reduce using rule 63 (arithm_expr)
    FLOAT       [reduce using rule 92 (cmp_expr)]
    SIF         reduce using rule 63 (arithm_expr)
    SIF         [reduce using rule 92 (cmp_expr)]
    SDOUBLE     reduce using rule 63 (arithm_expr)
    SDOUBLE     [reduce using rule 92 (cmp_expr)]
    SINT        reduce using rule 63 (arithm_expr)
    SINT        [reduce using rule 92 (cmp_expr)]
    SFUNC       reduce using rule 63 (arithm_expr)
    SFUNC       [reduce using rule 92 (cmp_expr)]
    SLONG       reduce using rule 63 (arithm_expr)
    SLONG       [reduce using rule 92 (cmp_expr)]
    SFLOAT      reduce using rule 63 (arithm_expr)
    SFLOAT      [reduce using rule 92 (cmp_expr)]
    SFOR        reduce using rule 63 (arithm_expr)
    SFOR        [reduce using rule 92 (cmp_expr)]
    SSHORT      reduce using rule 63 (arithm_expr)
    SSHORT      [reduce using rule 92 (cmp_expr)]
    SWHILE      reduce using rule 63 (arithm_expr)
    SWHILE      [reduce using rule 92 (cmp_expr)]
    "+"         reduce using rule 63 (arithm_expr)
    "+"         [reduce using rule 92 (cmp_expr)]
    "*="        reduce using rule 16 (var)
    "--"        reduce using rule 16 (var)
    "--"        [reduce using rule 63 (arithm_expr)]
    "--"        [reduce using rule 92 (cmp_expr)]
    "-"         reduce using rule 63 (arithm_expr)
    "-"         [reduce using rule 92 (cmp_expr)]
    "/="        reduce using rule 16 (var)
    "<"         reduce using rule 92 (cmp_expr)
    "!"         reduce using rule 63 (arithm_expr)
    "!"         [reduce using rule 92 (cmp_expr)]
    ">"         reduce using rule 92 (cmp_expr)
    "&&"        reduce using rule 92 (cmp_expr)
    "<="        reduce using rule 92 (cmp_expr)
    "||"        reduce using rule 92 (cmp_expr)
    ">="        reduce using rule 92 (cmp_expr)
    "="         reduce using rule 16 (var)
    "=="        reduce using rule 92 (cmp_expr)
    "+="        reduce using rule 16 (var)
    "!="        reduce using rule 92 (cmp_expr)
    "-="        reduce using rule 16 (var)
    "++"        reduce using rule 16 (var)
    "++"        [reduce using rule 63 (arithm_expr)]
    "++"        [reduce using rule 92 (cmp_expr)]
    "["         reduce using rule 63 (arithm_expr)
    "["         [reduce using rule 92 (cmp_expr)]
    "{"         reduce using rule 63 (arithm_expr)
    "{"         [reduce using rule 92 (cmp_expr)]
    "}"         reduce using rule 63 (arithm_expr)
    "}"         [reduce using rule 92 (cmp_expr)]
    ","         reduce using rule 16 (var)
    SSCAN       reduce using rule 63 (arithm_expr)
    SSCAN       [reduce using rule 92 (cmp_expr)]
    SPRINT      reduce using rule 63 (arithm_expr)
    SPRINT      [reduce using rule 92 (cmp_expr)]
    SLEN        reduce using rule 63 (arithm_expr)
    SLEN        [reduce using rule 92 (cmp_expr)]
    SCMP        reduce using rule 63 (arithm_expr)
    SCMP        [reduce using rule 92 (cmp_expr)]
    NEWLINE     reduce using rule 63 (arithm_expr)
    NEWLINE     [reduce using rule 92 (cmp_expr)]
    $default    reduce using rule 63 (arithm_expr)


State 5

   58 sign: INTEGER â¢
   90 cmp_expr: INTEGER â¢

    IDENTIFIER  reduce using rule 58 (sign)
    IDENTIFIER  [reduce using rule 90 (cmp_expr)]
    INTEGER     reduce using rule 58 (sign)
    INTEGER     [reduce using rule 90 (cmp_expr)]
    FLOAT       reduce using rule 58 (sign)
    FLOAT       [reduce using rule 90 (cmp_expr)]
    SIF         reduce using rule 58 (sign)
    SIF         [reduce using rule 90 (cmp_expr)]
    SDOUBLE     reduce using rule 58 (sign)
    SDOUBLE     [reduce using rule 90 (cmp_expr)]
    SINT        reduce using rule 58 (sign)
    SINT        [reduce using rule 90 (cmp_expr)]
    SFUNC       reduce using rule 58 (sign)
    SFUNC       [reduce using rule 90 (cmp_expr)]
    SLONG       reduce using rule 58 (sign)
    SLONG       [reduce using rule 90 (cmp_expr)]
    SFLOAT      reduce using rule 58 (sign)
    SFLOAT      [reduce using rule 90 (cmp_expr)]
    SFOR        reduce using rule 58 (sign)
    SFOR        [reduce using rule 90 (cmp_expr)]
    SSHORT      reduce using rule 58 (sign)
    SSHORT      [reduce using rule 90 (cmp_expr)]
    SWHILE      reduce using rule 58 (sign)
    SWHILE      [reduce using rule 90 (cmp_expr)]
    "+"         reduce using rule 58 (sign)
    "+"         [reduce using rule 90 (cmp_expr)]
    "--"        reduce using rule 58 (sign)
    "--"        [reduce using rule 90 (cmp_expr)]
    "-"         reduce using rule 58 (sign)
    "-"         [reduce using rule 90 (cmp_expr)]
    "<"         reduce using rule 90 (cmp_expr)
    "!"         reduce using rule 58 (sign)
    "!"         [reduce using rule 90 (cmp_expr)]
    ">"         reduce using rule 90 (cmp_expr)
    "&&"        reduce using rule 90 (cmp_expr)
    "<="        reduce using rule 90 (cmp_expr)
    "||"        reduce using rule 90 (cmp_expr)
    ">="        reduce using rule 90 (cmp_expr)
    "=="        reduce using rule 90 (cmp_expr)
    "!="        reduce using rule 90 (cmp_expr)
    "++"        reduce using rule 58 (sign)
    "++"        [reduce using rule 90 (cmp_expr)]
    "["         reduce using rule 58 (sign)
    "["         [reduce using rule 90 (cmp_expr)]
    "{"         reduce using rule 58 (sign)
    "{"         [reduce using rule 90 (cmp_expr)]
    "}"         reduce using rule 58 (sign)
    "}"         [reduce using rule 90 (cmp_expr)]
    SSCAN       reduce using rule 58 (sign)
    SSCAN       [reduce using rule 90 (cmp_expr)]
    SPRINT      reduce using rule 58 (sign)
    SPRINT      [reduce using rule 90 (cmp_expr)]
    SLEN        reduce using rule 58 (sign)
    SLEN        [reduce using rule 90 (cmp_expr)]
    SCMP        reduce using rule 58 (sign)
    SCMP        [reduce using rule 90 (cmp_expr)]
    NEWLINE     reduce using rule 58 (sign)
    NEWLINE     [reduce using rule 90 (cmp_expr)]
    $default    reduce using rule 58 (sign)


State 6

   59 sign: FLOAT â¢
   91 cmp_expr: FLOAT â¢

    IDENTIFIER  reduce using rule 59 (sign)
    IDENTIFIER  [reduce using rule 91 (cmp_expr)]
    INTEGER     reduce using rule 59 (sign)
    INTEGER     [reduce using rule 91 (cmp_expr)]
    FLOAT       reduce using rule 59 (sign)
    FLOAT       [reduce using rule 91 (cmp_expr)]
    SIF         reduce using rule 59 (sign)
    SIF         [reduce using rule 91 (cmp_expr)]
    SDOUBLE     reduce using rule 59 (sign)
    SDOUBLE     [reduce using rule 91 (cmp_expr)]
    SINT        reduce using rule 59 (sign)
    SINT        [reduce using rule 91 (cmp_expr)]
    SFUNC       reduce using rule 59 (sign)
    SFUNC       [reduce using rule 91 (cmp_expr)]
    SLONG       reduce using rule 59 (sign)
    SLONG       [reduce using rule 91 (cmp_expr)]
    SFLOAT      reduce using rule 59 (sign)
    SFLOAT      [reduce using rule 91 (cmp_expr)]
    SFOR        reduce using rule 59 (sign)
    SFOR        [reduce using rule 91 (cmp_expr)]
    SSHORT      reduce using rule 59 (sign)
    SSHORT      [reduce using rule 91 (cmp_expr)]
    SWHILE      reduce using rule 59 (sign)
    SWHILE      [reduce using rule 91 (cmp_expr)]
    "+"         reduce using rule 59 (sign)
    "+"         [reduce using rule 91 (cmp_expr)]
    "--"        reduce using rule 59 (sign)
    "--"        [reduce using rule 91 (cmp_expr)]
    "-"         reduce using rule 59 (sign)
    "-"         [reduce using rule 91 (cmp_expr)]
    "<"         reduce using rule 91 (cmp_expr)
    "!"         reduce using rule 59 (sign)
    "!"         [reduce using rule 91 (cmp_expr)]
    ">"         reduce using rule 91 (cmp_expr)
    "&&"        reduce using rule 91 (cmp_expr)
    "<="        reduce using rule 91 (cmp_expr)
    "||"        reduce using rule 91 (cmp_expr)
    ">="        reduce using rule 91 (cmp_expr)
    "=="        reduce using rule 91 (cmp_expr)
    "!="        reduce using rule 91 (cmp_expr)
    "++"        reduce using rule 59 (sign)
    "++"        [reduce using rule 91 (cmp_expr)]
    "["         reduce using rule 59 (sign)
    "["         [reduce using rule 91 (cmp_expr)]
    "{"         reduce using rule 59 (sign)
    "{"         [reduce using rule 91 (cmp_expr)]
    "}"         reduce using rule 59 (sign)
    "}"         [reduce using rule 91 (cmp_expr)]
    SSCAN       reduce using rule 59 (sign)
    SSCAN       [reduce using rule 91 (cmp_expr)]
    SPRINT      reduce using rule 59 (sign)
    SPRINT      [reduce using rule 91 (cmp_expr)]
    SLEN        reduce using rule 59 (sign)
    SLEN        [reduce using rule 91 (cmp_expr)]
    SCMP        reduce using rule 59 (sign)
    SCMP        [reduce using rule 91 (cmp_expr)]
    NEWLINE     reduce using rule 59 (sign)
    NEWLINE     [reduce using rule 91 (cmp_expr)]
    $default    reduce using rule 59 (sign)


State 7

  123 if_statement: SIF â¢ condition decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53
    "(("        shift, and go to state 54

    cmp_expr   go to state 55
    condition  go to state 56


State 8

   10 type: SDOUBLE â¢
   11     | SDOUBLE â¢ SDOUBLE

    SDOUBLE  shift, and go to state 57

    SDOUBLE   [reduce using rule 10 (type)]
    $default  reduce using rule 10 (type)


State 9

    6 type: SINT â¢
    7     | SINT â¢ SINT

    SINT  shift, and go to state 58

    SINT      [reduce using rule 6 (type)]
    $default  reduce using rule 6 (type)


State 10

   51 name_func: SFUNC â¢
   52          | SFUNC â¢ type

    SDOUBLE  shift, and go to state 8
    SINT     shift, and go to state 9
    SLONG    shift, and go to state 11
    SFLOAT   shift, and go to state 12
    SSHORT   shift, and go to state 14

    SDOUBLE   [reduce using rule 51 (name_func)]
    SINT      [reduce using rule 51 (name_func)]
    SLONG     [reduce using rule 51 (name_func)]
    SFLOAT    [reduce using rule 51 (name_func)]
    SSHORT    [reduce using rule 51 (name_func)]
    $default  reduce using rule 51 (name_func)

    type  go to state 59


State 11

   14 type: SLONG â¢
   15     | SLONG â¢ SLONG

    SLONG  shift, and go to state 60

    SLONG     [reduce using rule 14 (type)]
    $default  reduce using rule 14 (type)


State 12

    8 type: SFLOAT â¢
    9     | SFLOAT â¢ SFLOAT

    SFLOAT  shift, and go to state 61

    SFLOAT    [reduce using rule 8 (type)]
    $default  reduce using rule 8 (type)


State 13

  132 for_statement: SFOR â¢ "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement

    "("  shift, and go to state 62


State 14

   12 type: SSHORT â¢
   13     | SSHORT â¢ SSHORT

    SSHORT  shift, and go to state 63

    SSHORT    [reduce using rule 12 (type)]
    $default  reduce using rule 12 (type)


State 15

  131 while_statement: SWHILE â¢ condition decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53
    "(("        shift, and go to state 54

    cmp_expr   go to state 55
    condition  go to state 64


State 16

   60 sign: "+" â¢ sign

    INTEGER  shift, and go to state 65
    FLOAT    shift, and go to state 66
    "+"      shift, and go to state 16
    "-"      shift, and go to state 18

    sign  go to state 67


State 17

   80 oper_eq: "--" â¢ var

    IDENTIFIER  shift, and go to state 68

    var  go to state 69


State 18

   61 sign: "-" â¢ sign

    INTEGER  shift, and go to state 65
    FLOAT    shift, and go to state 66
    "+"      shift, and go to state 16
    "-"      shift, and go to state 18

    sign  go to state 70


State 19

  101 cmp_expr: "!" â¢ cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 71


State 20

   79 oper_eq: "++" â¢ var

    IDENTIFIER  shift, and go to state 68

    var  go to state 72


State 21

   20 arr_elements: "[" â¢ "]"
   21             | "[" â¢ integ "]"
   22             | "[" â¢ fl "]"
   23             | "[" â¢ str "]"

    STRING   shift, and go to state 73
    INTEGER  shift, and go to state 74
    FLOAT    shift, and go to state 75
    "]"      shift, and go to state 76

    integ  go to state 77
    fl     go to state 78
    str    go to state 79


State 22

  130 block_statement: "{" â¢ decl_statements "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 80
    decl_statements  go to state 81
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 23

   31 func: SSCAN â¢ "(" scan_params ")"

    "("  shift, and go to state 82


State 24

   34 func: SPRINT â¢ "(" print_params ")"

    "("  shift, and go to state 83


State 25

   32 func: SLEN â¢ "(" len_params ")"

    "("  shift, and go to state 84


State 26

   33 func: SCMP â¢ "(" cmp_params ")"

    "("  shift, and go to state 85


State 27

  122 decl_statement: NEWLINE â¢

    $default  reduce using rule 122 (decl_statement)


State 28

  114 decl_statement: decl_var â¢ ";"

    ";"  shift, and go to state 86


State 29

    5 decl_var: type â¢ var

    IDENTIFIER  shift, and go to state 68

    var  go to state 87


State 30

   17 var: var â¢ "," var
   72 assign: var â¢ "=" val
   73       | var â¢ "=" cmp_expr
   74       | var â¢ "=" arithm_expr
   75       | var â¢ "=" merge_arr
   77 oper_eq: var â¢ "++"
   78        | var â¢ "--"
   81        | var â¢ "+=" number
   82        | var â¢ "-=" number
   83        | var â¢ "*=" number
   84        | var â¢ "/=" number

    "*="  shift, and go to state 88
    "--"  shift, and go to state 89
    "/="  shift, and go to state 90
    "="   shift, and go to state 91
    "+="  shift, and go to state 92
    "-="  shift, and go to state 93
    "++"  shift, and go to state 94
    ","   shift, and go to state 95


State 31

  104 merge_arr: arr_elements â¢

    $default  reduce using rule 104 (merge_arr)


State 32

  115 decl_statement: build_func â¢ ";"

    ";"  shift, and go to state 96


State 33

   30 build_func: func â¢

    $default  reduce using rule 30 (build_func)


State 34

  116 decl_statement: decl_func â¢

    $default  reduce using rule 116 (decl_statement)


State 35

   50 decl_func: name_func â¢ decl_statement
   53 name_func: name_func â¢ IDENTIFIER params NEWLINE

    IDENTIFIER  shift, and go to state 97
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 80
    decl_statement   go to state 98
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 36

   62 arithm_expr: sign â¢

    $default  reduce using rule 62 (arithm_expr)


State 37

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   65            | arithm_expr â¢ "-" arithm_expr
   66            | arithm_expr â¢ "*" arithm_expr
   67            | arithm_expr â¢ "/" arithm_expr
   68            | arithm_expr â¢ "%" arithm_expr
  118 decl_statement: arithm_expr â¢

    "+"  shift, and go to state 99
    "-"  shift, and go to state 100
    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    "+"       [reduce using rule 118 (decl_statement)]
    "-"       [reduce using rule 118 (decl_statement)]
    $default  reduce using rule 118 (decl_statement)


State 38

  117 decl_statement: assign â¢ ";"

    ";"  shift, and go to state 104


State 39

   76 assign: oper_eq â¢

    $default  reduce using rule 76 (assign)


State 40

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr
  119 decl_statement: cmp_expr â¢

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    "||"  shift, and go to state 109
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 119 (decl_statement)


State 41

    3 program: program merge_arr â¢ TOKEN_ERROR merge_arr NEWLINE
  105 merge_arr: merge_arr â¢ "+" merge_arr
  106          | merge_arr â¢ TOKEN_ERROR "+" merge_arr
  107          | merge_arr â¢ "+" TOKEN_ERROR merge_arr
  108          | merge_arr â¢ "++" merge_arr
  120 decl_statement: merge_arr â¢

    "+"          shift, and go to state 113
    "++"         shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 115

    "+"       [reduce using rule 120 (decl_statement)]
    "++"      [reduce using rule 120 (decl_statement)]
    $default  reduce using rule 120 (decl_statement)


State 42

    1 program: program decl_statements â¢ NEWLINE
  110 decl_statements: decl_statements â¢ decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 116

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 80
    decl_statement   go to state 117
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 43

  109 decl_statements: decl_statement â¢

    $default  reduce using rule 109 (decl_statements)


State 44

  111 decl_statement: if_statement â¢

    $default  reduce using rule 111 (decl_statement)


State 45

  121 decl_statement: block_statement â¢

    $default  reduce using rule 121 (decl_statement)


State 46

  112 decl_statement: while_statement â¢

    $default  reduce using rule 112 (decl_statement)


State 47

  113 decl_statement: for_statement â¢

    $default  reduce using rule 113 (decl_statement)


State 48

    2 program: program error NEWLINE â¢

    $default  reduce using rule 2 (program)


State 49

   35 func: IDENTIFIER "(" â¢ print_params ")"

    IDENTIFIER  shift, and go to state 118
    STRING      shift, and go to state 119
    INTEGER     shift, and go to state 120
    FLOAT       shift, and go to state 121
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 122
    func          go to state 123
    print_params  go to state 124


State 50

   92 cmp_expr: IDENTIFIER â¢

    $default  reduce using rule 92 (cmp_expr)


State 51

   90 cmp_expr: INTEGER â¢

    $default  reduce using rule 90 (cmp_expr)


State 52

   91 cmp_expr: FLOAT â¢

    $default  reduce using rule 91 (cmp_expr)


State 53

  125 condition: "(" â¢ condition ")"
  127          | "(" â¢ condition "))"
  129          | "(" â¢ condition

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53
    "(("        shift, and go to state 54

    cmp_expr   go to state 55
    condition  go to state 125


State 54

  126 condition: "((" â¢ condition ")"

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53
    "(("        shift, and go to state 54

    cmp_expr   go to state 55
    condition  go to state 126


State 55

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr
  124 condition: cmp_expr â¢

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    "||"  shift, and go to state 109
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 124 (condition)


State 56

  123 if_statement: SIF condition â¢ decl_statement
  128 condition: condition â¢ ")"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    ")"         shift, and go to state 127
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 80
    decl_statement   go to state 128
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 57

   11 type: SDOUBLE SDOUBLE â¢

    $default  reduce using rule 11 (type)


State 58

    7 type: SINT SINT â¢

    $default  reduce using rule 7 (type)


State 59

   52 name_func: SFUNC type â¢

    $default  reduce using rule 52 (name_func)


State 60

   15 type: SLONG SLONG â¢

    $default  reduce using rule 15 (type)


State 61

    9 type: SFLOAT SFLOAT â¢

    $default  reduce using rule 9 (type)


State 62

  132 for_statement: SFOR "(" â¢ assign ";" cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 68
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20

    var      go to state 30
    assign   go to state 129
    oper_eq  go to state 39


State 63

   13 type: SSHORT SSHORT â¢

    $default  reduce using rule 13 (type)


State 64

  128 condition: condition â¢ ")"
  131 while_statement: SWHILE condition â¢ decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    ")"         shift, and go to state 127
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 80
    decl_statement   go to state 130
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 65

   58 sign: INTEGER â¢

    $default  reduce using rule 58 (sign)


State 66

   59 sign: FLOAT â¢

    $default  reduce using rule 59 (sign)


State 67

   60 sign: "+" sign â¢

    $default  reduce using rule 60 (sign)


State 68

   16 var: IDENTIFIER â¢

    $default  reduce using rule 16 (var)


State 69

   17 var: var â¢ "," var
   80 oper_eq: "--" var â¢

    ","  shift, and go to state 95

    $default  reduce using rule 80 (oper_eq)


State 70

   61 sign: "-" sign â¢

    $default  reduce using rule 61 (sign)


State 71

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  101         | "!" cmp_expr â¢
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    $default  reduce using rule 101 (cmp_expr)


State 72

   17 var: var â¢ "," var
   79 oper_eq: "++" var â¢

    ","  shift, and go to state 95

    $default  reduce using rule 79 (oper_eq)


State 73

   28 str: STRING â¢

    $default  reduce using rule 28 (str)


State 74

   24 integ: INTEGER â¢

    $default  reduce using rule 24 (integ)


State 75

   26 fl: FLOAT â¢

    $default  reduce using rule 26 (fl)


State 76

   20 arr_elements: "[" "]" â¢

    $default  reduce using rule 20 (arr_elements)


State 77

   21 arr_elements: "[" integ â¢ "]"
   25 integ: integ â¢ "," integ

    "]"  shift, and go to state 131
    ","  shift, and go to state 132


State 78

   22 arr_elements: "[" fl â¢ "]"
   27 fl: fl â¢ "," fl

    "]"  shift, and go to state 133
    ","  shift, and go to state 134


State 79

   23 arr_elements: "[" str â¢ "]"
   29 str: str â¢ "," str

    "]"  shift, and go to state 135
    ","  shift, and go to state 136


State 80

  105 merge_arr: merge_arr â¢ "+" merge_arr
  106          | merge_arr â¢ TOKEN_ERROR "+" merge_arr
  107          | merge_arr â¢ "+" TOKEN_ERROR merge_arr
  108          | merge_arr â¢ "++" merge_arr
  120 decl_statement: merge_arr â¢

    "+"          shift, and go to state 113
    "++"         shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 137

    "+"       [reduce using rule 120 (decl_statement)]
    "++"      [reduce using rule 120 (decl_statement)]
    $default  reduce using rule 120 (decl_statement)


State 81

  110 decl_statements: decl_statements â¢ decl_statement
  130 block_statement: "{" decl_statements â¢ "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    "}"         shift, and go to state 138
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 80
    decl_statement   go to state 117
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 82

   31 func: SSCAN "(" â¢ scan_params ")"

    IDENTIFIER  shift, and go to state 139

    scan_params  go to state 140


State 83

   34 func: SPRINT "(" â¢ print_params ")"

    IDENTIFIER  shift, and go to state 118
    STRING      shift, and go to state 119
    INTEGER     shift, and go to state 120
    FLOAT       shift, and go to state 121
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 122
    func          go to state 123
    print_params  go to state 141


State 84

   32 func: SLEN "(" â¢ len_params ")"

    IDENTIFIER  shift, and go to state 142
    STRING      shift, and go to state 143
    "["         shift, and go to state 21

    arr_elements  go to state 144
    len_params    go to state 145


State 85

   33 func: SCMP "(" â¢ cmp_params ")"

    IDENTIFIER  shift, and go to state 146
    STRING      shift, and go to state 147

    cmp_params  go to state 148


State 86

  114 decl_statement: decl_var ";" â¢

    $default  reduce using rule 114 (decl_statement)


State 87

    5 decl_var: type var â¢
   17 var: var â¢ "," var

    ","  shift, and go to state 95

    $default  reduce using rule 5 (decl_var)


State 88

   83 oper_eq: var "*=" â¢ number

    IDENTIFIER  shift, and go to state 149
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151

    pos_elem  go to state 152
    number    go to state 153


State 89

   78 oper_eq: var "--" â¢

    $default  reduce using rule 78 (oper_eq)


State 90

   84 oper_eq: var "/=" â¢ number

    IDENTIFIER  shift, and go to state 149
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151

    pos_elem  go to state 152
    number    go to state 154


State 91

   72 assign: var "=" â¢ val
   73       | var "=" â¢ cmp_expr
   74       | var "=" â¢ arithm_expr
   75       | var "=" â¢ merge_arr

    IDENTIFIER  shift, and go to state 155
    STRING      shift, and go to state 156
    INTEGER     shift, and go to state 157
    FLOAT       shift, and go to state 158
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "["         shift, and go to state 21

    pos_elem      go to state 152
    arr_elements  go to state 159
    sign          go to state 36
    arithm_expr   go to state 160
    number        go to state 161
    val           go to state 162
    cmp_expr      go to state 163
    merge_arr     go to state 164


State 92

   81 oper_eq: var "+=" â¢ number

    IDENTIFIER  shift, and go to state 149
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151

    pos_elem  go to state 152
    number    go to state 165


State 93

   82 oper_eq: var "-=" â¢ number

    IDENTIFIER  shift, and go to state 149
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151

    pos_elem  go to state 152
    number    go to state 166


State 94

   77 oper_eq: var "++" â¢

    $default  reduce using rule 77 (oper_eq)


State 95

   17 var: var "," â¢ var

    IDENTIFIER  shift, and go to state 68

    var  go to state 167


State 96

  115 decl_statement: build_func ";" â¢

    $default  reduce using rule 115 (decl_statement)


State 97

   16 var: IDENTIFIER â¢
   35 func: IDENTIFIER â¢ "(" print_params ")"
   53 name_func: name_func IDENTIFIER â¢ params NEWLINE
   63 arithm_expr: IDENTIFIER â¢
   92 cmp_expr: IDENTIFIER â¢

    "("  shift, and go to state 168

    IDENTIFIER  reduce using rule 63 (arithm_expr)
    IDENTIFIER  [reduce using rule 92 (cmp_expr)]
    INTEGER     reduce using rule 63 (arithm_expr)
    INTEGER     [reduce using rule 92 (cmp_expr)]
    FLOAT       reduce using rule 63 (arithm_expr)
    FLOAT       [reduce using rule 92 (cmp_expr)]
    SIF         reduce using rule 63 (arithm_expr)
    SIF         [reduce using rule 92 (cmp_expr)]
    SDOUBLE     reduce using rule 63 (arithm_expr)
    SDOUBLE     [reduce using rule 92 (cmp_expr)]
    SINT        reduce using rule 63 (arithm_expr)
    SINT        [reduce using rule 92 (cmp_expr)]
    SFUNC       reduce using rule 63 (arithm_expr)
    SFUNC       [reduce using rule 92 (cmp_expr)]
    SLONG       reduce using rule 63 (arithm_expr)
    SLONG       [reduce using rule 92 (cmp_expr)]
    SFLOAT      reduce using rule 63 (arithm_expr)
    SFLOAT      [reduce using rule 92 (cmp_expr)]
    SFOR        reduce using rule 63 (arithm_expr)
    SFOR        [reduce using rule 92 (cmp_expr)]
    SSHORT      reduce using rule 63 (arithm_expr)
    SSHORT      [reduce using rule 92 (cmp_expr)]
    SWHILE      reduce using rule 63 (arithm_expr)
    SWHILE      [reduce using rule 92 (cmp_expr)]
    "+"         reduce using rule 63 (arithm_expr)
    "+"         [reduce using rule 92 (cmp_expr)]
    "*="        reduce using rule 16 (var)
    "--"        reduce using rule 16 (var)
    "--"        [reduce using rule 63 (arithm_expr)]
    "--"        [reduce using rule 92 (cmp_expr)]
    "-"         reduce using rule 63 (arithm_expr)
    "-"         [reduce using rule 92 (cmp_expr)]
    "/="        reduce using rule 16 (var)
    "<"         reduce using rule 92 (cmp_expr)
    "!"         reduce using rule 63 (arithm_expr)
    "!"         [reduce using rule 92 (cmp_expr)]
    ">"         reduce using rule 92 (cmp_expr)
    "&&"        reduce using rule 92 (cmp_expr)
    "<="        reduce using rule 92 (cmp_expr)
    "||"        reduce using rule 92 (cmp_expr)
    ">="        reduce using rule 92 (cmp_expr)
    "="         reduce using rule 16 (var)
    "=="        reduce using rule 92 (cmp_expr)
    "+="        reduce using rule 16 (var)
    "!="        reduce using rule 92 (cmp_expr)
    "-="        reduce using rule 16 (var)
    "++"        reduce using rule 16 (var)
    "++"        [reduce using rule 63 (arithm_expr)]
    "++"        [reduce using rule 92 (cmp_expr)]
    "["         reduce using rule 63 (arithm_expr)
    "["         [reduce using rule 92 (cmp_expr)]
    "{"         reduce using rule 63 (arithm_expr)
    "{"         [reduce using rule 92 (cmp_expr)]
    "}"         reduce using rule 63 (arithm_expr)
    "}"         [reduce using rule 92 (cmp_expr)]
    ","         reduce using rule 16 (var)
    SSCAN       reduce using rule 63 (arithm_expr)
    SSCAN       [reduce using rule 92 (cmp_expr)]
    SPRINT      reduce using rule 63 (arithm_expr)
    SPRINT      [reduce using rule 92 (cmp_expr)]
    SLEN        reduce using rule 63 (arithm_expr)
    SLEN        [reduce using rule 92 (cmp_expr)]
    SCMP        reduce using rule 63 (arithm_expr)
    SCMP        [reduce using rule 92 (cmp_expr)]
    NEWLINE     reduce using rule 63 (arithm_expr)
    NEWLINE     [reduce using rule 92 (cmp_expr)]
    $default    reduce using rule 63 (arithm_expr)

    params  go to state 169


State 98

   50 decl_func: name_func decl_statement â¢

    $default  reduce using rule 50 (decl_func)


State 99

   64 arithm_expr: arithm_expr "+" â¢ arithm_expr

    IDENTIFIER  shift, and go to state 170
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 171


State 100

   65 arithm_expr: arithm_expr "-" â¢ arithm_expr

    IDENTIFIER  shift, and go to state 170
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 172


State 101

   66 arithm_expr: arithm_expr "*" â¢ arithm_expr

    IDENTIFIER  shift, and go to state 170
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 173


State 102

   67 arithm_expr: arithm_expr "/" â¢ arithm_expr

    IDENTIFIER  shift, and go to state 170
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 174


State 103

   68 arithm_expr: arithm_expr "%" â¢ arithm_expr

    IDENTIFIER  shift, and go to state 170
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 175


State 104

  117 decl_statement: assign ";" â¢

    $default  reduce using rule 117 (decl_statement)


State 105

   94 cmp_expr: cmp_expr "<" â¢ cmp_expr
  103         | cmp_expr "<" â¢ "<" arithm_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "<"         shift, and go to state 176
    "!"         shift, and go to state 19

    cmp_expr  go to state 177


State 106

   93 cmp_expr: cmp_expr ">" â¢ cmp_expr
  102         | cmp_expr ">" â¢ ">" arithm_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    ">"         shift, and go to state 178

    cmp_expr  go to state 179


State 107

  100 cmp_expr: cmp_expr "&&" â¢ cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 180


State 108

   95 cmp_expr: cmp_expr "<=" â¢ cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 181


State 109

   99 cmp_expr: cmp_expr "||" â¢ cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 182


State 110

   96 cmp_expr: cmp_expr ">=" â¢ cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 183


State 111

   97 cmp_expr: cmp_expr "==" â¢ cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 184


State 112

   98 cmp_expr: cmp_expr "!=" â¢ cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 185


State 113

  105 merge_arr: merge_arr "+" â¢ merge_arr
  107          | merge_arr "+" â¢ TOKEN_ERROR merge_arr

    "["          shift, and go to state 21
    TOKEN_ERROR  shift, and go to state 186

    arr_elements  go to state 31
    merge_arr     go to state 187


State 114

  108 merge_arr: merge_arr "++" â¢ merge_arr

    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 188


State 115

    3 program: program merge_arr TOKEN_ERROR â¢ merge_arr NEWLINE
  106 merge_arr: merge_arr TOKEN_ERROR â¢ "+" merge_arr

    "+"  shift, and go to state 189
    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 190


State 116

    1 program: program decl_statements NEWLINE â¢
  122 decl_statement: NEWLINE â¢

    IDENTIFIER  reduce using rule 1 (program)
    IDENTIFIER  [reduce using rule 122 (decl_statement)]
    INTEGER     reduce using rule 1 (program)
    INTEGER     [reduce using rule 122 (decl_statement)]
    FLOAT       reduce using rule 1 (program)
    FLOAT       [reduce using rule 122 (decl_statement)]
    SIF         reduce using rule 1 (program)
    SIF         [reduce using rule 122 (decl_statement)]
    SDOUBLE     reduce using rule 1 (program)
    SDOUBLE     [reduce using rule 122 (decl_statement)]
    SINT        reduce using rule 1 (program)
    SINT        [reduce using rule 122 (decl_statement)]
    SFUNC       reduce using rule 1 (program)
    SFUNC       [reduce using rule 122 (decl_statement)]
    SLONG       reduce using rule 1 (program)
    SLONG       [reduce using rule 122 (decl_statement)]
    SFLOAT      reduce using rule 1 (program)
    SFLOAT      [reduce using rule 122 (decl_statement)]
    SFOR        reduce using rule 1 (program)
    SFOR        [reduce using rule 122 (decl_statement)]
    SSHORT      reduce using rule 1 (program)
    SSHORT      [reduce using rule 122 (decl_statement)]
    SWHILE      reduce using rule 1 (program)
    SWHILE      [reduce using rule 122 (decl_statement)]
    "+"         reduce using rule 1 (program)
    "+"         [reduce using rule 122 (decl_statement)]
    "--"        reduce using rule 1 (program)
    "--"        [reduce using rule 122 (decl_statement)]
    "-"         reduce using rule 1 (program)
    "-"         [reduce using rule 122 (decl_statement)]
    "!"         reduce using rule 1 (program)
    "!"         [reduce using rule 122 (decl_statement)]
    "++"        reduce using rule 1 (program)
    "++"        [reduce using rule 122 (decl_statement)]
    "["         reduce using rule 1 (program)
    "["         [reduce using rule 122 (decl_statement)]
    "{"         reduce using rule 1 (program)
    "{"         [reduce using rule 122 (decl_statement)]
    SSCAN       reduce using rule 1 (program)
    SSCAN       [reduce using rule 122 (decl_statement)]
    SPRINT      reduce using rule 1 (program)
    SPRINT      [reduce using rule 122 (decl_statement)]
    SLEN        reduce using rule 1 (program)
    SLEN        [reduce using rule 122 (decl_statement)]
    SCMP        reduce using rule 1 (program)
    SCMP        [reduce using rule 122 (decl_statement)]
    NEWLINE     reduce using rule 1 (program)
    NEWLINE     [reduce using rule 122 (decl_statement)]
    $default    reduce using rule 1 (program)


State 117

  110 decl_statements: decl_statements decl_statement â¢

    $default  reduce using rule 110 (decl_statements)


State 118

   18 pos_elem: IDENTIFIER â¢ "[" INTEGER "]"
   19         | IDENTIFIER â¢ "[" IDENTIFIER "]"
   35 func: IDENTIFIER â¢ "(" print_params ")"
   44 print_params: IDENTIFIER â¢

    "("  shift, and go to state 49
    "["  shift, and go to state 191

    $default  reduce using rule 44 (print_params)


State 119

   43 print_params: STRING â¢

    $default  reduce using rule 43 (print_params)


State 120

   45 print_params: INTEGER â¢

    $default  reduce using rule 45 (print_params)


State 121

   46 print_params: FLOAT â¢

    $default  reduce using rule 46 (print_params)


State 122

   48 print_params: pos_elem â¢

    $default  reduce using rule 48 (print_params)


State 123

   47 print_params: func â¢

    $default  reduce using rule 47 (print_params)


State 124

   35 func: IDENTIFIER "(" print_params â¢ ")"
   49 print_params: print_params â¢ "," print_params

    ")"  shift, and go to state 192
    ","  shift, and go to state 193


State 125

  125 condition: "(" condition â¢ ")"
  127          | "(" condition â¢ "))"
  128          | condition â¢ ")"
  129          | "(" condition â¢

    ")"   shift, and go to state 194
    "))"  shift, and go to state 195

    ")"       [reduce using rule 129 (condition)]
    "))"      [reduce using rule 129 (condition)]
    $default  reduce using rule 129 (condition)


State 126

  126 condition: "((" condition â¢ ")"
  128          | condition â¢ ")"

    ")"  shift, and go to state 196


State 127

  128 condition: condition ")" â¢

    $default  reduce using rule 128 (condition)


State 128

  123 if_statement: SIF condition decl_statement â¢

    $default  reduce using rule 123 (if_statement)


State 129

  132 for_statement: SFOR "(" assign â¢ ";" cmp_expr ";" oper_eq ")" decl_statement

    ";"  shift, and go to state 197


State 130

  131 while_statement: SWHILE condition decl_statement â¢

    $default  reduce using rule 131 (while_statement)


State 131

   21 arr_elements: "[" integ "]" â¢

    $default  reduce using rule 21 (arr_elements)


State 132

   25 integ: integ "," â¢ integ

    INTEGER  shift, and go to state 74

    integ  go to state 198


State 133

   22 arr_elements: "[" fl "]" â¢

    $default  reduce using rule 22 (arr_elements)


State 134

   27 fl: fl "," â¢ fl

    FLOAT  shift, and go to state 75

    fl  go to state 199


State 135

   23 arr_elements: "[" str "]" â¢

    $default  reduce using rule 23 (arr_elements)


State 136

   29 str: str "," â¢ str

    STRING  shift, and go to state 73

    str  go to state 200


State 137

  106 merge_arr: merge_arr TOKEN_ERROR â¢ "+" merge_arr

    "+"  shift, and go to state 189


State 138

  130 block_statement: "{" decl_statements "}" â¢

    $default  reduce using rule 130 (block_statement)


State 139

   36 scan_params: IDENTIFIER â¢

    $default  reduce using rule 36 (scan_params)


State 140

   31 func: SSCAN "(" scan_params â¢ ")"

    ")"  shift, and go to state 201


State 141

   34 func: SPRINT "(" print_params â¢ ")"
   49 print_params: print_params â¢ "," print_params

    ")"  shift, and go to state 202
    ","  shift, and go to state 193


State 142

   39 len_params: IDENTIFIER â¢

    $default  reduce using rule 39 (len_params)


State 143

   38 len_params: STRING â¢

    $default  reduce using rule 38 (len_params)


State 144

   37 len_params: arr_elements â¢

    $default  reduce using rule 37 (len_params)


State 145

   32 func: SLEN "(" len_params â¢ ")"

    ")"  shift, and go to state 203


State 146

   41 cmp_params: IDENTIFIER â¢

    $default  reduce using rule 41 (cmp_params)


State 147

   40 cmp_params: STRING â¢

    $default  reduce using rule 40 (cmp_params)


State 148

   33 func: SCMP "(" cmp_params â¢ ")"
   42 cmp_params: cmp_params â¢ "," cmp_params

    ")"  shift, and go to state 204
    ","  shift, and go to state 205


State 149

   18 pos_elem: IDENTIFIER â¢ "[" INTEGER "]"
   19         | IDENTIFIER â¢ "[" IDENTIFIER "]"

    "["  shift, and go to state 191


State 150

   69 number: INTEGER â¢

    $default  reduce using rule 69 (number)


State 151

   70 number: FLOAT â¢

    $default  reduce using rule 70 (number)


State 152

   71 number: pos_elem â¢

    $default  reduce using rule 71 (number)


State 153

   83 oper_eq: var "*=" number â¢

    $default  reduce using rule 83 (oper_eq)


State 154

   84 oper_eq: var "/=" number â¢

    $default  reduce using rule 84 (oper_eq)


State 155

   18 pos_elem: IDENTIFIER â¢ "[" INTEGER "]"
   19         | IDENTIFIER â¢ "[" IDENTIFIER "]"
   63 arithm_expr: IDENTIFIER â¢
   86 val: IDENTIFIER â¢
   92 cmp_expr: IDENTIFIER â¢

    "["  shift, and go to state 191

    "+"       reduce using rule 63 (arithm_expr)
    "-"       reduce using rule 63 (arithm_expr)
    "*"       reduce using rule 63 (arithm_expr)
    "/"       reduce using rule 63 (arithm_expr)
    "%"       reduce using rule 63 (arithm_expr)
    ","       reduce using rule 86 (val)
    ";"       reduce using rule 63 (arithm_expr)
    ";"       [reduce using rule 86 (val)]
    ";"       [reduce using rule 92 (cmp_expr)]
    $default  reduce using rule 92 (cmp_expr)


State 156

   87 val: STRING â¢

    $default  reduce using rule 87 (val)


State 157

   58 sign: INTEGER â¢
   69 number: INTEGER â¢
   90 cmp_expr: INTEGER â¢

    "+"       reduce using rule 58 (sign)
    "-"       reduce using rule 58 (sign)
    "*"       reduce using rule 58 (sign)
    "/"       reduce using rule 58 (sign)
    "%"       reduce using rule 58 (sign)
    ","       reduce using rule 69 (number)
    ";"       reduce using rule 58 (sign)
    ";"       [reduce using rule 69 (number)]
    ";"       [reduce using rule 90 (cmp_expr)]
    $default  reduce using rule 90 (cmp_expr)


State 158

   59 sign: FLOAT â¢
   70 number: FLOAT â¢
   91 cmp_expr: FLOAT â¢

    "+"       reduce using rule 59 (sign)
    "-"       reduce using rule 59 (sign)
    "*"       reduce using rule 59 (sign)
    "/"       reduce using rule 59 (sign)
    "%"       reduce using rule 59 (sign)
    ","       reduce using rule 70 (number)
    ";"       reduce using rule 59 (sign)
    ";"       [reduce using rule 70 (number)]
    ";"       [reduce using rule 91 (cmp_expr)]
    $default  reduce using rule 91 (cmp_expr)


State 159

   88 val: arr_elements â¢
  104 merge_arr: arr_elements â¢

    ","       reduce using rule 88 (val)
    ";"       reduce using rule 88 (val)
    ";"       [reduce using rule 104 (merge_arr)]
    $default  reduce using rule 104 (merge_arr)


State 160

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   65            | arithm_expr â¢ "-" arithm_expr
   66            | arithm_expr â¢ "*" arithm_expr
   67            | arithm_expr â¢ "/" arithm_expr
   68            | arithm_expr â¢ "%" arithm_expr
   74 assign: var "=" arithm_expr â¢

    "+"  shift, and go to state 99
    "-"  shift, and go to state 100
    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 74 (assign)


State 161

   85 val: number â¢

    $default  reduce using rule 85 (val)


State 162

   72 assign: var "=" val â¢
   89 val: val â¢ "," val

    ","  shift, and go to state 206

    $default  reduce using rule 72 (assign)


State 163

   73 assign: var "=" cmp_expr â¢
   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    "||"  shift, and go to state 109
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 73 (assign)


State 164

   75 assign: var "=" merge_arr â¢
  105 merge_arr: merge_arr â¢ "+" merge_arr
  106          | merge_arr â¢ TOKEN_ERROR "+" merge_arr
  107          | merge_arr â¢ "+" TOKEN_ERROR merge_arr
  108          | merge_arr â¢ "++" merge_arr

    "+"          shift, and go to state 113
    "++"         shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 137

    $default  reduce using rule 75 (assign)


State 165

   81 oper_eq: var "+=" number â¢

    $default  reduce using rule 81 (oper_eq)


State 166

   82 oper_eq: var "-=" number â¢

    $default  reduce using rule 82 (oper_eq)


State 167

   17 var: var â¢ "," var
   17    | var "," var â¢

    $default  reduce using rule 17 (var)


State 168

   35 func: IDENTIFIER "(" â¢ print_params ")"
   54 params: "(" â¢ ")"
   55       | "(" â¢ type_params ")"

    IDENTIFIER  shift, and go to state 118
    STRING      shift, and go to state 119
    INTEGER     shift, and go to state 120
    FLOAT       shift, and go to state 121
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SSHORT      shift, and go to state 14
    ")"         shift, and go to state 207
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    type          go to state 208
    pos_elem      go to state 122
    func          go to state 123
    print_params  go to state 124
    type_params   go to state 209


State 169

   53 name_func: name_func IDENTIFIER params â¢ NEWLINE

    NEWLINE  shift, and go to state 210


State 170

   63 arithm_expr: IDENTIFIER â¢

    $default  reduce using rule 63 (arithm_expr)


State 171

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   64            | arithm_expr "+" arithm_expr â¢
   65            | arithm_expr â¢ "-" arithm_expr
   66            | arithm_expr â¢ "*" arithm_expr
   67            | arithm_expr â¢ "/" arithm_expr
   68            | arithm_expr â¢ "%" arithm_expr

    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 64 (arithm_expr)


State 172

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   65            | arithm_expr â¢ "-" arithm_expr
   65            | arithm_expr "-" arithm_expr â¢
   66            | arithm_expr â¢ "*" arithm_expr
   67            | arithm_expr â¢ "/" arithm_expr
   68            | arithm_expr â¢ "%" arithm_expr

    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 65 (arithm_expr)


State 173

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   65            | arithm_expr â¢ "-" arithm_expr
   66            | arithm_expr â¢ "*" arithm_expr
   66            | arithm_expr "*" arithm_expr â¢
   67            | arithm_expr â¢ "/" arithm_expr
   68            | arithm_expr â¢ "%" arithm_expr

    $default  reduce using rule 66 (arithm_expr)


State 174

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   65            | arithm_expr â¢ "-" arithm_expr
   66            | arithm_expr â¢ "*" arithm_expr
   67            | arithm_expr â¢ "/" arithm_expr
   67            | arithm_expr "/" arithm_expr â¢
   68            | arithm_expr â¢ "%" arithm_expr

    $default  reduce using rule 67 (arithm_expr)


State 175

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   65            | arithm_expr â¢ "-" arithm_expr
   66            | arithm_expr â¢ "*" arithm_expr
   67            | arithm_expr â¢ "/" arithm_expr
   68            | arithm_expr â¢ "%" arithm_expr
   68            | arithm_expr "%" arithm_expr â¢

    $default  reduce using rule 68 (arithm_expr)


State 176

  103 cmp_expr: cmp_expr "<" "<" â¢ arithm_expr

    IDENTIFIER  shift, and go to state 170
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 211


State 177

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   94         | cmp_expr "<" cmp_expr â¢
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    $default  reduce using rule 94 (cmp_expr)


State 178

  102 cmp_expr: cmp_expr ">" ">" â¢ arithm_expr

    IDENTIFIER  shift, and go to state 170
    INTEGER     shift, and go to state 65
    FLOAT       shift, and go to state 66
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 212


State 179

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   93         | cmp_expr ">" cmp_expr â¢
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    $default  reduce using rule 93 (cmp_expr)


State 180

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  100         | cmp_expr "&&" cmp_expr â¢
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "<="  shift, and go to state 108
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 100 (cmp_expr)


State 181

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   95         | cmp_expr "<=" cmp_expr â¢
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    $default  reduce using rule 95 (cmp_expr)


State 182

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
   99         | cmp_expr "||" cmp_expr â¢
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112

    $default  reduce using rule 99 (cmp_expr)


State 183

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   96         | cmp_expr ">=" cmp_expr â¢
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    $default  reduce using rule 96 (cmp_expr)


State 184

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   97         | cmp_expr "==" cmp_expr â¢
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "<="  shift, and go to state 108
    ">="  shift, and go to state 110

    $default  reduce using rule 97 (cmp_expr)


State 185

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   98         | cmp_expr "!=" cmp_expr â¢
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "<="  shift, and go to state 108
    ">="  shift, and go to state 110

    $default  reduce using rule 98 (cmp_expr)


State 186

  107 merge_arr: merge_arr "+" TOKEN_ERROR â¢ merge_arr

    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 213


State 187

  105 merge_arr: merge_arr â¢ "+" merge_arr
  105          | merge_arr "+" merge_arr â¢
  106          | merge_arr â¢ TOKEN_ERROR "+" merge_arr
  107          | merge_arr â¢ "+" TOKEN_ERROR merge_arr
  108          | merge_arr â¢ "++" merge_arr

    "++"         shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 137

    TOKEN_ERROR  [reduce using rule 105 (merge_arr)]
    $default     reduce using rule 105 (merge_arr)


State 188

  105 merge_arr: merge_arr â¢ "+" merge_arr
  106          | merge_arr â¢ TOKEN_ERROR "+" merge_arr
  107          | merge_arr â¢ "+" TOKEN_ERROR merge_arr
  108          | merge_arr â¢ "++" merge_arr
  108          | merge_arr "++" merge_arr â¢

    TOKEN_ERROR  shift, and go to state 137

    TOKEN_ERROR  [reduce using rule 108 (merge_arr)]
    $default     reduce using rule 108 (merge_arr)


State 189

  106 merge_arr: merge_arr TOKEN_ERROR "+" â¢ merge_arr

    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 214


State 190

    3 program: program merge_arr TOKEN_ERROR merge_arr â¢ NEWLINE
  105 merge_arr: merge_arr â¢ "+" merge_arr
  106          | merge_arr â¢ TOKEN_ERROR "+" merge_arr
  107          | merge_arr â¢ "+" TOKEN_ERROR merge_arr
  108          | merge_arr â¢ "++" merge_arr

    "+"          shift, and go to state 113
    "++"         shift, and go to state 114
    NEWLINE      shift, and go to state 215
    TOKEN_ERROR  shift, and go to state 137


State 191

   18 pos_elem: IDENTIFIER "[" â¢ INTEGER "]"
   19         | IDENTIFIER "[" â¢ IDENTIFIER "]"

    IDENTIFIER  shift, and go to state 216
    INTEGER     shift, and go to state 217


State 192

   35 func: IDENTIFIER "(" print_params ")" â¢

    $default  reduce using rule 35 (func)


State 193

   49 print_params: print_params "," â¢ print_params

    IDENTIFIER  shift, and go to state 118
    STRING      shift, and go to state 119
    INTEGER     shift, and go to state 120
    FLOAT       shift, and go to state 121
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 122
    func          go to state 123
    print_params  go to state 218


State 194

  125 condition: "(" condition ")" â¢
  128          | condition ")" â¢

    IDENTIFIER  reduce using rule 125 (condition)
    IDENTIFIER  [reduce using rule 128 (condition)]
    INTEGER     reduce using rule 125 (condition)
    INTEGER     [reduce using rule 128 (condition)]
    FLOAT       reduce using rule 125 (condition)
    FLOAT       [reduce using rule 128 (condition)]
    SIF         reduce using rule 125 (condition)
    SIF         [reduce using rule 128 (condition)]
    SDOUBLE     reduce using rule 125 (condition)
    SDOUBLE     [reduce using rule 128 (condition)]
    SINT        reduce using rule 125 (condition)
    SINT        [reduce using rule 128 (condition)]
    SFUNC       reduce using rule 125 (condition)
    SFUNC       [reduce using rule 128 (condition)]
    SLONG       reduce using rule 125 (condition)
    SLONG       [reduce using rule 128 (condition)]
    SFLOAT      reduce using rule 125 (condition)
    SFLOAT      [reduce using rule 128 (condition)]
    SFOR        reduce using rule 125 (condition)
    SFOR        [reduce using rule 128 (condition)]
    SSHORT      reduce using rule 125 (condition)
    SSHORT      [reduce using rule 128 (condition)]
    SWHILE      reduce using rule 125 (condition)
    SWHILE      [reduce using rule 128 (condition)]
    "+"         reduce using rule 125 (condition)
    "+"         [reduce using rule 128 (condition)]
    "--"        reduce using rule 125 (condition)
    "--"        [reduce using rule 128 (condition)]
    "-"         reduce using rule 125 (condition)
    "-"         [reduce using rule 128 (condition)]
    "!"         reduce using rule 125 (condition)
    "!"         [reduce using rule 128 (condition)]
    "++"        reduce using rule 125 (condition)
    "++"        [reduce using rule 128 (condition)]
    ")"         reduce using rule 125 (condition)
    ")"         [reduce using rule 128 (condition)]
    "["         reduce using rule 125 (condition)
    "["         [reduce using rule 128 (condition)]
    "{"         reduce using rule 125 (condition)
    "{"         [reduce using rule 128 (condition)]
    SSCAN       reduce using rule 125 (condition)
    SSCAN       [reduce using rule 128 (condition)]
    SPRINT      reduce using rule 125 (condition)
    SPRINT      [reduce using rule 128 (condition)]
    SLEN        reduce using rule 125 (condition)
    SLEN        [reduce using rule 128 (condition)]
    SCMP        reduce using rule 125 (condition)
    SCMP        [reduce using rule 128 (condition)]
    NEWLINE     reduce using rule 125 (condition)
    NEWLINE     [reduce using rule 128 (condition)]
    "))"        reduce using rule 125 (condition)
    "))"        [reduce using rule 128 (condition)]
    $default    reduce using rule 125 (condition)


State 195

  127 condition: "(" condition "))" â¢

    $default  reduce using rule 127 (condition)


State 196

  126 condition: "((" condition ")" â¢
  128          | condition ")" â¢

    ")"       reduce using rule 126 (condition)
    ")"       [reduce using rule 128 (condition)]
    $default  reduce using rule 126 (condition)


State 197

  132 for_statement: SFOR "(" assign ";" â¢ cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 219


State 198

   25 integ: integ â¢ "," integ
   25      | integ "," integ â¢

    $default  reduce using rule 25 (integ)


State 199

   27 fl: fl â¢ "," fl
   27   | fl "," fl â¢

    $default  reduce using rule 27 (fl)


State 200

   29 str: str â¢ "," str
   29    | str "," str â¢

    $default  reduce using rule 29 (str)


State 201

   31 func: SSCAN "(" scan_params ")" â¢

    $default  reduce using rule 31 (func)


State 202

   34 func: SPRINT "(" print_params ")" â¢

    $default  reduce using rule 34 (func)


State 203

   32 func: SLEN "(" len_params ")" â¢

    $default  reduce using rule 32 (func)


State 204

   33 func: SCMP "(" cmp_params ")" â¢

    $default  reduce using rule 33 (func)


State 205

   42 cmp_params: cmp_params "," â¢ cmp_params

    IDENTIFIER  shift, and go to state 146
    STRING      shift, and go to state 147

    cmp_params  go to state 220


State 206

   89 val: val "," â¢ val

    IDENTIFIER  shift, and go to state 221
    STRING      shift, and go to state 156
    INTEGER     shift, and go to state 150
    FLOAT       shift, and go to state 151
    "["         shift, and go to state 21

    pos_elem      go to state 152
    arr_elements  go to state 222
    number        go to state 161
    val           go to state 223


State 207

   54 params: "(" ")" â¢

    $default  reduce using rule 54 (params)


State 208

   56 type_params: type â¢ IDENTIFIER

    IDENTIFIER  shift, and go to state 224


State 209

   55 params: "(" type_params â¢ ")"
   57 type_params: type_params â¢ "," type_params

    ")"  shift, and go to state 225
    ","  shift, and go to state 226


State 210

   53 name_func: name_func IDENTIFIER params NEWLINE â¢

    $default  reduce using rule 53 (name_func)


State 211

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   65            | arithm_expr â¢ "-" arithm_expr
   66            | arithm_expr â¢ "*" arithm_expr
   67            | arithm_expr â¢ "/" arithm_expr
   68            | arithm_expr â¢ "%" arithm_expr
  103 cmp_expr: cmp_expr "<" "<" arithm_expr â¢

    "+"  shift, and go to state 99
    "-"  shift, and go to state 100
    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 103 (cmp_expr)


State 212

   64 arithm_expr: arithm_expr â¢ "+" arithm_expr
   65            | arithm_expr â¢ "-" arithm_expr
   66            | arithm_expr â¢ "*" arithm_expr
   67            | arithm_expr â¢ "/" arithm_expr
   68            | arithm_expr â¢ "%" arithm_expr
  102 cmp_expr: cmp_expr ">" ">" arithm_expr â¢

    "+"  shift, and go to state 99
    "-"  shift, and go to state 100
    "*"  shift, and go to state 101
    "/"  shift, and go to state 102
    "%"  shift, and go to state 103

    $default  reduce using rule 102 (cmp_expr)


State 213

  105 merge_arr: merge_arr â¢ "+" merge_arr
  106          | merge_arr â¢ TOKEN_ERROR "+" merge_arr
  107          | merge_arr â¢ "+" TOKEN_ERROR merge_arr
  107          | merge_arr "+" TOKEN_ERROR merge_arr â¢
  108          | merge_arr â¢ "++" merge_arr

    "+"          shift, and go to state 113
    "++"         shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 137

    "+"          [reduce using rule 107 (merge_arr)]
    "++"         [reduce using rule 107 (merge_arr)]
    TOKEN_ERROR  [reduce using rule 107 (merge_arr)]
    $default     reduce using rule 107 (merge_arr)


State 214

  105 merge_arr: merge_arr â¢ "+" merge_arr
  106          | merge_arr â¢ TOKEN_ERROR "+" merge_arr
  106          | merge_arr TOKEN_ERROR "+" merge_arr â¢
  107          | merge_arr â¢ "+" TOKEN_ERROR merge_arr
  108          | merge_arr â¢ "++" merge_arr

    "++"         shift, and go to state 114
    TOKEN_ERROR  shift, and go to state 137

    TOKEN_ERROR  [reduce using rule 106 (merge_arr)]
    $default     reduce using rule 106 (merge_arr)


State 215

    3 program: program merge_arr TOKEN_ERROR merge_arr NEWLINE â¢

    $default  reduce using rule 3 (program)


State 216

   19 pos_elem: IDENTIFIER "[" IDENTIFIER â¢ "]"

    "]"  shift, and go to state 227


State 217

   18 pos_elem: IDENTIFIER "[" INTEGER â¢ "]"

    "]"  shift, and go to state 228


State 218

   49 print_params: print_params â¢ "," print_params
   49             | print_params "," print_params â¢

    $default  reduce using rule 49 (print_params)


State 219

   93 cmp_expr: cmp_expr â¢ ">" cmp_expr
   94         | cmp_expr â¢ "<" cmp_expr
   95         | cmp_expr â¢ "<=" cmp_expr
   96         | cmp_expr â¢ ">=" cmp_expr
   97         | cmp_expr â¢ "==" cmp_expr
   98         | cmp_expr â¢ "!=" cmp_expr
   99         | cmp_expr â¢ "||" cmp_expr
  100         | cmp_expr â¢ "&&" cmp_expr
  102         | cmp_expr â¢ ">" ">" arithm_expr
  103         | cmp_expr â¢ "<" "<" arithm_expr
  132 for_statement: SFOR "(" assign ";" cmp_expr â¢ ";" oper_eq ")" decl_statement

    "<"   shift, and go to state 105
    ">"   shift, and go to state 106
    "&&"  shift, and go to state 107
    "<="  shift, and go to state 108
    "||"  shift, and go to state 109
    ">="  shift, and go to state 110
    "=="  shift, and go to state 111
    "!="  shift, and go to state 112
    ";"   shift, and go to state 229


State 220

   42 cmp_params: cmp_params â¢ "," cmp_params
   42           | cmp_params "," cmp_params â¢

    $default  reduce using rule 42 (cmp_params)


State 221

   18 pos_elem: IDENTIFIER â¢ "[" INTEGER "]"
   19         | IDENTIFIER â¢ "[" IDENTIFIER "]"
   86 val: IDENTIFIER â¢

    "["  shift, and go to state 191

    $default  reduce using rule 86 (val)


State 222

   88 val: arr_elements â¢

    $default  reduce using rule 88 (val)


State 223

   89 val: val â¢ "," val
   89    | val "," val â¢

    $default  reduce using rule 89 (val)


State 224

   56 type_params: type IDENTIFIER â¢

    $default  reduce using rule 56 (type_params)


State 225

   55 params: "(" type_params ")" â¢

    $default  reduce using rule 55 (params)


State 226

   57 type_params: type_params "," â¢ type_params

    SDOUBLE  shift, and go to state 8
    SINT     shift, and go to state 9
    SLONG    shift, and go to state 11
    SFLOAT   shift, and go to state 12
    SSHORT   shift, and go to state 14

    type         go to state 208
    type_params  go to state 230


State 227

   19 pos_elem: IDENTIFIER "[" IDENTIFIER "]" â¢

    $default  reduce using rule 19 (pos_elem)


State 228

   18 pos_elem: IDENTIFIER "[" INTEGER "]" â¢

    $default  reduce using rule 18 (pos_elem)


State 229

  132 for_statement: SFOR "(" assign ";" cmp_expr ";" â¢ oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 68
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20

    var      go to state 231
    oper_eq  go to state 232


State 230

   57 type_params: type_params â¢ "," type_params
   57            | type_params "," type_params â¢

    $default  reduce using rule 57 (type_params)


State 231

   17 var: var â¢ "," var
   77 oper_eq: var â¢ "++"
   78        | var â¢ "--"
   81        | var â¢ "+=" number
   82        | var â¢ "-=" number
   83        | var â¢ "*=" number
   84        | var â¢ "/=" number

    "*="  shift, and go to state 88
    "--"  shift, and go to state 89
    "/="  shift, and go to state 90
    "+="  shift, and go to state 92
    "-="  shift, and go to state 93
    "++"  shift, and go to state 94
    ","   shift, and go to state 95


State 232

  132 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq â¢ ")" decl_statement

    ")"  shift, and go to state 233


State 233

  132 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" â¢ decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 80
    decl_statement   go to state 234
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 234

  132 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement â¢

    $default  reduce using rule 132 (for_statement)
