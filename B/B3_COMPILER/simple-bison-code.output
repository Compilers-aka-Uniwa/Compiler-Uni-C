Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "&"
    "\\"
    UNKNOWN
    TOKEN_ERROR


State 3 conflicts: 27 reduce/reduce
State 4 conflicts: 25 reduce/reduce
State 5 conflicts: 25 reduce/reduce
State 37 conflicts: 2 shift/reduce
State 90 conflicts: 27 reduce/reduce
State 106 conflicts: 24 reduce/reduce
State 142 conflicts: 2 reduce/reduce
State 144 conflicts: 2 reduce/reduce
State 145 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_statements NEWLINE
    2        | program ARRAY_SIZE_ERROR NEWLINE
    3        | ε

    4 decl_var: type var

    5 type: SINT
    6     | SFLOAT
    7     | SDOUBLE
    8     | SSHORT
    9     | SLONG

   10 var: IDENTIFIER
   11    | var "," var

   12 pos_elem: IDENTIFIER "[" INTEGER "]"
   13         | IDENTIFIER "[" IDENTIFIER "]"

   14 arr_elements: "[" "]"
   15             | "[" integ "]"
   16             | "[" fl "]"
   17             | "[" str "]"

   18 integ: INTEGER
   19      | integ "," integ

   20 fl: FLOAT
   21   | fl "," fl

   22 str: STRING
   23    | str "," str

   24 build_func: func

   25 func: SSCAN "(" scan_params ")"
   26     | SLEN "(" len_params ")"
   27     | SCMP "(" cmp_params ")"
   28     | SPRINT "(" print_params ")"
   29     | IDENTIFIER "(" print_params ")"

   30 scan_params: IDENTIFIER

   31 len_params: arr_elements
   32           | STRING
   33           | IDENTIFIER

   34 cmp_params: STRING
   35           | IDENTIFIER
   36           | cmp_params "," cmp_params

   37 print_params: STRING
   38             | IDENTIFIER
   39             | INTEGER
   40             | FLOAT
   41             | func
   42             | pos_elem
   43             | print_params "," print_params

   44 decl_func: name_func decl_statement

   45 name_func: SFUNC
   46          | name_func IDENTIFIER params NEWLINE

   47 params: "(" ")"
   48       | "(" type_params ")"

   49 type_params: type IDENTIFIER
   50            | type_params "," type_params

   51 sign: INTEGER
   52     | FLOAT
   53     | "+" sign
   54     | "-" sign

   55 arithm_expr: sign
   56            | IDENTIFIER
   57            | arithm_expr "+" arithm_expr
   58            | arithm_expr "-" arithm_expr
   59            | arithm_expr "*" arithm_expr
   60            | arithm_expr "/" arithm_expr
   61            | arithm_expr "%" arithm_expr

   62 number: INTEGER
   63       | FLOAT
   64       | pos_elem

   65 assign: var "=" val
   66       | var "=" cmp_expr
   67       | var "=" arithm_expr
   68       | var "=" merge_arr
   69       | oper_eq

   70 oper_eq: var "++"
   71        | var "--"
   72        | "++" var
   73        | "--" var
   74        | var "+=" number
   75        | var "-=" number
   76        | var "*=" number
   77        | var "/=" number

   78 val: number
   79    | IDENTIFIER
   80    | STRING
   81    | arr_elements
   82    | val "," val

   83 cmp_expr: INTEGER
   84         | FLOAT
   85         | IDENTIFIER
   86         | cmp_expr ">" cmp_expr
   87         | cmp_expr "<" cmp_expr
   88         | cmp_expr "<=" cmp_expr
   89         | cmp_expr ">=" cmp_expr
   90         | cmp_expr "==" cmp_expr
   91         | cmp_expr "!=" cmp_expr
   92         | cmp_expr "||" cmp_expr
   93         | cmp_expr "&&" cmp_expr
   94         | "!" cmp_expr

   95 merge_arr: arr_elements "+" arr_elements

   96 decl_statements: decl_statement
   97                | decl_statements decl_statement

   98 decl_statement: if_statement
   99               | while_statement
  100               | for_statement
  101               | decl_var ";"
  102               | build_func ";"
  103               | decl_func
  104               | assign ";"
  105               | arithm_expr
  106               | cmp_expr
  107               | merge_arr
  108               | block_statement
  109               | NEWLINE

  110 if_statement: SIF condition decl_statement

  111 condition: cmp_expr
  112          | "(" condition ")"

  113 block_statement: "{" decl_statements "}"

  114 while_statement: SWHILE condition decl_statement

  115 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <sval> (258) 10 12 13 29 30 33 35 38 46 49 56 79 85
    STRING <sval> (259) 22 32 34 37 80
    INTEGER <ival> (260) 12 18 39 51 62 83
    FLOAT <fval> (261) 20 40 52 63 84
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 110
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 7
    SINT <sval> (268) 5
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 45
    SELSE <sval> (271)
    SLONG <sval> (272) 9
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 6
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279) 115
    SSHORT <sval> (280) 8
    SWHILE <sval> (281) 114
    "+" (282) 53 57 95
    "*=" (283) 76
    "--" (284) 71 73
    "-" (285) 54 58
    "/=" (286) 77
    "<" (287) 87
    "*" (288) 59
    "!" (289) 94
    ">" (290) 86
    "/" (291) 60
    "&&" (292) 93
    "<=" (293) 88
    "%" (294) 61
    "||" (295) 92
    ">=" (296) 89
    "=" (297) 65 66 67 68
    "==" (298) 90
    "&" (299)
    "+=" (300) 74
    "!=" (301) 91
    "-=" (302) 75
    "++" (303) 70 72
    "(" (304) 25 26 27 28 29 47 48 112 115
    ")" (305) 25 26 27 28 29 47 48 112 115
    "[" (306) 12 13 14 15 16 17
    "]" (307) 12 13 14 15 16 17
    "{" (308) 113
    "}" (309) 113
    "," (310) 11 19 21 23 36 43 50 82
    "\\" (311)
    ";" (312) 101 102 104 115
    SSCAN (313) 25
    SPRINT (314) 28
    SLEN (315) 26
    SCMP (316) 27
    NEWLINE (317) 1 2 46 109
    UNKNOWN (318)
    ARRAY_SIZE_ERROR (319) 2
    TOKEN_ERROR (320)


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    program <sval> (67)
        on left: 1 2 3
        on right: 0 1 2
    decl_var <sval> (68)
        on left: 4
        on right: 101
    type <sval> (69)
        on left: 5 6 7 8 9
        on right: 4 49
    var <sval> (70)
        on left: 10 11
        on right: 4 11 65 66 67 68 70 71 72 73 74 75 76 77
    pos_elem <sval> (71)
        on left: 12 13
        on right: 42 64
    arr_elements <sval> (72)
        on left: 14 15 16 17
        on right: 31 81 95
    integ <sval> (73)
        on left: 18 19
        on right: 15 19
    fl <sval> (74)
        on left: 20 21
        on right: 16 21
    str <sval> (75)
        on left: 22 23
        on right: 17 23
    build_func <sval> (76)
        on left: 24
        on right: 102
    func <sval> (77)
        on left: 25 26 27 28 29
        on right: 24 41
    scan_params <sval> (78)
        on left: 30
        on right: 25
    len_params <sval> (79)
        on left: 31 32 33
        on right: 26
    cmp_params <sval> (80)
        on left: 34 35 36
        on right: 27 36
    print_params <sval> (81)
        on left: 37 38 39 40 41 42 43
        on right: 28 29 43
    decl_func <sval> (82)
        on left: 44
        on right: 103
    name_func <sval> (83)
        on left: 45 46
        on right: 44 46
    params <sval> (84)
        on left: 47 48
        on right: 46
    type_params <sval> (85)
        on left: 49 50
        on right: 48 50
    sign <sval> (86)
        on left: 51 52 53 54
        on right: 53 54 55
    arithm_expr <sval> (87)
        on left: 55 56 57 58 59 60 61
        on right: 57 58 59 60 61 67 105
    number <sval> (88)
        on left: 62 63 64
        on right: 74 75 76 77 78
    assign <sval> (89)
        on left: 65 66 67 68 69
        on right: 104 115
    oper_eq <sval> (90)
        on left: 70 71 72 73 74 75 76 77
        on right: 69 115
    val <sval> (91)
        on left: 78 79 80 81 82
        on right: 65 82
    cmp_expr <sval> (92)
        on left: 83 84 85 86 87 88 89 90 91 92 93 94
        on right: 66 86 87 88 89 90 91 92 93 94 106 111 115
    merge_arr <sval> (93)
        on left: 95
        on right: 68 107
    decl_statements <sval> (94)
        on left: 96 97
        on right: 1 97 113
    decl_statement <sval> (95)
        on left: 98 99 100 101 102 103 104 105 106 107 108 109
        on right: 44 96 97 110 114 115
    if_statement <sval> (96)
        on left: 110
        on right: 98
    condition <sval> (97)
        on left: 111 112
        on right: 110 112 114
    block_statement <sval> (98)
        on left: 113
        on right: 108
    while_statement <sval> (99)
        on left: 114
        on right: 99
    for_statement <sval> (100)
        on left: 115
        on right: 100


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_statements NEWLINE
    2        | program • ARRAY_SIZE_ERROR NEWLINE

    $end              shift, and go to state 2
    IDENTIFIER        shift, and go to state 3
    INTEGER           shift, and go to state 4
    FLOAT             shift, and go to state 5
    SIF               shift, and go to state 6
    SDOUBLE           shift, and go to state 7
    SINT              shift, and go to state 8
    SFUNC             shift, and go to state 9
    SLONG             shift, and go to state 10
    SFLOAT            shift, and go to state 11
    SFOR              shift, and go to state 12
    SSHORT            shift, and go to state 13
    SWHILE            shift, and go to state 14
    "+"               shift, and go to state 15
    "--"              shift, and go to state 16
    "-"               shift, and go to state 17
    "!"               shift, and go to state 18
    "++"              shift, and go to state 19
    "["               shift, and go to state 20
    "{"               shift, and go to state 21
    SSCAN             shift, and go to state 22
    SPRINT            shift, and go to state 23
    SLEN              shift, and go to state 24
    SCMP              shift, and go to state 25
    NEWLINE           shift, and go to state 26
    ARRAY_SIZE_ERROR  shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statements  go to state 42
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 2

    0 $accept: program $end •

    $default  accept


State 3

   10 var: IDENTIFIER •
   29 func: IDENTIFIER • "(" print_params ")"
   56 arithm_expr: IDENTIFIER •
   85 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 48

    IDENTIFIER  reduce using rule 56 (arithm_expr)
    IDENTIFIER  [reduce using rule 85 (cmp_expr)]
    INTEGER     reduce using rule 56 (arithm_expr)
    INTEGER     [reduce using rule 85 (cmp_expr)]
    FLOAT       reduce using rule 56 (arithm_expr)
    FLOAT       [reduce using rule 85 (cmp_expr)]
    SIF         reduce using rule 56 (arithm_expr)
    SIF         [reduce using rule 85 (cmp_expr)]
    SDOUBLE     reduce using rule 56 (arithm_expr)
    SDOUBLE     [reduce using rule 85 (cmp_expr)]
    SINT        reduce using rule 56 (arithm_expr)
    SINT        [reduce using rule 85 (cmp_expr)]
    SFUNC       reduce using rule 56 (arithm_expr)
    SFUNC       [reduce using rule 85 (cmp_expr)]
    SLONG       reduce using rule 56 (arithm_expr)
    SLONG       [reduce using rule 85 (cmp_expr)]
    SFLOAT      reduce using rule 56 (arithm_expr)
    SFLOAT      [reduce using rule 85 (cmp_expr)]
    SFOR        reduce using rule 56 (arithm_expr)
    SFOR        [reduce using rule 85 (cmp_expr)]
    SSHORT      reduce using rule 56 (arithm_expr)
    SSHORT      [reduce using rule 85 (cmp_expr)]
    SWHILE      reduce using rule 56 (arithm_expr)
    SWHILE      [reduce using rule 85 (cmp_expr)]
    "+"         reduce using rule 56 (arithm_expr)
    "+"         [reduce using rule 85 (cmp_expr)]
    "*="        reduce using rule 10 (var)
    "--"        reduce using rule 10 (var)
    "--"        [reduce using rule 56 (arithm_expr)]
    "--"        [reduce using rule 85 (cmp_expr)]
    "-"         reduce using rule 56 (arithm_expr)
    "-"         [reduce using rule 85 (cmp_expr)]
    "/="        reduce using rule 10 (var)
    "<"         reduce using rule 85 (cmp_expr)
    "!"         reduce using rule 56 (arithm_expr)
    "!"         [reduce using rule 85 (cmp_expr)]
    ">"         reduce using rule 85 (cmp_expr)
    "&&"        reduce using rule 85 (cmp_expr)
    "<="        reduce using rule 85 (cmp_expr)
    "||"        reduce using rule 85 (cmp_expr)
    ">="        reduce using rule 85 (cmp_expr)
    "="         reduce using rule 10 (var)
    "=="        reduce using rule 85 (cmp_expr)
    "+="        reduce using rule 10 (var)
    "!="        reduce using rule 85 (cmp_expr)
    "-="        reduce using rule 10 (var)
    "++"        reduce using rule 10 (var)
    "++"        [reduce using rule 56 (arithm_expr)]
    "++"        [reduce using rule 85 (cmp_expr)]
    "["         reduce using rule 56 (arithm_expr)
    "["         [reduce using rule 85 (cmp_expr)]
    "{"         reduce using rule 56 (arithm_expr)
    "{"         [reduce using rule 85 (cmp_expr)]
    "}"         reduce using rule 56 (arithm_expr)
    "}"         [reduce using rule 85 (cmp_expr)]
    ","         reduce using rule 10 (var)
    SSCAN       reduce using rule 56 (arithm_expr)
    SSCAN       [reduce using rule 85 (cmp_expr)]
    SPRINT      reduce using rule 56 (arithm_expr)
    SPRINT      [reduce using rule 85 (cmp_expr)]
    SLEN        reduce using rule 56 (arithm_expr)
    SLEN        [reduce using rule 85 (cmp_expr)]
    SCMP        reduce using rule 56 (arithm_expr)
    SCMP        [reduce using rule 85 (cmp_expr)]
    NEWLINE     reduce using rule 56 (arithm_expr)
    NEWLINE     [reduce using rule 85 (cmp_expr)]
    $default    reduce using rule 56 (arithm_expr)


State 4

   51 sign: INTEGER •
   83 cmp_expr: INTEGER •

    IDENTIFIER  reduce using rule 51 (sign)
    IDENTIFIER  [reduce using rule 83 (cmp_expr)]
    INTEGER     reduce using rule 51 (sign)
    INTEGER     [reduce using rule 83 (cmp_expr)]
    FLOAT       reduce using rule 51 (sign)
    FLOAT       [reduce using rule 83 (cmp_expr)]
    SIF         reduce using rule 51 (sign)
    SIF         [reduce using rule 83 (cmp_expr)]
    SDOUBLE     reduce using rule 51 (sign)
    SDOUBLE     [reduce using rule 83 (cmp_expr)]
    SINT        reduce using rule 51 (sign)
    SINT        [reduce using rule 83 (cmp_expr)]
    SFUNC       reduce using rule 51 (sign)
    SFUNC       [reduce using rule 83 (cmp_expr)]
    SLONG       reduce using rule 51 (sign)
    SLONG       [reduce using rule 83 (cmp_expr)]
    SFLOAT      reduce using rule 51 (sign)
    SFLOAT      [reduce using rule 83 (cmp_expr)]
    SFOR        reduce using rule 51 (sign)
    SFOR        [reduce using rule 83 (cmp_expr)]
    SSHORT      reduce using rule 51 (sign)
    SSHORT      [reduce using rule 83 (cmp_expr)]
    SWHILE      reduce using rule 51 (sign)
    SWHILE      [reduce using rule 83 (cmp_expr)]
    "+"         reduce using rule 51 (sign)
    "+"         [reduce using rule 83 (cmp_expr)]
    "--"        reduce using rule 51 (sign)
    "--"        [reduce using rule 83 (cmp_expr)]
    "-"         reduce using rule 51 (sign)
    "-"         [reduce using rule 83 (cmp_expr)]
    "<"         reduce using rule 83 (cmp_expr)
    "!"         reduce using rule 51 (sign)
    "!"         [reduce using rule 83 (cmp_expr)]
    ">"         reduce using rule 83 (cmp_expr)
    "&&"        reduce using rule 83 (cmp_expr)
    "<="        reduce using rule 83 (cmp_expr)
    "||"        reduce using rule 83 (cmp_expr)
    ">="        reduce using rule 83 (cmp_expr)
    "=="        reduce using rule 83 (cmp_expr)
    "!="        reduce using rule 83 (cmp_expr)
    "++"        reduce using rule 51 (sign)
    "++"        [reduce using rule 83 (cmp_expr)]
    "["         reduce using rule 51 (sign)
    "["         [reduce using rule 83 (cmp_expr)]
    "{"         reduce using rule 51 (sign)
    "{"         [reduce using rule 83 (cmp_expr)]
    "}"         reduce using rule 51 (sign)
    "}"         [reduce using rule 83 (cmp_expr)]
    SSCAN       reduce using rule 51 (sign)
    SSCAN       [reduce using rule 83 (cmp_expr)]
    SPRINT      reduce using rule 51 (sign)
    SPRINT      [reduce using rule 83 (cmp_expr)]
    SLEN        reduce using rule 51 (sign)
    SLEN        [reduce using rule 83 (cmp_expr)]
    SCMP        reduce using rule 51 (sign)
    SCMP        [reduce using rule 83 (cmp_expr)]
    NEWLINE     reduce using rule 51 (sign)
    NEWLINE     [reduce using rule 83 (cmp_expr)]
    $default    reduce using rule 51 (sign)


State 5

   52 sign: FLOAT •
   84 cmp_expr: FLOAT •

    IDENTIFIER  reduce using rule 52 (sign)
    IDENTIFIER  [reduce using rule 84 (cmp_expr)]
    INTEGER     reduce using rule 52 (sign)
    INTEGER     [reduce using rule 84 (cmp_expr)]
    FLOAT       reduce using rule 52 (sign)
    FLOAT       [reduce using rule 84 (cmp_expr)]
    SIF         reduce using rule 52 (sign)
    SIF         [reduce using rule 84 (cmp_expr)]
    SDOUBLE     reduce using rule 52 (sign)
    SDOUBLE     [reduce using rule 84 (cmp_expr)]
    SINT        reduce using rule 52 (sign)
    SINT        [reduce using rule 84 (cmp_expr)]
    SFUNC       reduce using rule 52 (sign)
    SFUNC       [reduce using rule 84 (cmp_expr)]
    SLONG       reduce using rule 52 (sign)
    SLONG       [reduce using rule 84 (cmp_expr)]
    SFLOAT      reduce using rule 52 (sign)
    SFLOAT      [reduce using rule 84 (cmp_expr)]
    SFOR        reduce using rule 52 (sign)
    SFOR        [reduce using rule 84 (cmp_expr)]
    SSHORT      reduce using rule 52 (sign)
    SSHORT      [reduce using rule 84 (cmp_expr)]
    SWHILE      reduce using rule 52 (sign)
    SWHILE      [reduce using rule 84 (cmp_expr)]
    "+"         reduce using rule 52 (sign)
    "+"         [reduce using rule 84 (cmp_expr)]
    "--"        reduce using rule 52 (sign)
    "--"        [reduce using rule 84 (cmp_expr)]
    "-"         reduce using rule 52 (sign)
    "-"         [reduce using rule 84 (cmp_expr)]
    "<"         reduce using rule 84 (cmp_expr)
    "!"         reduce using rule 52 (sign)
    "!"         [reduce using rule 84 (cmp_expr)]
    ">"         reduce using rule 84 (cmp_expr)
    "&&"        reduce using rule 84 (cmp_expr)
    "<="        reduce using rule 84 (cmp_expr)
    "||"        reduce using rule 84 (cmp_expr)
    ">="        reduce using rule 84 (cmp_expr)
    "=="        reduce using rule 84 (cmp_expr)
    "!="        reduce using rule 84 (cmp_expr)
    "++"        reduce using rule 52 (sign)
    "++"        [reduce using rule 84 (cmp_expr)]
    "["         reduce using rule 52 (sign)
    "["         [reduce using rule 84 (cmp_expr)]
    "{"         reduce using rule 52 (sign)
    "{"         [reduce using rule 84 (cmp_expr)]
    "}"         reduce using rule 52 (sign)
    "}"         [reduce using rule 84 (cmp_expr)]
    SSCAN       reduce using rule 52 (sign)
    SSCAN       [reduce using rule 84 (cmp_expr)]
    SPRINT      reduce using rule 52 (sign)
    SPRINT      [reduce using rule 84 (cmp_expr)]
    SLEN        reduce using rule 52 (sign)
    SLEN        [reduce using rule 84 (cmp_expr)]
    SCMP        reduce using rule 52 (sign)
    SCMP        [reduce using rule 84 (cmp_expr)]
    NEWLINE     reduce using rule 52 (sign)
    NEWLINE     [reduce using rule 84 (cmp_expr)]
    $default    reduce using rule 52 (sign)


State 6

  110 if_statement: SIF • condition decl_statement

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18
    "("         shift, and go to state 52

    cmp_expr   go to state 53
    condition  go to state 54


State 7

    7 type: SDOUBLE •

    $default  reduce using rule 7 (type)


State 8

    5 type: SINT •

    $default  reduce using rule 5 (type)


State 9

   45 name_func: SFUNC •

    $default  reduce using rule 45 (name_func)


State 10

    9 type: SLONG •

    $default  reduce using rule 9 (type)


State 11

    6 type: SFLOAT •

    $default  reduce using rule 6 (type)


State 12

  115 for_statement: SFOR • "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement

    "("  shift, and go to state 55


State 13

    8 type: SSHORT •

    $default  reduce using rule 8 (type)


State 14

  114 while_statement: SWHILE • condition decl_statement

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18
    "("         shift, and go to state 52

    cmp_expr   go to state 53
    condition  go to state 56


State 15

   53 sign: "+" • sign

    INTEGER  shift, and go to state 57
    FLOAT    shift, and go to state 58
    "+"      shift, and go to state 15
    "-"      shift, and go to state 17

    sign  go to state 59


State 16

   73 oper_eq: "--" • var

    IDENTIFIER  shift, and go to state 60

    var  go to state 61


State 17

   54 sign: "-" • sign

    INTEGER  shift, and go to state 57
    FLOAT    shift, and go to state 58
    "+"      shift, and go to state 15
    "-"      shift, and go to state 17

    sign  go to state 62


State 18

   94 cmp_expr: "!" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 63


State 19

   72 oper_eq: "++" • var

    IDENTIFIER  shift, and go to state 60

    var  go to state 64


State 20

   14 arr_elements: "[" • "]"
   15             | "[" • integ "]"
   16             | "[" • fl "]"
   17             | "[" • str "]"

    STRING   shift, and go to state 65
    INTEGER  shift, and go to state 66
    FLOAT    shift, and go to state 67
    "]"      shift, and go to state 68

    integ  go to state 69
    fl     go to state 70
    str    go to state 71


State 21

  113 block_statement: "{" • decl_statements "}"

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "--"        shift, and go to state 16
    "-"         shift, and go to state 17
    "!"         shift, and go to state 18
    "++"        shift, and go to state 19
    "["         shift, and go to state 20
    "{"         shift, and go to state 21
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25
    NEWLINE     shift, and go to state 26

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statements  go to state 72
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 22

   25 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 73


State 23

   28 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 74


State 24

   26 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 75


State 25

   27 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 76


State 26

  109 decl_statement: NEWLINE •

    $default  reduce using rule 109 (decl_statement)


State 27

    2 program: program ARRAY_SIZE_ERROR • NEWLINE

    NEWLINE  shift, and go to state 77


State 28

  101 decl_statement: decl_var • ";"

    ";"  shift, and go to state 78


State 29

    4 decl_var: type • var

    IDENTIFIER  shift, and go to state 60

    var  go to state 79


State 30

   11 var: var • "," var
   65 assign: var • "=" val
   66       | var • "=" cmp_expr
   67       | var • "=" arithm_expr
   68       | var • "=" merge_arr
   70 oper_eq: var • "++"
   71        | var • "--"
   74        | var • "+=" number
   75        | var • "-=" number
   76        | var • "*=" number
   77        | var • "/=" number

    "*="  shift, and go to state 80
    "--"  shift, and go to state 81
    "/="  shift, and go to state 82
    "="   shift, and go to state 83
    "+="  shift, and go to state 84
    "-="  shift, and go to state 85
    "++"  shift, and go to state 86
    ","   shift, and go to state 87


State 31

   95 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 88


State 32

  102 decl_statement: build_func • ";"

    ";"  shift, and go to state 89


State 33

   24 build_func: func •

    $default  reduce using rule 24 (build_func)


State 34

  103 decl_statement: decl_func •

    $default  reduce using rule 103 (decl_statement)


State 35

   44 decl_func: name_func • decl_statement
   46 name_func: name_func • IDENTIFIER params NEWLINE

    IDENTIFIER  shift, and go to state 90
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "--"        shift, and go to state 16
    "-"         shift, and go to state 17
    "!"         shift, and go to state 18
    "++"        shift, and go to state 19
    "["         shift, and go to state 20
    "{"         shift, and go to state 21
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25
    NEWLINE     shift, and go to state 26

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 91
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 36

   55 arithm_expr: sign •

    $default  reduce using rule 55 (arithm_expr)


State 37

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr
  105 decl_statement: arithm_expr •

    "+"  shift, and go to state 92
    "-"  shift, and go to state 93
    "*"  shift, and go to state 94
    "/"  shift, and go to state 95
    "%"  shift, and go to state 96

    "+"       [reduce using rule 105 (decl_statement)]
    "-"       [reduce using rule 105 (decl_statement)]
    $default  reduce using rule 105 (decl_statement)


State 38

  104 decl_statement: assign • ";"

    ";"  shift, and go to state 97


State 39

   69 assign: oper_eq •

    $default  reduce using rule 69 (assign)


State 40

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
  106 decl_statement: cmp_expr •

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    "||"  shift, and go to state 102
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 106 (decl_statement)


State 41

  107 decl_statement: merge_arr •

    $default  reduce using rule 107 (decl_statement)


State 42

    1 program: program decl_statements • NEWLINE
   97 decl_statements: decl_statements • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "--"        shift, and go to state 16
    "-"         shift, and go to state 17
    "!"         shift, and go to state 18
    "++"        shift, and go to state 19
    "["         shift, and go to state 20
    "{"         shift, and go to state 21
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25
    NEWLINE     shift, and go to state 106

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 107
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 43

   96 decl_statements: decl_statement •

    $default  reduce using rule 96 (decl_statements)


State 44

   98 decl_statement: if_statement •

    $default  reduce using rule 98 (decl_statement)


State 45

  108 decl_statement: block_statement •

    $default  reduce using rule 108 (decl_statement)


State 46

   99 decl_statement: while_statement •

    $default  reduce using rule 99 (decl_statement)


State 47

  100 decl_statement: for_statement •

    $default  reduce using rule 100 (decl_statement)


State 48

   29 func: IDENTIFIER "(" • print_params ")"

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109
    INTEGER     shift, and go to state 110
    FLOAT       shift, and go to state 111
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25

    pos_elem      go to state 112
    func          go to state 113
    print_params  go to state 114


State 49

   85 cmp_expr: IDENTIFIER •

    $default  reduce using rule 85 (cmp_expr)


State 50

   83 cmp_expr: INTEGER •

    $default  reduce using rule 83 (cmp_expr)


State 51

   84 cmp_expr: FLOAT •

    $default  reduce using rule 84 (cmp_expr)


State 52

  112 condition: "(" • condition ")"

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18
    "("         shift, and go to state 52

    cmp_expr   go to state 53
    condition  go to state 115


State 53

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
  111 condition: cmp_expr •

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    "||"  shift, and go to state 102
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 111 (condition)


State 54

  110 if_statement: SIF condition • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "--"        shift, and go to state 16
    "-"         shift, and go to state 17
    "!"         shift, and go to state 18
    "++"        shift, and go to state 19
    "["         shift, and go to state 20
    "{"         shift, and go to state 21
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25
    NEWLINE     shift, and go to state 26

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 116
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 55

  115 for_statement: SFOR "(" • assign ";" cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 60
    "--"        shift, and go to state 16
    "++"        shift, and go to state 19

    var      go to state 30
    assign   go to state 117
    oper_eq  go to state 39


State 56

  114 while_statement: SWHILE condition • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "--"        shift, and go to state 16
    "-"         shift, and go to state 17
    "!"         shift, and go to state 18
    "++"        shift, and go to state 19
    "["         shift, and go to state 20
    "{"         shift, and go to state 21
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25
    NEWLINE     shift, and go to state 26

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 118
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 57

   51 sign: INTEGER •

    $default  reduce using rule 51 (sign)


State 58

   52 sign: FLOAT •

    $default  reduce using rule 52 (sign)


State 59

   53 sign: "+" sign •

    $default  reduce using rule 53 (sign)


State 60

   10 var: IDENTIFIER •

    $default  reduce using rule 10 (var)


State 61

   11 var: var • "," var
   73 oper_eq: "--" var •

    ","  shift, and go to state 87

    $default  reduce using rule 73 (oper_eq)


State 62

   54 sign: "-" sign •

    $default  reduce using rule 54 (sign)


State 63

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
   94         | "!" cmp_expr •

    $default  reduce using rule 94 (cmp_expr)


State 64

   11 var: var • "," var
   72 oper_eq: "++" var •

    ","  shift, and go to state 87

    $default  reduce using rule 72 (oper_eq)


State 65

   22 str: STRING •

    $default  reduce using rule 22 (str)


State 66

   18 integ: INTEGER •

    $default  reduce using rule 18 (integ)


State 67

   20 fl: FLOAT •

    $default  reduce using rule 20 (fl)


State 68

   14 arr_elements: "[" "]" •

    $default  reduce using rule 14 (arr_elements)


State 69

   15 arr_elements: "[" integ • "]"
   19 integ: integ • "," integ

    "]"  shift, and go to state 119
    ","  shift, and go to state 120


State 70

   16 arr_elements: "[" fl • "]"
   21 fl: fl • "," fl

    "]"  shift, and go to state 121
    ","  shift, and go to state 122


State 71

   17 arr_elements: "[" str • "]"
   23 str: str • "," str

    "]"  shift, and go to state 123
    ","  shift, and go to state 124


State 72

   97 decl_statements: decl_statements • decl_statement
  113 block_statement: "{" decl_statements • "}"

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "--"        shift, and go to state 16
    "-"         shift, and go to state 17
    "!"         shift, and go to state 18
    "++"        shift, and go to state 19
    "["         shift, and go to state 20
    "{"         shift, and go to state 21
    "}"         shift, and go to state 125
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25
    NEWLINE     shift, and go to state 26

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 107
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 73

   25 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 126

    scan_params  go to state 127


State 74

   28 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109
    INTEGER     shift, and go to state 110
    FLOAT       shift, and go to state 111
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25

    pos_elem      go to state 112
    func          go to state 113
    print_params  go to state 128


State 75

   26 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 129
    STRING      shift, and go to state 130
    "["         shift, and go to state 20

    arr_elements  go to state 131
    len_params    go to state 132


State 76

   27 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 133
    STRING      shift, and go to state 134

    cmp_params  go to state 135


State 77

    2 program: program ARRAY_SIZE_ERROR NEWLINE •

    $default  reduce using rule 2 (program)


State 78

  101 decl_statement: decl_var ";" •

    $default  reduce using rule 101 (decl_statement)


State 79

    4 decl_var: type var •
   11 var: var • "," var

    ","  shift, and go to state 87

    $default  reduce using rule 4 (decl_var)


State 80

   76 oper_eq: var "*=" • number

    IDENTIFIER  shift, and go to state 136
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138

    pos_elem  go to state 139
    number    go to state 140


State 81

   71 oper_eq: var "--" •

    $default  reduce using rule 71 (oper_eq)


State 82

   77 oper_eq: var "/=" • number

    IDENTIFIER  shift, and go to state 136
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138

    pos_elem  go to state 139
    number    go to state 141


State 83

   65 assign: var "=" • val
   66       | var "=" • cmp_expr
   67       | var "=" • arithm_expr
   68       | var "=" • merge_arr

    IDENTIFIER  shift, and go to state 142
    STRING      shift, and go to state 143
    INTEGER     shift, and go to state 144
    FLOAT       shift, and go to state 145
    "+"         shift, and go to state 15
    "-"         shift, and go to state 17
    "!"         shift, and go to state 18
    "["         shift, and go to state 20

    pos_elem      go to state 139
    arr_elements  go to state 146
    sign          go to state 36
    arithm_expr   go to state 147
    number        go to state 148
    val           go to state 149
    cmp_expr      go to state 150
    merge_arr     go to state 151


State 84

   74 oper_eq: var "+=" • number

    IDENTIFIER  shift, and go to state 136
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138

    pos_elem  go to state 139
    number    go to state 152


State 85

   75 oper_eq: var "-=" • number

    IDENTIFIER  shift, and go to state 136
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138

    pos_elem  go to state 139
    number    go to state 153


State 86

   70 oper_eq: var "++" •

    $default  reduce using rule 70 (oper_eq)


State 87

   11 var: var "," • var

    IDENTIFIER  shift, and go to state 60

    var  go to state 154


State 88

   95 merge_arr: arr_elements "+" • arr_elements

    "["  shift, and go to state 20

    arr_elements  go to state 155


State 89

  102 decl_statement: build_func ";" •

    $default  reduce using rule 102 (decl_statement)


State 90

   10 var: IDENTIFIER •
   29 func: IDENTIFIER • "(" print_params ")"
   46 name_func: name_func IDENTIFIER • params NEWLINE
   56 arithm_expr: IDENTIFIER •
   85 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 156

    IDENTIFIER  reduce using rule 56 (arithm_expr)
    IDENTIFIER  [reduce using rule 85 (cmp_expr)]
    INTEGER     reduce using rule 56 (arithm_expr)
    INTEGER     [reduce using rule 85 (cmp_expr)]
    FLOAT       reduce using rule 56 (arithm_expr)
    FLOAT       [reduce using rule 85 (cmp_expr)]
    SIF         reduce using rule 56 (arithm_expr)
    SIF         [reduce using rule 85 (cmp_expr)]
    SDOUBLE     reduce using rule 56 (arithm_expr)
    SDOUBLE     [reduce using rule 85 (cmp_expr)]
    SINT        reduce using rule 56 (arithm_expr)
    SINT        [reduce using rule 85 (cmp_expr)]
    SFUNC       reduce using rule 56 (arithm_expr)
    SFUNC       [reduce using rule 85 (cmp_expr)]
    SLONG       reduce using rule 56 (arithm_expr)
    SLONG       [reduce using rule 85 (cmp_expr)]
    SFLOAT      reduce using rule 56 (arithm_expr)
    SFLOAT      [reduce using rule 85 (cmp_expr)]
    SFOR        reduce using rule 56 (arithm_expr)
    SFOR        [reduce using rule 85 (cmp_expr)]
    SSHORT      reduce using rule 56 (arithm_expr)
    SSHORT      [reduce using rule 85 (cmp_expr)]
    SWHILE      reduce using rule 56 (arithm_expr)
    SWHILE      [reduce using rule 85 (cmp_expr)]
    "+"         reduce using rule 56 (arithm_expr)
    "+"         [reduce using rule 85 (cmp_expr)]
    "*="        reduce using rule 10 (var)
    "--"        reduce using rule 10 (var)
    "--"        [reduce using rule 56 (arithm_expr)]
    "--"        [reduce using rule 85 (cmp_expr)]
    "-"         reduce using rule 56 (arithm_expr)
    "-"         [reduce using rule 85 (cmp_expr)]
    "/="        reduce using rule 10 (var)
    "<"         reduce using rule 85 (cmp_expr)
    "!"         reduce using rule 56 (arithm_expr)
    "!"         [reduce using rule 85 (cmp_expr)]
    ">"         reduce using rule 85 (cmp_expr)
    "&&"        reduce using rule 85 (cmp_expr)
    "<="        reduce using rule 85 (cmp_expr)
    "||"        reduce using rule 85 (cmp_expr)
    ">="        reduce using rule 85 (cmp_expr)
    "="         reduce using rule 10 (var)
    "=="        reduce using rule 85 (cmp_expr)
    "+="        reduce using rule 10 (var)
    "!="        reduce using rule 85 (cmp_expr)
    "-="        reduce using rule 10 (var)
    "++"        reduce using rule 10 (var)
    "++"        [reduce using rule 56 (arithm_expr)]
    "++"        [reduce using rule 85 (cmp_expr)]
    "["         reduce using rule 56 (arithm_expr)
    "["         [reduce using rule 85 (cmp_expr)]
    "{"         reduce using rule 56 (arithm_expr)
    "{"         [reduce using rule 85 (cmp_expr)]
    "}"         reduce using rule 56 (arithm_expr)
    "}"         [reduce using rule 85 (cmp_expr)]
    ","         reduce using rule 10 (var)
    SSCAN       reduce using rule 56 (arithm_expr)
    SSCAN       [reduce using rule 85 (cmp_expr)]
    SPRINT      reduce using rule 56 (arithm_expr)
    SPRINT      [reduce using rule 85 (cmp_expr)]
    SLEN        reduce using rule 56 (arithm_expr)
    SLEN        [reduce using rule 85 (cmp_expr)]
    SCMP        reduce using rule 56 (arithm_expr)
    SCMP        [reduce using rule 85 (cmp_expr)]
    NEWLINE     reduce using rule 56 (arithm_expr)
    NEWLINE     [reduce using rule 85 (cmp_expr)]
    $default    reduce using rule 56 (arithm_expr)

    params  go to state 157


State 91

   44 decl_func: name_func decl_statement •

    $default  reduce using rule 44 (decl_func)


State 92

   57 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 57
    FLOAT       shift, and go to state 58
    "+"         shift, and go to state 15
    "-"         shift, and go to state 17

    sign         go to state 36
    arithm_expr  go to state 159


State 93

   58 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 57
    FLOAT       shift, and go to state 58
    "+"         shift, and go to state 15
    "-"         shift, and go to state 17

    sign         go to state 36
    arithm_expr  go to state 160


State 94

   59 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 57
    FLOAT       shift, and go to state 58
    "+"         shift, and go to state 15
    "-"         shift, and go to state 17

    sign         go to state 36
    arithm_expr  go to state 161


State 95

   60 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 57
    FLOAT       shift, and go to state 58
    "+"         shift, and go to state 15
    "-"         shift, and go to state 17

    sign         go to state 36
    arithm_expr  go to state 162


State 96

   61 arithm_expr: arithm_expr "%" • arithm_expr

    IDENTIFIER  shift, and go to state 158
    INTEGER     shift, and go to state 57
    FLOAT       shift, and go to state 58
    "+"         shift, and go to state 15
    "-"         shift, and go to state 17

    sign         go to state 36
    arithm_expr  go to state 163


State 97

  104 decl_statement: assign ";" •

    $default  reduce using rule 104 (decl_statement)


State 98

   87 cmp_expr: cmp_expr "<" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 164


State 99

   86 cmp_expr: cmp_expr ">" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 165


State 100

   93 cmp_expr: cmp_expr "&&" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 166


State 101

   88 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 167


State 102

   92 cmp_expr: cmp_expr "||" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 168


State 103

   89 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 169


State 104

   90 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 170


State 105

   91 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 171


State 106

    1 program: program decl_statements NEWLINE •
  109 decl_statement: NEWLINE •

    IDENTIFIER  reduce using rule 1 (program)
    IDENTIFIER  [reduce using rule 109 (decl_statement)]
    INTEGER     reduce using rule 1 (program)
    INTEGER     [reduce using rule 109 (decl_statement)]
    FLOAT       reduce using rule 1 (program)
    FLOAT       [reduce using rule 109 (decl_statement)]
    SIF         reduce using rule 1 (program)
    SIF         [reduce using rule 109 (decl_statement)]
    SDOUBLE     reduce using rule 1 (program)
    SDOUBLE     [reduce using rule 109 (decl_statement)]
    SINT        reduce using rule 1 (program)
    SINT        [reduce using rule 109 (decl_statement)]
    SFUNC       reduce using rule 1 (program)
    SFUNC       [reduce using rule 109 (decl_statement)]
    SLONG       reduce using rule 1 (program)
    SLONG       [reduce using rule 109 (decl_statement)]
    SFLOAT      reduce using rule 1 (program)
    SFLOAT      [reduce using rule 109 (decl_statement)]
    SFOR        reduce using rule 1 (program)
    SFOR        [reduce using rule 109 (decl_statement)]
    SSHORT      reduce using rule 1 (program)
    SSHORT      [reduce using rule 109 (decl_statement)]
    SWHILE      reduce using rule 1 (program)
    SWHILE      [reduce using rule 109 (decl_statement)]
    "+"         reduce using rule 1 (program)
    "+"         [reduce using rule 109 (decl_statement)]
    "--"        reduce using rule 1 (program)
    "--"        [reduce using rule 109 (decl_statement)]
    "-"         reduce using rule 1 (program)
    "-"         [reduce using rule 109 (decl_statement)]
    "!"         reduce using rule 1 (program)
    "!"         [reduce using rule 109 (decl_statement)]
    "++"        reduce using rule 1 (program)
    "++"        [reduce using rule 109 (decl_statement)]
    "["         reduce using rule 1 (program)
    "["         [reduce using rule 109 (decl_statement)]
    "{"         reduce using rule 1 (program)
    "{"         [reduce using rule 109 (decl_statement)]
    SSCAN       reduce using rule 1 (program)
    SSCAN       [reduce using rule 109 (decl_statement)]
    SPRINT      reduce using rule 1 (program)
    SPRINT      [reduce using rule 109 (decl_statement)]
    SLEN        reduce using rule 1 (program)
    SLEN        [reduce using rule 109 (decl_statement)]
    SCMP        reduce using rule 1 (program)
    SCMP        [reduce using rule 109 (decl_statement)]
    NEWLINE     reduce using rule 1 (program)
    NEWLINE     [reduce using rule 109 (decl_statement)]
    $default    reduce using rule 1 (program)


State 107

   97 decl_statements: decl_statements decl_statement •

    $default  reduce using rule 97 (decl_statements)


State 108

   12 pos_elem: IDENTIFIER • "[" INTEGER "]"
   13         | IDENTIFIER • "[" IDENTIFIER "]"
   29 func: IDENTIFIER • "(" print_params ")"
   38 print_params: IDENTIFIER •

    "("  shift, and go to state 48
    "["  shift, and go to state 172

    $default  reduce using rule 38 (print_params)


State 109

   37 print_params: STRING •

    $default  reduce using rule 37 (print_params)


State 110

   39 print_params: INTEGER •

    $default  reduce using rule 39 (print_params)


State 111

   40 print_params: FLOAT •

    $default  reduce using rule 40 (print_params)


State 112

   42 print_params: pos_elem •

    $default  reduce using rule 42 (print_params)


State 113

   41 print_params: func •

    $default  reduce using rule 41 (print_params)


State 114

   29 func: IDENTIFIER "(" print_params • ")"
   43 print_params: print_params • "," print_params

    ")"  shift, and go to state 173
    ","  shift, and go to state 174


State 115

  112 condition: "(" condition • ")"

    ")"  shift, and go to state 175


State 116

  110 if_statement: SIF condition decl_statement •

    $default  reduce using rule 110 (if_statement)


State 117

  115 for_statement: SFOR "(" assign • ";" cmp_expr ";" oper_eq ")" decl_statement

    ";"  shift, and go to state 176


State 118

  114 while_statement: SWHILE condition decl_statement •

    $default  reduce using rule 114 (while_statement)


State 119

   15 arr_elements: "[" integ "]" •

    $default  reduce using rule 15 (arr_elements)


State 120

   19 integ: integ "," • integ

    INTEGER  shift, and go to state 66

    integ  go to state 177


State 121

   16 arr_elements: "[" fl "]" •

    $default  reduce using rule 16 (arr_elements)


State 122

   21 fl: fl "," • fl

    FLOAT  shift, and go to state 67

    fl  go to state 178


State 123

   17 arr_elements: "[" str "]" •

    $default  reduce using rule 17 (arr_elements)


State 124

   23 str: str "," • str

    STRING  shift, and go to state 65

    str  go to state 179


State 125

  113 block_statement: "{" decl_statements "}" •

    $default  reduce using rule 113 (block_statement)


State 126

   30 scan_params: IDENTIFIER •

    $default  reduce using rule 30 (scan_params)


State 127

   25 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 180


State 128

   28 func: SPRINT "(" print_params • ")"
   43 print_params: print_params • "," print_params

    ")"  shift, and go to state 181
    ","  shift, and go to state 174


State 129

   33 len_params: IDENTIFIER •

    $default  reduce using rule 33 (len_params)


State 130

   32 len_params: STRING •

    $default  reduce using rule 32 (len_params)


State 131

   31 len_params: arr_elements •

    $default  reduce using rule 31 (len_params)


State 132

   26 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 182


State 133

   35 cmp_params: IDENTIFIER •

    $default  reduce using rule 35 (cmp_params)


State 134

   34 cmp_params: STRING •

    $default  reduce using rule 34 (cmp_params)


State 135

   27 func: SCMP "(" cmp_params • ")"
   36 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 183
    ","  shift, and go to state 184


State 136

   12 pos_elem: IDENTIFIER • "[" INTEGER "]"
   13         | IDENTIFIER • "[" IDENTIFIER "]"

    "["  shift, and go to state 172


State 137

   62 number: INTEGER •

    $default  reduce using rule 62 (number)


State 138

   63 number: FLOAT •

    $default  reduce using rule 63 (number)


State 139

   64 number: pos_elem •

    $default  reduce using rule 64 (number)


State 140

   76 oper_eq: var "*=" number •

    $default  reduce using rule 76 (oper_eq)


State 141

   77 oper_eq: var "/=" number •

    $default  reduce using rule 77 (oper_eq)


State 142

   12 pos_elem: IDENTIFIER • "[" INTEGER "]"
   13         | IDENTIFIER • "[" IDENTIFIER "]"
   56 arithm_expr: IDENTIFIER •
   79 val: IDENTIFIER •
   85 cmp_expr: IDENTIFIER •

    "["  shift, and go to state 172

    "+"       reduce using rule 56 (arithm_expr)
    "-"       reduce using rule 56 (arithm_expr)
    "*"       reduce using rule 56 (arithm_expr)
    "/"       reduce using rule 56 (arithm_expr)
    "%"       reduce using rule 56 (arithm_expr)
    ","       reduce using rule 79 (val)
    ";"       reduce using rule 56 (arithm_expr)
    ";"       [reduce using rule 79 (val)]
    ";"       [reduce using rule 85 (cmp_expr)]
    $default  reduce using rule 85 (cmp_expr)


State 143

   80 val: STRING •

    $default  reduce using rule 80 (val)


State 144

   51 sign: INTEGER •
   62 number: INTEGER •
   83 cmp_expr: INTEGER •

    "+"       reduce using rule 51 (sign)
    "-"       reduce using rule 51 (sign)
    "*"       reduce using rule 51 (sign)
    "/"       reduce using rule 51 (sign)
    "%"       reduce using rule 51 (sign)
    ","       reduce using rule 62 (number)
    ";"       reduce using rule 51 (sign)
    ";"       [reduce using rule 62 (number)]
    ";"       [reduce using rule 83 (cmp_expr)]
    $default  reduce using rule 83 (cmp_expr)


State 145

   52 sign: FLOAT •
   63 number: FLOAT •
   84 cmp_expr: FLOAT •

    "+"       reduce using rule 52 (sign)
    "-"       reduce using rule 52 (sign)
    "*"       reduce using rule 52 (sign)
    "/"       reduce using rule 52 (sign)
    "%"       reduce using rule 52 (sign)
    ","       reduce using rule 63 (number)
    ";"       reduce using rule 52 (sign)
    ";"       [reduce using rule 63 (number)]
    ";"       [reduce using rule 84 (cmp_expr)]
    $default  reduce using rule 84 (cmp_expr)


State 146

   81 val: arr_elements •
   95 merge_arr: arr_elements • "+" arr_elements

    "+"  shift, and go to state 88

    $default  reduce using rule 81 (val)


State 147

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr
   67 assign: var "=" arithm_expr •

    "+"  shift, and go to state 92
    "-"  shift, and go to state 93
    "*"  shift, and go to state 94
    "/"  shift, and go to state 95
    "%"  shift, and go to state 96

    $default  reduce using rule 67 (assign)


State 148

   78 val: number •

    $default  reduce using rule 78 (val)


State 149

   65 assign: var "=" val •
   82 val: val • "," val

    ","  shift, and go to state 185

    $default  reduce using rule 65 (assign)


State 150

   66 assign: var "=" cmp_expr •
   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    "||"  shift, and go to state 102
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 66 (assign)


State 151

   68 assign: var "=" merge_arr •

    $default  reduce using rule 68 (assign)


State 152

   74 oper_eq: var "+=" number •

    $default  reduce using rule 74 (oper_eq)


State 153

   75 oper_eq: var "-=" number •

    $default  reduce using rule 75 (oper_eq)


State 154

   11 var: var • "," var
   11    | var "," var •

    $default  reduce using rule 11 (var)


State 155

   95 merge_arr: arr_elements "+" arr_elements •

    $default  reduce using rule 95 (merge_arr)


State 156

   29 func: IDENTIFIER "(" • print_params ")"
   47 params: "(" • ")"
   48       | "(" • type_params ")"

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109
    INTEGER     shift, and go to state 110
    FLOAT       shift, and go to state 111
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SSHORT      shift, and go to state 13
    ")"         shift, and go to state 186
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25

    type          go to state 187
    pos_elem      go to state 112
    func          go to state 113
    print_params  go to state 114
    type_params   go to state 188


State 157

   46 name_func: name_func IDENTIFIER params • NEWLINE

    NEWLINE  shift, and go to state 189


State 158

   56 arithm_expr: IDENTIFIER •

    $default  reduce using rule 56 (arithm_expr)


State 159

   57 arithm_expr: arithm_expr • "+" arithm_expr
   57            | arithm_expr "+" arithm_expr •
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 94
    "/"  shift, and go to state 95
    "%"  shift, and go to state 96

    $default  reduce using rule 57 (arithm_expr)


State 160

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   58            | arithm_expr "-" arithm_expr •
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 94
    "/"  shift, and go to state 95
    "%"  shift, and go to state 96

    $default  reduce using rule 58 (arithm_expr)


State 161

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   59            | arithm_expr "*" arithm_expr •
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 59 (arithm_expr)


State 162

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   60            | arithm_expr "/" arithm_expr •
   61            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 60 (arithm_expr)


State 163

   57 arithm_expr: arithm_expr • "+" arithm_expr
   58            | arithm_expr • "-" arithm_expr
   59            | arithm_expr • "*" arithm_expr
   60            | arithm_expr • "/" arithm_expr
   61            | arithm_expr • "%" arithm_expr
   61            | arithm_expr "%" arithm_expr •

    $default  reduce using rule 61 (arithm_expr)


State 164

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   87         | cmp_expr "<" cmp_expr •
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 87 (cmp_expr)


State 165

   86 cmp_expr: cmp_expr • ">" cmp_expr
   86         | cmp_expr ">" cmp_expr •
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 86 (cmp_expr)


State 166

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
   93         | cmp_expr "&&" cmp_expr •

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "<="  shift, and go to state 101
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 93 (cmp_expr)


State 167

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   88         | cmp_expr "<=" cmp_expr •
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 88 (cmp_expr)


State 168

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   92         | cmp_expr "||" cmp_expr •
   93         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105

    $default  reduce using rule 92 (cmp_expr)


State 169

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   89         | cmp_expr ">=" cmp_expr •
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    $default  reduce using rule 89 (cmp_expr)


State 170

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   90         | cmp_expr "==" cmp_expr •
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "<="  shift, and go to state 101
    ">="  shift, and go to state 103

    $default  reduce using rule 90 (cmp_expr)


State 171

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   91         | cmp_expr "!=" cmp_expr •
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "<="  shift, and go to state 101
    ">="  shift, and go to state 103

    $default  reduce using rule 91 (cmp_expr)


State 172

   12 pos_elem: IDENTIFIER "[" • INTEGER "]"
   13         | IDENTIFIER "[" • IDENTIFIER "]"

    IDENTIFIER  shift, and go to state 190
    INTEGER     shift, and go to state 191


State 173

   29 func: IDENTIFIER "(" print_params ")" •

    $default  reduce using rule 29 (func)


State 174

   43 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 108
    STRING      shift, and go to state 109
    INTEGER     shift, and go to state 110
    FLOAT       shift, and go to state 111
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25

    pos_elem      go to state 112
    func          go to state 113
    print_params  go to state 192


State 175

  112 condition: "(" condition ")" •

    $default  reduce using rule 112 (condition)


State 176

  115 for_statement: SFOR "(" assign ";" • cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 49
    INTEGER     shift, and go to state 50
    FLOAT       shift, and go to state 51
    "!"         shift, and go to state 18

    cmp_expr  go to state 193


State 177

   19 integ: integ • "," integ
   19      | integ "," integ •

    $default  reduce using rule 19 (integ)


State 178

   21 fl: fl • "," fl
   21   | fl "," fl •

    $default  reduce using rule 21 (fl)


State 179

   23 str: str • "," str
   23    | str "," str •

    $default  reduce using rule 23 (str)


State 180

   25 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 25 (func)


State 181

   28 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 28 (func)


State 182

   26 func: SLEN "(" len_params ")" •

    $default  reduce using rule 26 (func)


State 183

   27 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 27 (func)


State 184

   36 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 133
    STRING      shift, and go to state 134

    cmp_params  go to state 194


State 185

   82 val: val "," • val

    IDENTIFIER  shift, and go to state 195
    STRING      shift, and go to state 143
    INTEGER     shift, and go to state 137
    FLOAT       shift, and go to state 138
    "["         shift, and go to state 20

    pos_elem      go to state 139
    arr_elements  go to state 196
    number        go to state 148
    val           go to state 197


State 186

   47 params: "(" ")" •

    $default  reduce using rule 47 (params)


State 187

   49 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 198


State 188

   48 params: "(" type_params • ")"
   50 type_params: type_params • "," type_params

    ")"  shift, and go to state 199
    ","  shift, and go to state 200


State 189

   46 name_func: name_func IDENTIFIER params NEWLINE •

    $default  reduce using rule 46 (name_func)


State 190

   13 pos_elem: IDENTIFIER "[" IDENTIFIER • "]"

    "]"  shift, and go to state 201


State 191

   12 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 202


State 192

   43 print_params: print_params • "," print_params
   43             | print_params "," print_params •

    $default  reduce using rule 43 (print_params)


State 193

   86 cmp_expr: cmp_expr • ">" cmp_expr
   87         | cmp_expr • "<" cmp_expr
   88         | cmp_expr • "<=" cmp_expr
   89         | cmp_expr • ">=" cmp_expr
   90         | cmp_expr • "==" cmp_expr
   91         | cmp_expr • "!=" cmp_expr
   92         | cmp_expr • "||" cmp_expr
   93         | cmp_expr • "&&" cmp_expr
  115 for_statement: SFOR "(" assign ";" cmp_expr • ";" oper_eq ")" decl_statement

    "<"   shift, and go to state 98
    ">"   shift, and go to state 99
    "&&"  shift, and go to state 100
    "<="  shift, and go to state 101
    "||"  shift, and go to state 102
    ">="  shift, and go to state 103
    "=="  shift, and go to state 104
    "!="  shift, and go to state 105
    ";"   shift, and go to state 203


State 194

   36 cmp_params: cmp_params • "," cmp_params
   36           | cmp_params "," cmp_params •

    $default  reduce using rule 36 (cmp_params)


State 195

   12 pos_elem: IDENTIFIER • "[" INTEGER "]"
   13         | IDENTIFIER • "[" IDENTIFIER "]"
   79 val: IDENTIFIER •

    "["  shift, and go to state 172

    $default  reduce using rule 79 (val)


State 196

   81 val: arr_elements •

    $default  reduce using rule 81 (val)


State 197

   82 val: val • "," val
   82    | val "," val •

    $default  reduce using rule 82 (val)


State 198

   49 type_params: type IDENTIFIER •

    $default  reduce using rule 49 (type_params)


State 199

   48 params: "(" type_params ")" •

    $default  reduce using rule 48 (params)


State 200

   50 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 7
    SINT     shift, and go to state 8
    SLONG    shift, and go to state 10
    SFLOAT   shift, and go to state 11
    SSHORT   shift, and go to state 13

    type         go to state 187
    type_params  go to state 204


State 201

   13 pos_elem: IDENTIFIER "[" IDENTIFIER "]" •

    $default  reduce using rule 13 (pos_elem)


State 202

   12 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 12 (pos_elem)


State 203

  115 for_statement: SFOR "(" assign ";" cmp_expr ";" • oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 60
    "--"        shift, and go to state 16
    "++"        shift, and go to state 19

    var      go to state 205
    oper_eq  go to state 206


State 204

   50 type_params: type_params • "," type_params
   50            | type_params "," type_params •

    $default  reduce using rule 50 (type_params)


State 205

   11 var: var • "," var
   70 oper_eq: var • "++"
   71        | var • "--"
   74        | var • "+=" number
   75        | var • "-=" number
   76        | var • "*=" number
   77        | var • "/=" number

    "*="  shift, and go to state 80
    "--"  shift, and go to state 81
    "/="  shift, and go to state 82
    "+="  shift, and go to state 84
    "-="  shift, and go to state 85
    "++"  shift, and go to state 86
    ","   shift, and go to state 87


State 206

  115 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq • ")" decl_statement

    ")"  shift, and go to state 207


State 207

  115 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" • decl_statement

    IDENTIFIER  shift, and go to state 3
    INTEGER     shift, and go to state 4
    FLOAT       shift, and go to state 5
    SIF         shift, and go to state 6
    SDOUBLE     shift, and go to state 7
    SINT        shift, and go to state 8
    SFUNC       shift, and go to state 9
    SLONG       shift, and go to state 10
    SFLOAT      shift, and go to state 11
    SFOR        shift, and go to state 12
    SSHORT      shift, and go to state 13
    SWHILE      shift, and go to state 14
    "+"         shift, and go to state 15
    "--"        shift, and go to state 16
    "-"         shift, and go to state 17
    "!"         shift, and go to state 18
    "++"        shift, and go to state 19
    "["         shift, and go to state 20
    "{"         shift, and go to state 21
    SSCAN       shift, and go to state 22
    SPRINT      shift, and go to state 23
    SLEN        shift, and go to state 24
    SCMP        shift, and go to state 25
    NEWLINE     shift, and go to state 26

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statement   go to state 208
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 208

  115 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement •

    $default  reduce using rule 115 (for_statement)
