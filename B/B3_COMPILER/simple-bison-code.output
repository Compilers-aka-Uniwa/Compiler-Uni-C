Terminals unused in grammar

    SBREAK
    SDO
    SSIZEOF
    SCASE
    SSTRUCT
    SELSE
    SSWITCH
    SCONST
    SRETURN
    SVOID
    SCONTINUE
    "&"
    "\\"


State 4 conflicts: 27 reduce/reduce
State 5 conflicts: 25 reduce/reduce
State 6 conflicts: 25 reduce/reduce
State 10 conflicts: 5 shift/reduce
State 37 conflicts: 2 shift/reduce
State 41 conflicts: 2 shift/reduce
State 75 conflicts: 2 shift/reduce
State 92 conflicts: 27 reduce/reduce
State 111 conflicts: 24 reduce/reduce
State 120 conflicts: 2 shift/reduce
State 150 conflicts: 2 reduce/reduce
State 152 conflicts: 2 reduce/reduce
State 153 conflicts: 2 reduce/reduce
State 154 conflicts: 1 reduce/reduce
State 182 conflicts: 1 shift/reduce
State 183 conflicts: 1 shift/reduce
State 189 conflicts: 26 reduce/reduce
State 191 conflicts: 1 reduce/reduce
State 208 conflicts: 3 shift/reduce
State 209 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program decl_statements NEWLINE
    2        | program error NEWLINE
    3        | program merge_arr TOKEN_ERROR merge_arr NEWLINE
    4        | ε

    5 decl_var: type var

    6 type: SINT
    7     | SFLOAT
    8     | SDOUBLE
    9     | SSHORT
   10     | SLONG

   11 var: IDENTIFIER
   12    | var "," var

   13 pos_elem: IDENTIFIER "[" INTEGER "]"
   14         | IDENTIFIER "[" IDENTIFIER "]"

   15 arr_elements: "[" "]"
   16             | "[" integ "]"
   17             | "[" fl "]"
   18             | "[" str "]"

   19 integ: INTEGER
   20      | integ "," integ

   21 fl: FLOAT
   22   | fl "," fl

   23 str: STRING
   24    | str "," str

   25 build_func: func

   26 func: SSCAN "(" scan_params ")"
   27     | SLEN "(" len_params ")"
   28     | SCMP "(" cmp_params ")"
   29     | SPRINT "(" print_params ")"
   30     | IDENTIFIER "(" print_params ")"

   31 scan_params: IDENTIFIER

   32 len_params: arr_elements
   33           | STRING
   34           | IDENTIFIER

   35 cmp_params: STRING
   36           | IDENTIFIER
   37           | cmp_params "," cmp_params

   38 print_params: STRING
   39             | IDENTIFIER
   40             | INTEGER
   41             | FLOAT
   42             | func
   43             | pos_elem
   44             | print_params "," print_params

   45 decl_func: name_func decl_statement

   46 name_func: SFUNC
   47          | SFUNC type
   48          | name_func IDENTIFIER params NEWLINE

   49 params: "(" ")"
   50       | "(" type_params ")"

   51 type_params: type IDENTIFIER
   52            | type_params "," type_params

   53 sign: INTEGER
   54     | FLOAT
   55     | "+" sign
   56     | "-" sign

   57 arithm_expr: sign
   58            | IDENTIFIER
   59            | arithm_expr "+" arithm_expr
   60            | arithm_expr "-" arithm_expr
   61            | arithm_expr "*" arithm_expr
   62            | arithm_expr "/" arithm_expr
   63            | arithm_expr "%" arithm_expr

   64 number: INTEGER
   65       | FLOAT
   66       | pos_elem

   67 assign: var "=" val
   68       | var "=" cmp_expr
   69       | var "=" arithm_expr
   70       | var "=" merge_arr
   71       | oper_eq

   72 oper_eq: var "++"
   73        | var "--"
   74        | "++" var
   75        | "--" var
   76        | var "+=" number
   77        | var "-=" number
   78        | var "*=" number
   79        | var "/=" number

   80 val: number
   81    | IDENTIFIER
   82    | STRING
   83    | arr_elements
   84    | val "," val

   85 cmp_expr: INTEGER
   86         | FLOAT
   87         | IDENTIFIER
   88         | cmp_expr ">" cmp_expr
   89         | cmp_expr "<" cmp_expr
   90         | cmp_expr "<=" cmp_expr
   91         | cmp_expr ">=" cmp_expr
   92         | cmp_expr "==" cmp_expr
   93         | cmp_expr "!=" cmp_expr
   94         | cmp_expr "||" cmp_expr
   95         | cmp_expr "&&" cmp_expr
   96         | "!" cmp_expr
   97         | cmp_expr ">" ">" arithm_expr
   98         | cmp_expr "<" "<" arithm_expr

   99 merge_arr: arr_elements
  100          | merge_arr "+" merge_arr
  101          | merge_arr TOKEN_ERROR "+" merge_arr
  102          | merge_arr "+" TOKEN_ERROR merge_arr
  103          | merge_arr "++" merge_arr

  104 decl_statements: decl_statement
  105                | decl_statements decl_statement

  106 decl_statement: if_statement
  107               | while_statement
  108               | for_statement
  109               | decl_var ";"
  110               | build_func ";"
  111               | decl_func
  112               | assign ";"
  113               | arithm_expr
  114               | cmp_expr
  115               | merge_arr
  116               | block_statement
  117               | NEWLINE

  118 if_statement: SIF condition decl_statement

  119 condition: cmp_expr
  120          | "(" condition ")"
  121          | "((" condition ")"
  122          | "(" condition "))"
  123          | condition ")"
  124          | "(" condition

  125 block_statement: "{" decl_statements "}"

  126 while_statement: SWHILE condition decl_statement

  127 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement


Terminals, with rules where they appear

    $end (0) 0
    error (256) 2
    IDENTIFIER <sval> (258) 11 13 14 30 31 34 36 39 48 51 58 81 87
    STRING <sval> (259) 23 33 35 38 82
    INTEGER <ival> (260) 13 19 40 53 64 85
    FLOAT <fval> (261) 21 41 54 65 86
    SBREAK <sval> (262)
    SDO <sval> (263)
    SIF <sval> (264) 118
    SSIZEOF <sval> (265)
    SCASE <sval> (266)
    SDOUBLE <sval> (267) 8
    SINT <sval> (268) 6
    SSTRUCT <sval> (269)
    SFUNC <sval> (270) 46 47
    SELSE <sval> (271)
    SLONG <sval> (272) 10
    SSWITCH <sval> (273)
    SCONST <sval> (274)
    SFLOAT <sval> (275) 7
    SRETURN <sval> (276)
    SVOID <sval> (277)
    SCONTINUE <sval> (278)
    SFOR <sval> (279) 127
    SSHORT <sval> (280) 9
    SWHILE <sval> (281) 126
    "+" (282) 55 59 100 101 102
    "*=" (283) 78
    "--" (284) 73 75
    "-" (285) 56 60
    "/=" (286) 79
    "<" (287) 89 98
    "*" (288) 61
    "!" (289) 96
    ">" (290) 88 97
    "/" (291) 62
    "&&" (292) 95
    "<=" (293) 90
    "%" (294) 63
    "||" (295) 94
    ">=" (296) 91
    "=" (297) 67 68 69 70
    "==" (298) 92
    "&" (299)
    "+=" (300) 76
    "!=" (301) 93
    "-=" (302) 77
    "++" (303) 72 74 103
    "(" (304) 26 27 28 29 30 49 50 120 122 124 127
    ")" (305) 26 27 28 29 30 49 50 120 121 123 127
    "[" (306) 13 14 15 16 17 18
    "]" (307) 13 14 15 16 17 18
    "{" (308) 125
    "}" (309) 125
    "," (310) 12 20 22 24 37 44 52 84
    "\\" (311)
    ";" (312) 109 110 112 127
    SSCAN (313) 26
    SPRINT (314) 29
    SLEN (315) 27
    SCMP (316) 28
    NEWLINE (317) 1 2 3 48 117
    TOKEN_ERROR (318) 3 101 102
    "((" (319) 121
    "))" (320) 122


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    program <sval> (67)
        on left: 1 2 3 4
        on right: 0 1 2 3
    decl_var <sval> (68)
        on left: 5
        on right: 109
    type <sval> (69)
        on left: 6 7 8 9 10
        on right: 5 47 51
    var <sval> (70)
        on left: 11 12
        on right: 5 12 67 68 69 70 72 73 74 75 76 77 78 79
    pos_elem <sval> (71)
        on left: 13 14
        on right: 43 66
    arr_elements <sval> (72)
        on left: 15 16 17 18
        on right: 32 83 99
    integ <sval> (73)
        on left: 19 20
        on right: 16 20
    fl <sval> (74)
        on left: 21 22
        on right: 17 22
    str <sval> (75)
        on left: 23 24
        on right: 18 24
    build_func <sval> (76)
        on left: 25
        on right: 110
    func <sval> (77)
        on left: 26 27 28 29 30
        on right: 25 42
    scan_params <sval> (78)
        on left: 31
        on right: 26
    len_params <sval> (79)
        on left: 32 33 34
        on right: 27
    cmp_params <sval> (80)
        on left: 35 36 37
        on right: 28 37
    print_params <sval> (81)
        on left: 38 39 40 41 42 43 44
        on right: 29 30 44
    decl_func <sval> (82)
        on left: 45
        on right: 111
    name_func <sval> (83)
        on left: 46 47 48
        on right: 45 48
    params <sval> (84)
        on left: 49 50
        on right: 48
    type_params <sval> (85)
        on left: 51 52
        on right: 50 52
    sign <sval> (86)
        on left: 53 54 55 56
        on right: 55 56 57
    arithm_expr <sval> (87)
        on left: 57 58 59 60 61 62 63
        on right: 59 60 61 62 63 69 97 98 113
    number <sval> (88)
        on left: 64 65 66
        on right: 76 77 78 79 80
    assign <sval> (89)
        on left: 67 68 69 70 71
        on right: 112 127
    oper_eq <sval> (90)
        on left: 72 73 74 75 76 77 78 79
        on right: 71 127
    val <sval> (91)
        on left: 80 81 82 83 84
        on right: 67 84
    cmp_expr <sval> (92)
        on left: 85 86 87 88 89 90 91 92 93 94 95 96 97 98
        on right: 68 88 89 90 91 92 93 94 95 96 97 98 114 119 127
    merge_arr <sval> (93)
        on left: 99 100 101 102 103
        on right: 3 70 100 101 102 103 115
    decl_statements <sval> (94)
        on left: 104 105
        on right: 1 105 125
    decl_statement <sval> (95)
        on left: 106 107 108 109 110 111 112 113 114 115 116 117
        on right: 45 104 105 118 126 127
    if_statement <sval> (96)
        on left: 118
        on right: 106
    condition <sval> (97)
        on left: 119 120 121 122 123 124
        on right: 118 120 121 122 123 124 126
    block_statement <sval> (98)
        on left: 125
        on right: 116
    while_statement <sval> (99)
        on left: 126
        on right: 107
    for_statement <sval> (100)
        on left: 127
        on right: 108


State 0

    0 $accept: • program $end

    $default  reduce using rule 4 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    1 program: program • decl_statements NEWLINE
    2        | program • error NEWLINE
    3        | program • merge_arr TOKEN_ERROR merge_arr NEWLINE

    $end        shift, and go to state 2
    error       shift, and go to state 3
    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 41
    decl_statements  go to state 42
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 2

    0 $accept: program $end •

    $default  accept


State 3

    2 program: program error • NEWLINE

    NEWLINE  shift, and go to state 48


State 4

   11 var: IDENTIFIER •
   30 func: IDENTIFIER • "(" print_params ")"
   58 arithm_expr: IDENTIFIER •
   87 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 49

    IDENTIFIER  reduce using rule 58 (arithm_expr)
    IDENTIFIER  [reduce using rule 87 (cmp_expr)]
    INTEGER     reduce using rule 58 (arithm_expr)
    INTEGER     [reduce using rule 87 (cmp_expr)]
    FLOAT       reduce using rule 58 (arithm_expr)
    FLOAT       [reduce using rule 87 (cmp_expr)]
    SIF         reduce using rule 58 (arithm_expr)
    SIF         [reduce using rule 87 (cmp_expr)]
    SDOUBLE     reduce using rule 58 (arithm_expr)
    SDOUBLE     [reduce using rule 87 (cmp_expr)]
    SINT        reduce using rule 58 (arithm_expr)
    SINT        [reduce using rule 87 (cmp_expr)]
    SFUNC       reduce using rule 58 (arithm_expr)
    SFUNC       [reduce using rule 87 (cmp_expr)]
    SLONG       reduce using rule 58 (arithm_expr)
    SLONG       [reduce using rule 87 (cmp_expr)]
    SFLOAT      reduce using rule 58 (arithm_expr)
    SFLOAT      [reduce using rule 87 (cmp_expr)]
    SFOR        reduce using rule 58 (arithm_expr)
    SFOR        [reduce using rule 87 (cmp_expr)]
    SSHORT      reduce using rule 58 (arithm_expr)
    SSHORT      [reduce using rule 87 (cmp_expr)]
    SWHILE      reduce using rule 58 (arithm_expr)
    SWHILE      [reduce using rule 87 (cmp_expr)]
    "+"         reduce using rule 58 (arithm_expr)
    "+"         [reduce using rule 87 (cmp_expr)]
    "*="        reduce using rule 11 (var)
    "--"        reduce using rule 11 (var)
    "--"        [reduce using rule 58 (arithm_expr)]
    "--"        [reduce using rule 87 (cmp_expr)]
    "-"         reduce using rule 58 (arithm_expr)
    "-"         [reduce using rule 87 (cmp_expr)]
    "/="        reduce using rule 11 (var)
    "<"         reduce using rule 87 (cmp_expr)
    "!"         reduce using rule 58 (arithm_expr)
    "!"         [reduce using rule 87 (cmp_expr)]
    ">"         reduce using rule 87 (cmp_expr)
    "&&"        reduce using rule 87 (cmp_expr)
    "<="        reduce using rule 87 (cmp_expr)
    "||"        reduce using rule 87 (cmp_expr)
    ">="        reduce using rule 87 (cmp_expr)
    "="         reduce using rule 11 (var)
    "=="        reduce using rule 87 (cmp_expr)
    "+="        reduce using rule 11 (var)
    "!="        reduce using rule 87 (cmp_expr)
    "-="        reduce using rule 11 (var)
    "++"        reduce using rule 11 (var)
    "++"        [reduce using rule 58 (arithm_expr)]
    "++"        [reduce using rule 87 (cmp_expr)]
    "["         reduce using rule 58 (arithm_expr)
    "["         [reduce using rule 87 (cmp_expr)]
    "{"         reduce using rule 58 (arithm_expr)
    "{"         [reduce using rule 87 (cmp_expr)]
    "}"         reduce using rule 58 (arithm_expr)
    "}"         [reduce using rule 87 (cmp_expr)]
    ","         reduce using rule 11 (var)
    SSCAN       reduce using rule 58 (arithm_expr)
    SSCAN       [reduce using rule 87 (cmp_expr)]
    SPRINT      reduce using rule 58 (arithm_expr)
    SPRINT      [reduce using rule 87 (cmp_expr)]
    SLEN        reduce using rule 58 (arithm_expr)
    SLEN        [reduce using rule 87 (cmp_expr)]
    SCMP        reduce using rule 58 (arithm_expr)
    SCMP        [reduce using rule 87 (cmp_expr)]
    NEWLINE     reduce using rule 58 (arithm_expr)
    NEWLINE     [reduce using rule 87 (cmp_expr)]
    $default    reduce using rule 58 (arithm_expr)


State 5

   53 sign: INTEGER •
   85 cmp_expr: INTEGER •

    IDENTIFIER  reduce using rule 53 (sign)
    IDENTIFIER  [reduce using rule 85 (cmp_expr)]
    INTEGER     reduce using rule 53 (sign)
    INTEGER     [reduce using rule 85 (cmp_expr)]
    FLOAT       reduce using rule 53 (sign)
    FLOAT       [reduce using rule 85 (cmp_expr)]
    SIF         reduce using rule 53 (sign)
    SIF         [reduce using rule 85 (cmp_expr)]
    SDOUBLE     reduce using rule 53 (sign)
    SDOUBLE     [reduce using rule 85 (cmp_expr)]
    SINT        reduce using rule 53 (sign)
    SINT        [reduce using rule 85 (cmp_expr)]
    SFUNC       reduce using rule 53 (sign)
    SFUNC       [reduce using rule 85 (cmp_expr)]
    SLONG       reduce using rule 53 (sign)
    SLONG       [reduce using rule 85 (cmp_expr)]
    SFLOAT      reduce using rule 53 (sign)
    SFLOAT      [reduce using rule 85 (cmp_expr)]
    SFOR        reduce using rule 53 (sign)
    SFOR        [reduce using rule 85 (cmp_expr)]
    SSHORT      reduce using rule 53 (sign)
    SSHORT      [reduce using rule 85 (cmp_expr)]
    SWHILE      reduce using rule 53 (sign)
    SWHILE      [reduce using rule 85 (cmp_expr)]
    "+"         reduce using rule 53 (sign)
    "+"         [reduce using rule 85 (cmp_expr)]
    "--"        reduce using rule 53 (sign)
    "--"        [reduce using rule 85 (cmp_expr)]
    "-"         reduce using rule 53 (sign)
    "-"         [reduce using rule 85 (cmp_expr)]
    "<"         reduce using rule 85 (cmp_expr)
    "!"         reduce using rule 53 (sign)
    "!"         [reduce using rule 85 (cmp_expr)]
    ">"         reduce using rule 85 (cmp_expr)
    "&&"        reduce using rule 85 (cmp_expr)
    "<="        reduce using rule 85 (cmp_expr)
    "||"        reduce using rule 85 (cmp_expr)
    ">="        reduce using rule 85 (cmp_expr)
    "=="        reduce using rule 85 (cmp_expr)
    "!="        reduce using rule 85 (cmp_expr)
    "++"        reduce using rule 53 (sign)
    "++"        [reduce using rule 85 (cmp_expr)]
    "["         reduce using rule 53 (sign)
    "["         [reduce using rule 85 (cmp_expr)]
    "{"         reduce using rule 53 (sign)
    "{"         [reduce using rule 85 (cmp_expr)]
    "}"         reduce using rule 53 (sign)
    "}"         [reduce using rule 85 (cmp_expr)]
    SSCAN       reduce using rule 53 (sign)
    SSCAN       [reduce using rule 85 (cmp_expr)]
    SPRINT      reduce using rule 53 (sign)
    SPRINT      [reduce using rule 85 (cmp_expr)]
    SLEN        reduce using rule 53 (sign)
    SLEN        [reduce using rule 85 (cmp_expr)]
    SCMP        reduce using rule 53 (sign)
    SCMP        [reduce using rule 85 (cmp_expr)]
    NEWLINE     reduce using rule 53 (sign)
    NEWLINE     [reduce using rule 85 (cmp_expr)]
    $default    reduce using rule 53 (sign)


State 6

   54 sign: FLOAT •
   86 cmp_expr: FLOAT •

    IDENTIFIER  reduce using rule 54 (sign)
    IDENTIFIER  [reduce using rule 86 (cmp_expr)]
    INTEGER     reduce using rule 54 (sign)
    INTEGER     [reduce using rule 86 (cmp_expr)]
    FLOAT       reduce using rule 54 (sign)
    FLOAT       [reduce using rule 86 (cmp_expr)]
    SIF         reduce using rule 54 (sign)
    SIF         [reduce using rule 86 (cmp_expr)]
    SDOUBLE     reduce using rule 54 (sign)
    SDOUBLE     [reduce using rule 86 (cmp_expr)]
    SINT        reduce using rule 54 (sign)
    SINT        [reduce using rule 86 (cmp_expr)]
    SFUNC       reduce using rule 54 (sign)
    SFUNC       [reduce using rule 86 (cmp_expr)]
    SLONG       reduce using rule 54 (sign)
    SLONG       [reduce using rule 86 (cmp_expr)]
    SFLOAT      reduce using rule 54 (sign)
    SFLOAT      [reduce using rule 86 (cmp_expr)]
    SFOR        reduce using rule 54 (sign)
    SFOR        [reduce using rule 86 (cmp_expr)]
    SSHORT      reduce using rule 54 (sign)
    SSHORT      [reduce using rule 86 (cmp_expr)]
    SWHILE      reduce using rule 54 (sign)
    SWHILE      [reduce using rule 86 (cmp_expr)]
    "+"         reduce using rule 54 (sign)
    "+"         [reduce using rule 86 (cmp_expr)]
    "--"        reduce using rule 54 (sign)
    "--"        [reduce using rule 86 (cmp_expr)]
    "-"         reduce using rule 54 (sign)
    "-"         [reduce using rule 86 (cmp_expr)]
    "<"         reduce using rule 86 (cmp_expr)
    "!"         reduce using rule 54 (sign)
    "!"         [reduce using rule 86 (cmp_expr)]
    ">"         reduce using rule 86 (cmp_expr)
    "&&"        reduce using rule 86 (cmp_expr)
    "<="        reduce using rule 86 (cmp_expr)
    "||"        reduce using rule 86 (cmp_expr)
    ">="        reduce using rule 86 (cmp_expr)
    "=="        reduce using rule 86 (cmp_expr)
    "!="        reduce using rule 86 (cmp_expr)
    "++"        reduce using rule 54 (sign)
    "++"        [reduce using rule 86 (cmp_expr)]
    "["         reduce using rule 54 (sign)
    "["         [reduce using rule 86 (cmp_expr)]
    "{"         reduce using rule 54 (sign)
    "{"         [reduce using rule 86 (cmp_expr)]
    "}"         reduce using rule 54 (sign)
    "}"         [reduce using rule 86 (cmp_expr)]
    SSCAN       reduce using rule 54 (sign)
    SSCAN       [reduce using rule 86 (cmp_expr)]
    SPRINT      reduce using rule 54 (sign)
    SPRINT      [reduce using rule 86 (cmp_expr)]
    SLEN        reduce using rule 54 (sign)
    SLEN        [reduce using rule 86 (cmp_expr)]
    SCMP        reduce using rule 54 (sign)
    SCMP        [reduce using rule 86 (cmp_expr)]
    NEWLINE     reduce using rule 54 (sign)
    NEWLINE     [reduce using rule 86 (cmp_expr)]
    $default    reduce using rule 54 (sign)


State 7

  118 if_statement: SIF • condition decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53
    "(("        shift, and go to state 54

    cmp_expr   go to state 55
    condition  go to state 56


State 8

    8 type: SDOUBLE •

    $default  reduce using rule 8 (type)


State 9

    6 type: SINT •

    $default  reduce using rule 6 (type)


State 10

   46 name_func: SFUNC •
   47          | SFUNC • type

    SDOUBLE  shift, and go to state 8
    SINT     shift, and go to state 9
    SLONG    shift, and go to state 11
    SFLOAT   shift, and go to state 12
    SSHORT   shift, and go to state 14

    SDOUBLE   [reduce using rule 46 (name_func)]
    SINT      [reduce using rule 46 (name_func)]
    SLONG     [reduce using rule 46 (name_func)]
    SFLOAT    [reduce using rule 46 (name_func)]
    SSHORT    [reduce using rule 46 (name_func)]
    $default  reduce using rule 46 (name_func)

    type  go to state 57


State 11

   10 type: SLONG •

    $default  reduce using rule 10 (type)


State 12

    7 type: SFLOAT •

    $default  reduce using rule 7 (type)


State 13

  127 for_statement: SFOR • "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement

    "("  shift, and go to state 58


State 14

    9 type: SSHORT •

    $default  reduce using rule 9 (type)


State 15

  126 while_statement: SWHILE • condition decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53
    "(("        shift, and go to state 54

    cmp_expr   go to state 55
    condition  go to state 59


State 16

   55 sign: "+" • sign

    INTEGER  shift, and go to state 60
    FLOAT    shift, and go to state 61
    "+"      shift, and go to state 16
    "-"      shift, and go to state 18

    sign  go to state 62


State 17

   75 oper_eq: "--" • var

    IDENTIFIER  shift, and go to state 63

    var  go to state 64


State 18

   56 sign: "-" • sign

    INTEGER  shift, and go to state 60
    FLOAT    shift, and go to state 61
    "+"      shift, and go to state 16
    "-"      shift, and go to state 18

    sign  go to state 65


State 19

   96 cmp_expr: "!" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 66


State 20

   74 oper_eq: "++" • var

    IDENTIFIER  shift, and go to state 63

    var  go to state 67


State 21

   15 arr_elements: "[" • "]"
   16             | "[" • integ "]"
   17             | "[" • fl "]"
   18             | "[" • str "]"

    STRING   shift, and go to state 68
    INTEGER  shift, and go to state 69
    FLOAT    shift, and go to state 70
    "]"      shift, and go to state 71

    integ  go to state 72
    fl     go to state 73
    str    go to state 74


State 22

  125 block_statement: "{" • decl_statements "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 75
    decl_statements  go to state 76
    decl_statement   go to state 43
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 23

   26 func: SSCAN • "(" scan_params ")"

    "("  shift, and go to state 77


State 24

   29 func: SPRINT • "(" print_params ")"

    "("  shift, and go to state 78


State 25

   27 func: SLEN • "(" len_params ")"

    "("  shift, and go to state 79


State 26

   28 func: SCMP • "(" cmp_params ")"

    "("  shift, and go to state 80


State 27

  117 decl_statement: NEWLINE •

    $default  reduce using rule 117 (decl_statement)


State 28

  109 decl_statement: decl_var • ";"

    ";"  shift, and go to state 81


State 29

    5 decl_var: type • var

    IDENTIFIER  shift, and go to state 63

    var  go to state 82


State 30

   12 var: var • "," var
   67 assign: var • "=" val
   68       | var • "=" cmp_expr
   69       | var • "=" arithm_expr
   70       | var • "=" merge_arr
   72 oper_eq: var • "++"
   73        | var • "--"
   76        | var • "+=" number
   77        | var • "-=" number
   78        | var • "*=" number
   79        | var • "/=" number

    "*="  shift, and go to state 83
    "--"  shift, and go to state 84
    "/="  shift, and go to state 85
    "="   shift, and go to state 86
    "+="  shift, and go to state 87
    "-="  shift, and go to state 88
    "++"  shift, and go to state 89
    ","   shift, and go to state 90


State 31

   99 merge_arr: arr_elements •

    $default  reduce using rule 99 (merge_arr)


State 32

  110 decl_statement: build_func • ";"

    ";"  shift, and go to state 91


State 33

   25 build_func: func •

    $default  reduce using rule 25 (build_func)


State 34

  111 decl_statement: decl_func •

    $default  reduce using rule 111 (decl_statement)


State 35

   45 decl_func: name_func • decl_statement
   48 name_func: name_func • IDENTIFIER params NEWLINE

    IDENTIFIER  shift, and go to state 92
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 75
    decl_statement   go to state 93
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 36

   57 arithm_expr: sign •

    $default  reduce using rule 57 (arithm_expr)


State 37

   59 arithm_expr: arithm_expr • "+" arithm_expr
   60            | arithm_expr • "-" arithm_expr
   61            | arithm_expr • "*" arithm_expr
   62            | arithm_expr • "/" arithm_expr
   63            | arithm_expr • "%" arithm_expr
  113 decl_statement: arithm_expr •

    "+"  shift, and go to state 94
    "-"  shift, and go to state 95
    "*"  shift, and go to state 96
    "/"  shift, and go to state 97
    "%"  shift, and go to state 98

    "+"       [reduce using rule 113 (decl_statement)]
    "-"       [reduce using rule 113 (decl_statement)]
    $default  reduce using rule 113 (decl_statement)


State 38

  112 decl_statement: assign • ";"

    ";"  shift, and go to state 99


State 39

   71 assign: oper_eq •

    $default  reduce using rule 71 (assign)


State 40

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr
  114 decl_statement: cmp_expr •

    "<"   shift, and go to state 100
    ">"   shift, and go to state 101
    "&&"  shift, and go to state 102
    "<="  shift, and go to state 103
    "||"  shift, and go to state 104
    ">="  shift, and go to state 105
    "=="  shift, and go to state 106
    "!="  shift, and go to state 107

    $default  reduce using rule 114 (decl_statement)


State 41

    3 program: program merge_arr • TOKEN_ERROR merge_arr NEWLINE
  100 merge_arr: merge_arr • "+" merge_arr
  101          | merge_arr • TOKEN_ERROR "+" merge_arr
  102          | merge_arr • "+" TOKEN_ERROR merge_arr
  103          | merge_arr • "++" merge_arr
  115 decl_statement: merge_arr •

    "+"          shift, and go to state 108
    "++"         shift, and go to state 109
    TOKEN_ERROR  shift, and go to state 110

    "+"       [reduce using rule 115 (decl_statement)]
    "++"      [reduce using rule 115 (decl_statement)]
    $default  reduce using rule 115 (decl_statement)


State 42

    1 program: program decl_statements • NEWLINE
  105 decl_statements: decl_statements • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 111

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 75
    decl_statement   go to state 112
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 43

  104 decl_statements: decl_statement •

    $default  reduce using rule 104 (decl_statements)


State 44

  106 decl_statement: if_statement •

    $default  reduce using rule 106 (decl_statement)


State 45

  116 decl_statement: block_statement •

    $default  reduce using rule 116 (decl_statement)


State 46

  107 decl_statement: while_statement •

    $default  reduce using rule 107 (decl_statement)


State 47

  108 decl_statement: for_statement •

    $default  reduce using rule 108 (decl_statement)


State 48

    2 program: program error NEWLINE •

    $default  reduce using rule 2 (program)


State 49

   30 func: IDENTIFIER "(" • print_params ")"

    IDENTIFIER  shift, and go to state 113
    STRING      shift, and go to state 114
    INTEGER     shift, and go to state 115
    FLOAT       shift, and go to state 116
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 117
    func          go to state 118
    print_params  go to state 119


State 50

   87 cmp_expr: IDENTIFIER •

    $default  reduce using rule 87 (cmp_expr)


State 51

   85 cmp_expr: INTEGER •

    $default  reduce using rule 85 (cmp_expr)


State 52

   86 cmp_expr: FLOAT •

    $default  reduce using rule 86 (cmp_expr)


State 53

  120 condition: "(" • condition ")"
  122          | "(" • condition "))"
  124          | "(" • condition

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53
    "(("        shift, and go to state 54

    cmp_expr   go to state 55
    condition  go to state 120


State 54

  121 condition: "((" • condition ")"

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    "("         shift, and go to state 53
    "(("        shift, and go to state 54

    cmp_expr   go to state 55
    condition  go to state 121


State 55

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr
  119 condition: cmp_expr •

    "<"   shift, and go to state 100
    ">"   shift, and go to state 101
    "&&"  shift, and go to state 102
    "<="  shift, and go to state 103
    "||"  shift, and go to state 104
    ">="  shift, and go to state 105
    "=="  shift, and go to state 106
    "!="  shift, and go to state 107

    $default  reduce using rule 119 (condition)


State 56

  118 if_statement: SIF condition • decl_statement
  123 condition: condition • ")"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    ")"         shift, and go to state 122
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 75
    decl_statement   go to state 123
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 57

   47 name_func: SFUNC type •

    $default  reduce using rule 47 (name_func)


State 58

  127 for_statement: SFOR "(" • assign ";" cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 63
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20

    var      go to state 30
    assign   go to state 124
    oper_eq  go to state 39


State 59

  123 condition: condition • ")"
  126 while_statement: SWHILE condition • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    ")"         shift, and go to state 122
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 75
    decl_statement   go to state 125
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 60

   53 sign: INTEGER •

    $default  reduce using rule 53 (sign)


State 61

   54 sign: FLOAT •

    $default  reduce using rule 54 (sign)


State 62

   55 sign: "+" sign •

    $default  reduce using rule 55 (sign)


State 63

   11 var: IDENTIFIER •

    $default  reduce using rule 11 (var)


State 64

   12 var: var • "," var
   75 oper_eq: "--" var •

    ","  shift, and go to state 90

    $default  reduce using rule 75 (oper_eq)


State 65

   56 sign: "-" sign •

    $default  reduce using rule 56 (sign)


State 66

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   96         | "!" cmp_expr •
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 96 (cmp_expr)


State 67

   12 var: var • "," var
   74 oper_eq: "++" var •

    ","  shift, and go to state 90

    $default  reduce using rule 74 (oper_eq)


State 68

   23 str: STRING •

    $default  reduce using rule 23 (str)


State 69

   19 integ: INTEGER •

    $default  reduce using rule 19 (integ)


State 70

   21 fl: FLOAT •

    $default  reduce using rule 21 (fl)


State 71

   15 arr_elements: "[" "]" •

    $default  reduce using rule 15 (arr_elements)


State 72

   16 arr_elements: "[" integ • "]"
   20 integ: integ • "," integ

    "]"  shift, and go to state 126
    ","  shift, and go to state 127


State 73

   17 arr_elements: "[" fl • "]"
   22 fl: fl • "," fl

    "]"  shift, and go to state 128
    ","  shift, and go to state 129


State 74

   18 arr_elements: "[" str • "]"
   24 str: str • "," str

    "]"  shift, and go to state 130
    ","  shift, and go to state 131


State 75

  100 merge_arr: merge_arr • "+" merge_arr
  101          | merge_arr • TOKEN_ERROR "+" merge_arr
  102          | merge_arr • "+" TOKEN_ERROR merge_arr
  103          | merge_arr • "++" merge_arr
  115 decl_statement: merge_arr •

    "+"          shift, and go to state 108
    "++"         shift, and go to state 109
    TOKEN_ERROR  shift, and go to state 132

    "+"       [reduce using rule 115 (decl_statement)]
    "++"      [reduce using rule 115 (decl_statement)]
    $default  reduce using rule 115 (decl_statement)


State 76

  105 decl_statements: decl_statements • decl_statement
  125 block_statement: "{" decl_statements • "}"

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    "}"         shift, and go to state 133
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 75
    decl_statement   go to state 112
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 77

   26 func: SSCAN "(" • scan_params ")"

    IDENTIFIER  shift, and go to state 134

    scan_params  go to state 135


State 78

   29 func: SPRINT "(" • print_params ")"

    IDENTIFIER  shift, and go to state 113
    STRING      shift, and go to state 114
    INTEGER     shift, and go to state 115
    FLOAT       shift, and go to state 116
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 117
    func          go to state 118
    print_params  go to state 136


State 79

   27 func: SLEN "(" • len_params ")"

    IDENTIFIER  shift, and go to state 137
    STRING      shift, and go to state 138
    "["         shift, and go to state 21

    arr_elements  go to state 139
    len_params    go to state 140


State 80

   28 func: SCMP "(" • cmp_params ")"

    IDENTIFIER  shift, and go to state 141
    STRING      shift, and go to state 142

    cmp_params  go to state 143


State 81

  109 decl_statement: decl_var ";" •

    $default  reduce using rule 109 (decl_statement)


State 82

    5 decl_var: type var •
   12 var: var • "," var

    ","  shift, and go to state 90

    $default  reduce using rule 5 (decl_var)


State 83

   78 oper_eq: var "*=" • number

    IDENTIFIER  shift, and go to state 144
    INTEGER     shift, and go to state 145
    FLOAT       shift, and go to state 146

    pos_elem  go to state 147
    number    go to state 148


State 84

   73 oper_eq: var "--" •

    $default  reduce using rule 73 (oper_eq)


State 85

   79 oper_eq: var "/=" • number

    IDENTIFIER  shift, and go to state 144
    INTEGER     shift, and go to state 145
    FLOAT       shift, and go to state 146

    pos_elem  go to state 147
    number    go to state 149


State 86

   67 assign: var "=" • val
   68       | var "=" • cmp_expr
   69       | var "=" • arithm_expr
   70       | var "=" • merge_arr

    IDENTIFIER  shift, and go to state 150
    STRING      shift, and go to state 151
    INTEGER     shift, and go to state 152
    FLOAT       shift, and go to state 153
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "["         shift, and go to state 21

    pos_elem      go to state 147
    arr_elements  go to state 154
    sign          go to state 36
    arithm_expr   go to state 155
    number        go to state 156
    val           go to state 157
    cmp_expr      go to state 158
    merge_arr     go to state 159


State 87

   76 oper_eq: var "+=" • number

    IDENTIFIER  shift, and go to state 144
    INTEGER     shift, and go to state 145
    FLOAT       shift, and go to state 146

    pos_elem  go to state 147
    number    go to state 160


State 88

   77 oper_eq: var "-=" • number

    IDENTIFIER  shift, and go to state 144
    INTEGER     shift, and go to state 145
    FLOAT       shift, and go to state 146

    pos_elem  go to state 147
    number    go to state 161


State 89

   72 oper_eq: var "++" •

    $default  reduce using rule 72 (oper_eq)


State 90

   12 var: var "," • var

    IDENTIFIER  shift, and go to state 63

    var  go to state 162


State 91

  110 decl_statement: build_func ";" •

    $default  reduce using rule 110 (decl_statement)


State 92

   11 var: IDENTIFIER •
   30 func: IDENTIFIER • "(" print_params ")"
   48 name_func: name_func IDENTIFIER • params NEWLINE
   58 arithm_expr: IDENTIFIER •
   87 cmp_expr: IDENTIFIER •

    "("  shift, and go to state 163

    IDENTIFIER  reduce using rule 58 (arithm_expr)
    IDENTIFIER  [reduce using rule 87 (cmp_expr)]
    INTEGER     reduce using rule 58 (arithm_expr)
    INTEGER     [reduce using rule 87 (cmp_expr)]
    FLOAT       reduce using rule 58 (arithm_expr)
    FLOAT       [reduce using rule 87 (cmp_expr)]
    SIF         reduce using rule 58 (arithm_expr)
    SIF         [reduce using rule 87 (cmp_expr)]
    SDOUBLE     reduce using rule 58 (arithm_expr)
    SDOUBLE     [reduce using rule 87 (cmp_expr)]
    SINT        reduce using rule 58 (arithm_expr)
    SINT        [reduce using rule 87 (cmp_expr)]
    SFUNC       reduce using rule 58 (arithm_expr)
    SFUNC       [reduce using rule 87 (cmp_expr)]
    SLONG       reduce using rule 58 (arithm_expr)
    SLONG       [reduce using rule 87 (cmp_expr)]
    SFLOAT      reduce using rule 58 (arithm_expr)
    SFLOAT      [reduce using rule 87 (cmp_expr)]
    SFOR        reduce using rule 58 (arithm_expr)
    SFOR        [reduce using rule 87 (cmp_expr)]
    SSHORT      reduce using rule 58 (arithm_expr)
    SSHORT      [reduce using rule 87 (cmp_expr)]
    SWHILE      reduce using rule 58 (arithm_expr)
    SWHILE      [reduce using rule 87 (cmp_expr)]
    "+"         reduce using rule 58 (arithm_expr)
    "+"         [reduce using rule 87 (cmp_expr)]
    "*="        reduce using rule 11 (var)
    "--"        reduce using rule 11 (var)
    "--"        [reduce using rule 58 (arithm_expr)]
    "--"        [reduce using rule 87 (cmp_expr)]
    "-"         reduce using rule 58 (arithm_expr)
    "-"         [reduce using rule 87 (cmp_expr)]
    "/="        reduce using rule 11 (var)
    "<"         reduce using rule 87 (cmp_expr)
    "!"         reduce using rule 58 (arithm_expr)
    "!"         [reduce using rule 87 (cmp_expr)]
    ">"         reduce using rule 87 (cmp_expr)
    "&&"        reduce using rule 87 (cmp_expr)
    "<="        reduce using rule 87 (cmp_expr)
    "||"        reduce using rule 87 (cmp_expr)
    ">="        reduce using rule 87 (cmp_expr)
    "="         reduce using rule 11 (var)
    "=="        reduce using rule 87 (cmp_expr)
    "+="        reduce using rule 11 (var)
    "!="        reduce using rule 87 (cmp_expr)
    "-="        reduce using rule 11 (var)
    "++"        reduce using rule 11 (var)
    "++"        [reduce using rule 58 (arithm_expr)]
    "++"        [reduce using rule 87 (cmp_expr)]
    "["         reduce using rule 58 (arithm_expr)
    "["         [reduce using rule 87 (cmp_expr)]
    "{"         reduce using rule 58 (arithm_expr)
    "{"         [reduce using rule 87 (cmp_expr)]
    "}"         reduce using rule 58 (arithm_expr)
    "}"         [reduce using rule 87 (cmp_expr)]
    ","         reduce using rule 11 (var)
    SSCAN       reduce using rule 58 (arithm_expr)
    SSCAN       [reduce using rule 87 (cmp_expr)]
    SPRINT      reduce using rule 58 (arithm_expr)
    SPRINT      [reduce using rule 87 (cmp_expr)]
    SLEN        reduce using rule 58 (arithm_expr)
    SLEN        [reduce using rule 87 (cmp_expr)]
    SCMP        reduce using rule 58 (arithm_expr)
    SCMP        [reduce using rule 87 (cmp_expr)]
    NEWLINE     reduce using rule 58 (arithm_expr)
    NEWLINE     [reduce using rule 87 (cmp_expr)]
    $default    reduce using rule 58 (arithm_expr)

    params  go to state 164


State 93

   45 decl_func: name_func decl_statement •

    $default  reduce using rule 45 (decl_func)


State 94

   59 arithm_expr: arithm_expr "+" • arithm_expr

    IDENTIFIER  shift, and go to state 165
    INTEGER     shift, and go to state 60
    FLOAT       shift, and go to state 61
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 166


State 95

   60 arithm_expr: arithm_expr "-" • arithm_expr

    IDENTIFIER  shift, and go to state 165
    INTEGER     shift, and go to state 60
    FLOAT       shift, and go to state 61
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 167


State 96

   61 arithm_expr: arithm_expr "*" • arithm_expr

    IDENTIFIER  shift, and go to state 165
    INTEGER     shift, and go to state 60
    FLOAT       shift, and go to state 61
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 168


State 97

   62 arithm_expr: arithm_expr "/" • arithm_expr

    IDENTIFIER  shift, and go to state 165
    INTEGER     shift, and go to state 60
    FLOAT       shift, and go to state 61
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 169


State 98

   63 arithm_expr: arithm_expr "%" • arithm_expr

    IDENTIFIER  shift, and go to state 165
    INTEGER     shift, and go to state 60
    FLOAT       shift, and go to state 61
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 170


State 99

  112 decl_statement: assign ";" •

    $default  reduce using rule 112 (decl_statement)


State 100

   89 cmp_expr: cmp_expr "<" • cmp_expr
   98         | cmp_expr "<" • "<" arithm_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "<"         shift, and go to state 171
    "!"         shift, and go to state 19

    cmp_expr  go to state 172


State 101

   88 cmp_expr: cmp_expr ">" • cmp_expr
   97         | cmp_expr ">" • ">" arithm_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19
    ">"         shift, and go to state 173

    cmp_expr  go to state 174


State 102

   95 cmp_expr: cmp_expr "&&" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 175


State 103

   90 cmp_expr: cmp_expr "<=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 176


State 104

   94 cmp_expr: cmp_expr "||" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 177


State 105

   91 cmp_expr: cmp_expr ">=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 178


State 106

   92 cmp_expr: cmp_expr "==" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 179


State 107

   93 cmp_expr: cmp_expr "!=" • cmp_expr

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 180


State 108

  100 merge_arr: merge_arr "+" • merge_arr
  102          | merge_arr "+" • TOKEN_ERROR merge_arr

    "["          shift, and go to state 21
    TOKEN_ERROR  shift, and go to state 181

    arr_elements  go to state 31
    merge_arr     go to state 182


State 109

  103 merge_arr: merge_arr "++" • merge_arr

    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 183


State 110

    3 program: program merge_arr TOKEN_ERROR • merge_arr NEWLINE
  101 merge_arr: merge_arr TOKEN_ERROR • "+" merge_arr

    "+"  shift, and go to state 184
    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 185


State 111

    1 program: program decl_statements NEWLINE •
  117 decl_statement: NEWLINE •

    IDENTIFIER  reduce using rule 1 (program)
    IDENTIFIER  [reduce using rule 117 (decl_statement)]
    INTEGER     reduce using rule 1 (program)
    INTEGER     [reduce using rule 117 (decl_statement)]
    FLOAT       reduce using rule 1 (program)
    FLOAT       [reduce using rule 117 (decl_statement)]
    SIF         reduce using rule 1 (program)
    SIF         [reduce using rule 117 (decl_statement)]
    SDOUBLE     reduce using rule 1 (program)
    SDOUBLE     [reduce using rule 117 (decl_statement)]
    SINT        reduce using rule 1 (program)
    SINT        [reduce using rule 117 (decl_statement)]
    SFUNC       reduce using rule 1 (program)
    SFUNC       [reduce using rule 117 (decl_statement)]
    SLONG       reduce using rule 1 (program)
    SLONG       [reduce using rule 117 (decl_statement)]
    SFLOAT      reduce using rule 1 (program)
    SFLOAT      [reduce using rule 117 (decl_statement)]
    SFOR        reduce using rule 1 (program)
    SFOR        [reduce using rule 117 (decl_statement)]
    SSHORT      reduce using rule 1 (program)
    SSHORT      [reduce using rule 117 (decl_statement)]
    SWHILE      reduce using rule 1 (program)
    SWHILE      [reduce using rule 117 (decl_statement)]
    "+"         reduce using rule 1 (program)
    "+"         [reduce using rule 117 (decl_statement)]
    "--"        reduce using rule 1 (program)
    "--"        [reduce using rule 117 (decl_statement)]
    "-"         reduce using rule 1 (program)
    "-"         [reduce using rule 117 (decl_statement)]
    "!"         reduce using rule 1 (program)
    "!"         [reduce using rule 117 (decl_statement)]
    "++"        reduce using rule 1 (program)
    "++"        [reduce using rule 117 (decl_statement)]
    "["         reduce using rule 1 (program)
    "["         [reduce using rule 117 (decl_statement)]
    "{"         reduce using rule 1 (program)
    "{"         [reduce using rule 117 (decl_statement)]
    SSCAN       reduce using rule 1 (program)
    SSCAN       [reduce using rule 117 (decl_statement)]
    SPRINT      reduce using rule 1 (program)
    SPRINT      [reduce using rule 117 (decl_statement)]
    SLEN        reduce using rule 1 (program)
    SLEN        [reduce using rule 117 (decl_statement)]
    SCMP        reduce using rule 1 (program)
    SCMP        [reduce using rule 117 (decl_statement)]
    NEWLINE     reduce using rule 1 (program)
    NEWLINE     [reduce using rule 117 (decl_statement)]
    $default    reduce using rule 1 (program)


State 112

  105 decl_statements: decl_statements decl_statement •

    $default  reduce using rule 105 (decl_statements)


State 113

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   30 func: IDENTIFIER • "(" print_params ")"
   39 print_params: IDENTIFIER •

    "("  shift, and go to state 49
    "["  shift, and go to state 186

    $default  reduce using rule 39 (print_params)


State 114

   38 print_params: STRING •

    $default  reduce using rule 38 (print_params)


State 115

   40 print_params: INTEGER •

    $default  reduce using rule 40 (print_params)


State 116

   41 print_params: FLOAT •

    $default  reduce using rule 41 (print_params)


State 117

   43 print_params: pos_elem •

    $default  reduce using rule 43 (print_params)


State 118

   42 print_params: func •

    $default  reduce using rule 42 (print_params)


State 119

   30 func: IDENTIFIER "(" print_params • ")"
   44 print_params: print_params • "," print_params

    ")"  shift, and go to state 187
    ","  shift, and go to state 188


State 120

  120 condition: "(" condition • ")"
  122          | "(" condition • "))"
  123          | condition • ")"
  124          | "(" condition •

    ")"   shift, and go to state 189
    "))"  shift, and go to state 190

    ")"       [reduce using rule 124 (condition)]
    "))"      [reduce using rule 124 (condition)]
    $default  reduce using rule 124 (condition)


State 121

  121 condition: "((" condition • ")"
  123          | condition • ")"

    ")"  shift, and go to state 191


State 122

  123 condition: condition ")" •

    $default  reduce using rule 123 (condition)


State 123

  118 if_statement: SIF condition decl_statement •

    $default  reduce using rule 118 (if_statement)


State 124

  127 for_statement: SFOR "(" assign • ";" cmp_expr ";" oper_eq ")" decl_statement

    ";"  shift, and go to state 192


State 125

  126 while_statement: SWHILE condition decl_statement •

    $default  reduce using rule 126 (while_statement)


State 126

   16 arr_elements: "[" integ "]" •

    $default  reduce using rule 16 (arr_elements)


State 127

   20 integ: integ "," • integ

    INTEGER  shift, and go to state 69

    integ  go to state 193


State 128

   17 arr_elements: "[" fl "]" •

    $default  reduce using rule 17 (arr_elements)


State 129

   22 fl: fl "," • fl

    FLOAT  shift, and go to state 70

    fl  go to state 194


State 130

   18 arr_elements: "[" str "]" •

    $default  reduce using rule 18 (arr_elements)


State 131

   24 str: str "," • str

    STRING  shift, and go to state 68

    str  go to state 195


State 132

  101 merge_arr: merge_arr TOKEN_ERROR • "+" merge_arr

    "+"  shift, and go to state 184


State 133

  125 block_statement: "{" decl_statements "}" •

    $default  reduce using rule 125 (block_statement)


State 134

   31 scan_params: IDENTIFIER •

    $default  reduce using rule 31 (scan_params)


State 135

   26 func: SSCAN "(" scan_params • ")"

    ")"  shift, and go to state 196


State 136

   29 func: SPRINT "(" print_params • ")"
   44 print_params: print_params • "," print_params

    ")"  shift, and go to state 197
    ","  shift, and go to state 188


State 137

   34 len_params: IDENTIFIER •

    $default  reduce using rule 34 (len_params)


State 138

   33 len_params: STRING •

    $default  reduce using rule 33 (len_params)


State 139

   32 len_params: arr_elements •

    $default  reduce using rule 32 (len_params)


State 140

   27 func: SLEN "(" len_params • ")"

    ")"  shift, and go to state 198


State 141

   36 cmp_params: IDENTIFIER •

    $default  reduce using rule 36 (cmp_params)


State 142

   35 cmp_params: STRING •

    $default  reduce using rule 35 (cmp_params)


State 143

   28 func: SCMP "(" cmp_params • ")"
   37 cmp_params: cmp_params • "," cmp_params

    ")"  shift, and go to state 199
    ","  shift, and go to state 200


State 144

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"

    "["  shift, and go to state 186


State 145

   64 number: INTEGER •

    $default  reduce using rule 64 (number)


State 146

   65 number: FLOAT •

    $default  reduce using rule 65 (number)


State 147

   66 number: pos_elem •

    $default  reduce using rule 66 (number)


State 148

   78 oper_eq: var "*=" number •

    $default  reduce using rule 78 (oper_eq)


State 149

   79 oper_eq: var "/=" number •

    $default  reduce using rule 79 (oper_eq)


State 150

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   58 arithm_expr: IDENTIFIER •
   81 val: IDENTIFIER •
   87 cmp_expr: IDENTIFIER •

    "["  shift, and go to state 186

    "+"       reduce using rule 58 (arithm_expr)
    "-"       reduce using rule 58 (arithm_expr)
    "*"       reduce using rule 58 (arithm_expr)
    "/"       reduce using rule 58 (arithm_expr)
    "%"       reduce using rule 58 (arithm_expr)
    ","       reduce using rule 81 (val)
    ";"       reduce using rule 58 (arithm_expr)
    ";"       [reduce using rule 81 (val)]
    ";"       [reduce using rule 87 (cmp_expr)]
    $default  reduce using rule 87 (cmp_expr)


State 151

   82 val: STRING •

    $default  reduce using rule 82 (val)


State 152

   53 sign: INTEGER •
   64 number: INTEGER •
   85 cmp_expr: INTEGER •

    "+"       reduce using rule 53 (sign)
    "-"       reduce using rule 53 (sign)
    "*"       reduce using rule 53 (sign)
    "/"       reduce using rule 53 (sign)
    "%"       reduce using rule 53 (sign)
    ","       reduce using rule 64 (number)
    ";"       reduce using rule 53 (sign)
    ";"       [reduce using rule 64 (number)]
    ";"       [reduce using rule 85 (cmp_expr)]
    $default  reduce using rule 85 (cmp_expr)


State 153

   54 sign: FLOAT •
   65 number: FLOAT •
   86 cmp_expr: FLOAT •

    "+"       reduce using rule 54 (sign)
    "-"       reduce using rule 54 (sign)
    "*"       reduce using rule 54 (sign)
    "/"       reduce using rule 54 (sign)
    "%"       reduce using rule 54 (sign)
    ","       reduce using rule 65 (number)
    ";"       reduce using rule 54 (sign)
    ";"       [reduce using rule 65 (number)]
    ";"       [reduce using rule 86 (cmp_expr)]
    $default  reduce using rule 86 (cmp_expr)


State 154

   83 val: arr_elements •
   99 merge_arr: arr_elements •

    ","       reduce using rule 83 (val)
    ";"       reduce using rule 83 (val)
    ";"       [reduce using rule 99 (merge_arr)]
    $default  reduce using rule 99 (merge_arr)


State 155

   59 arithm_expr: arithm_expr • "+" arithm_expr
   60            | arithm_expr • "-" arithm_expr
   61            | arithm_expr • "*" arithm_expr
   62            | arithm_expr • "/" arithm_expr
   63            | arithm_expr • "%" arithm_expr
   69 assign: var "=" arithm_expr •

    "+"  shift, and go to state 94
    "-"  shift, and go to state 95
    "*"  shift, and go to state 96
    "/"  shift, and go to state 97
    "%"  shift, and go to state 98

    $default  reduce using rule 69 (assign)


State 156

   80 val: number •

    $default  reduce using rule 80 (val)


State 157

   67 assign: var "=" val •
   84 val: val • "," val

    ","  shift, and go to state 201

    $default  reduce using rule 67 (assign)


State 158

   68 assign: var "=" cmp_expr •
   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 100
    ">"   shift, and go to state 101
    "&&"  shift, and go to state 102
    "<="  shift, and go to state 103
    "||"  shift, and go to state 104
    ">="  shift, and go to state 105
    "=="  shift, and go to state 106
    "!="  shift, and go to state 107

    $default  reduce using rule 68 (assign)


State 159

   70 assign: var "=" merge_arr •
  100 merge_arr: merge_arr • "+" merge_arr
  101          | merge_arr • TOKEN_ERROR "+" merge_arr
  102          | merge_arr • "+" TOKEN_ERROR merge_arr
  103          | merge_arr • "++" merge_arr

    "+"          shift, and go to state 108
    "++"         shift, and go to state 109
    TOKEN_ERROR  shift, and go to state 132

    $default  reduce using rule 70 (assign)


State 160

   76 oper_eq: var "+=" number •

    $default  reduce using rule 76 (oper_eq)


State 161

   77 oper_eq: var "-=" number •

    $default  reduce using rule 77 (oper_eq)


State 162

   12 var: var • "," var
   12    | var "," var •

    $default  reduce using rule 12 (var)


State 163

   30 func: IDENTIFIER "(" • print_params ")"
   49 params: "(" • ")"
   50       | "(" • type_params ")"

    IDENTIFIER  shift, and go to state 113
    STRING      shift, and go to state 114
    INTEGER     shift, and go to state 115
    FLOAT       shift, and go to state 116
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SSHORT      shift, and go to state 14
    ")"         shift, and go to state 202
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    type          go to state 203
    pos_elem      go to state 117
    func          go to state 118
    print_params  go to state 119
    type_params   go to state 204


State 164

   48 name_func: name_func IDENTIFIER params • NEWLINE

    NEWLINE  shift, and go to state 205


State 165

   58 arithm_expr: IDENTIFIER •

    $default  reduce using rule 58 (arithm_expr)


State 166

   59 arithm_expr: arithm_expr • "+" arithm_expr
   59            | arithm_expr "+" arithm_expr •
   60            | arithm_expr • "-" arithm_expr
   61            | arithm_expr • "*" arithm_expr
   62            | arithm_expr • "/" arithm_expr
   63            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 96
    "/"  shift, and go to state 97
    "%"  shift, and go to state 98

    $default  reduce using rule 59 (arithm_expr)


State 167

   59 arithm_expr: arithm_expr • "+" arithm_expr
   60            | arithm_expr • "-" arithm_expr
   60            | arithm_expr "-" arithm_expr •
   61            | arithm_expr • "*" arithm_expr
   62            | arithm_expr • "/" arithm_expr
   63            | arithm_expr • "%" arithm_expr

    "*"  shift, and go to state 96
    "/"  shift, and go to state 97
    "%"  shift, and go to state 98

    $default  reduce using rule 60 (arithm_expr)


State 168

   59 arithm_expr: arithm_expr • "+" arithm_expr
   60            | arithm_expr • "-" arithm_expr
   61            | arithm_expr • "*" arithm_expr
   61            | arithm_expr "*" arithm_expr •
   62            | arithm_expr • "/" arithm_expr
   63            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 61 (arithm_expr)


State 169

   59 arithm_expr: arithm_expr • "+" arithm_expr
   60            | arithm_expr • "-" arithm_expr
   61            | arithm_expr • "*" arithm_expr
   62            | arithm_expr • "/" arithm_expr
   62            | arithm_expr "/" arithm_expr •
   63            | arithm_expr • "%" arithm_expr

    $default  reduce using rule 62 (arithm_expr)


State 170

   59 arithm_expr: arithm_expr • "+" arithm_expr
   60            | arithm_expr • "-" arithm_expr
   61            | arithm_expr • "*" arithm_expr
   62            | arithm_expr • "/" arithm_expr
   63            | arithm_expr • "%" arithm_expr
   63            | arithm_expr "%" arithm_expr •

    $default  reduce using rule 63 (arithm_expr)


State 171

   98 cmp_expr: cmp_expr "<" "<" • arithm_expr

    IDENTIFIER  shift, and go to state 165
    INTEGER     shift, and go to state 60
    FLOAT       shift, and go to state 61
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 206


State 172

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   89         | cmp_expr "<" cmp_expr •
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 89 (cmp_expr)


State 173

   97 cmp_expr: cmp_expr ">" ">" • arithm_expr

    IDENTIFIER  shift, and go to state 165
    INTEGER     shift, and go to state 60
    FLOAT       shift, and go to state 61
    "+"         shift, and go to state 16
    "-"         shift, and go to state 18

    sign         go to state 36
    arithm_expr  go to state 207


State 174

   88 cmp_expr: cmp_expr • ">" cmp_expr
   88         | cmp_expr ">" cmp_expr •
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 88 (cmp_expr)


State 175

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   95         | cmp_expr "&&" cmp_expr •
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 100
    ">"   shift, and go to state 101
    "<="  shift, and go to state 103
    ">="  shift, and go to state 105
    "=="  shift, and go to state 106
    "!="  shift, and go to state 107

    $default  reduce using rule 95 (cmp_expr)


State 176

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   90         | cmp_expr "<=" cmp_expr •
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 90 (cmp_expr)


State 177

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   94         | cmp_expr "||" cmp_expr •
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 100
    ">"   shift, and go to state 101
    "&&"  shift, and go to state 102
    "<="  shift, and go to state 103
    ">="  shift, and go to state 105
    "=="  shift, and go to state 106
    "!="  shift, and go to state 107

    $default  reduce using rule 94 (cmp_expr)


State 178

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   91         | cmp_expr ">=" cmp_expr •
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    $default  reduce using rule 91 (cmp_expr)


State 179

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   92         | cmp_expr "==" cmp_expr •
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 100
    ">"   shift, and go to state 101
    "<="  shift, and go to state 103
    ">="  shift, and go to state 105

    $default  reduce using rule 92 (cmp_expr)


State 180

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   93         | cmp_expr "!=" cmp_expr •
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr

    "<"   shift, and go to state 100
    ">"   shift, and go to state 101
    "<="  shift, and go to state 103
    ">="  shift, and go to state 105

    $default  reduce using rule 93 (cmp_expr)


State 181

  102 merge_arr: merge_arr "+" TOKEN_ERROR • merge_arr

    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 208


State 182

  100 merge_arr: merge_arr • "+" merge_arr
  100          | merge_arr "+" merge_arr •
  101          | merge_arr • TOKEN_ERROR "+" merge_arr
  102          | merge_arr • "+" TOKEN_ERROR merge_arr
  103          | merge_arr • "++" merge_arr

    "++"         shift, and go to state 109
    TOKEN_ERROR  shift, and go to state 132

    TOKEN_ERROR  [reduce using rule 100 (merge_arr)]
    $default     reduce using rule 100 (merge_arr)


State 183

  100 merge_arr: merge_arr • "+" merge_arr
  101          | merge_arr • TOKEN_ERROR "+" merge_arr
  102          | merge_arr • "+" TOKEN_ERROR merge_arr
  103          | merge_arr • "++" merge_arr
  103          | merge_arr "++" merge_arr •

    TOKEN_ERROR  shift, and go to state 132

    TOKEN_ERROR  [reduce using rule 103 (merge_arr)]
    $default     reduce using rule 103 (merge_arr)


State 184

  101 merge_arr: merge_arr TOKEN_ERROR "+" • merge_arr

    "["  shift, and go to state 21

    arr_elements  go to state 31
    merge_arr     go to state 209


State 185

    3 program: program merge_arr TOKEN_ERROR merge_arr • NEWLINE
  100 merge_arr: merge_arr • "+" merge_arr
  101          | merge_arr • TOKEN_ERROR "+" merge_arr
  102          | merge_arr • "+" TOKEN_ERROR merge_arr
  103          | merge_arr • "++" merge_arr

    "+"          shift, and go to state 108
    "++"         shift, and go to state 109
    NEWLINE      shift, and go to state 210
    TOKEN_ERROR  shift, and go to state 132


State 186

   13 pos_elem: IDENTIFIER "[" • INTEGER "]"
   14         | IDENTIFIER "[" • IDENTIFIER "]"

    IDENTIFIER  shift, and go to state 211
    INTEGER     shift, and go to state 212


State 187

   30 func: IDENTIFIER "(" print_params ")" •

    $default  reduce using rule 30 (func)


State 188

   44 print_params: print_params "," • print_params

    IDENTIFIER  shift, and go to state 113
    STRING      shift, and go to state 114
    INTEGER     shift, and go to state 115
    FLOAT       shift, and go to state 116
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26

    pos_elem      go to state 117
    func          go to state 118
    print_params  go to state 213


State 189

  120 condition: "(" condition ")" •
  123          | condition ")" •

    IDENTIFIER  reduce using rule 120 (condition)
    IDENTIFIER  [reduce using rule 123 (condition)]
    INTEGER     reduce using rule 120 (condition)
    INTEGER     [reduce using rule 123 (condition)]
    FLOAT       reduce using rule 120 (condition)
    FLOAT       [reduce using rule 123 (condition)]
    SIF         reduce using rule 120 (condition)
    SIF         [reduce using rule 123 (condition)]
    SDOUBLE     reduce using rule 120 (condition)
    SDOUBLE     [reduce using rule 123 (condition)]
    SINT        reduce using rule 120 (condition)
    SINT        [reduce using rule 123 (condition)]
    SFUNC       reduce using rule 120 (condition)
    SFUNC       [reduce using rule 123 (condition)]
    SLONG       reduce using rule 120 (condition)
    SLONG       [reduce using rule 123 (condition)]
    SFLOAT      reduce using rule 120 (condition)
    SFLOAT      [reduce using rule 123 (condition)]
    SFOR        reduce using rule 120 (condition)
    SFOR        [reduce using rule 123 (condition)]
    SSHORT      reduce using rule 120 (condition)
    SSHORT      [reduce using rule 123 (condition)]
    SWHILE      reduce using rule 120 (condition)
    SWHILE      [reduce using rule 123 (condition)]
    "+"         reduce using rule 120 (condition)
    "+"         [reduce using rule 123 (condition)]
    "--"        reduce using rule 120 (condition)
    "--"        [reduce using rule 123 (condition)]
    "-"         reduce using rule 120 (condition)
    "-"         [reduce using rule 123 (condition)]
    "!"         reduce using rule 120 (condition)
    "!"         [reduce using rule 123 (condition)]
    "++"        reduce using rule 120 (condition)
    "++"        [reduce using rule 123 (condition)]
    ")"         reduce using rule 120 (condition)
    ")"         [reduce using rule 123 (condition)]
    "["         reduce using rule 120 (condition)
    "["         [reduce using rule 123 (condition)]
    "{"         reduce using rule 120 (condition)
    "{"         [reduce using rule 123 (condition)]
    SSCAN       reduce using rule 120 (condition)
    SSCAN       [reduce using rule 123 (condition)]
    SPRINT      reduce using rule 120 (condition)
    SPRINT      [reduce using rule 123 (condition)]
    SLEN        reduce using rule 120 (condition)
    SLEN        [reduce using rule 123 (condition)]
    SCMP        reduce using rule 120 (condition)
    SCMP        [reduce using rule 123 (condition)]
    NEWLINE     reduce using rule 120 (condition)
    NEWLINE     [reduce using rule 123 (condition)]
    "))"        reduce using rule 120 (condition)
    "))"        [reduce using rule 123 (condition)]
    $default    reduce using rule 120 (condition)


State 190

  122 condition: "(" condition "))" •

    $default  reduce using rule 122 (condition)


State 191

  121 condition: "((" condition ")" •
  123          | condition ")" •

    ")"       reduce using rule 121 (condition)
    ")"       [reduce using rule 123 (condition)]
    $default  reduce using rule 121 (condition)


State 192

  127 for_statement: SFOR "(" assign ";" • cmp_expr ";" oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 50
    INTEGER     shift, and go to state 51
    FLOAT       shift, and go to state 52
    "!"         shift, and go to state 19

    cmp_expr  go to state 214


State 193

   20 integ: integ • "," integ
   20      | integ "," integ •

    $default  reduce using rule 20 (integ)


State 194

   22 fl: fl • "," fl
   22   | fl "," fl •

    $default  reduce using rule 22 (fl)


State 195

   24 str: str • "," str
   24    | str "," str •

    $default  reduce using rule 24 (str)


State 196

   26 func: SSCAN "(" scan_params ")" •

    $default  reduce using rule 26 (func)


State 197

   29 func: SPRINT "(" print_params ")" •

    $default  reduce using rule 29 (func)


State 198

   27 func: SLEN "(" len_params ")" •

    $default  reduce using rule 27 (func)


State 199

   28 func: SCMP "(" cmp_params ")" •

    $default  reduce using rule 28 (func)


State 200

   37 cmp_params: cmp_params "," • cmp_params

    IDENTIFIER  shift, and go to state 141
    STRING      shift, and go to state 142

    cmp_params  go to state 215


State 201

   84 val: val "," • val

    IDENTIFIER  shift, and go to state 216
    STRING      shift, and go to state 151
    INTEGER     shift, and go to state 145
    FLOAT       shift, and go to state 146
    "["         shift, and go to state 21

    pos_elem      go to state 147
    arr_elements  go to state 217
    number        go to state 156
    val           go to state 218


State 202

   49 params: "(" ")" •

    $default  reduce using rule 49 (params)


State 203

   51 type_params: type • IDENTIFIER

    IDENTIFIER  shift, and go to state 219


State 204

   50 params: "(" type_params • ")"
   52 type_params: type_params • "," type_params

    ")"  shift, and go to state 220
    ","  shift, and go to state 221


State 205

   48 name_func: name_func IDENTIFIER params NEWLINE •

    $default  reduce using rule 48 (name_func)


State 206

   59 arithm_expr: arithm_expr • "+" arithm_expr
   60            | arithm_expr • "-" arithm_expr
   61            | arithm_expr • "*" arithm_expr
   62            | arithm_expr • "/" arithm_expr
   63            | arithm_expr • "%" arithm_expr
   98 cmp_expr: cmp_expr "<" "<" arithm_expr •

    "+"  shift, and go to state 94
    "-"  shift, and go to state 95
    "*"  shift, and go to state 96
    "/"  shift, and go to state 97
    "%"  shift, and go to state 98

    $default  reduce using rule 98 (cmp_expr)


State 207

   59 arithm_expr: arithm_expr • "+" arithm_expr
   60            | arithm_expr • "-" arithm_expr
   61            | arithm_expr • "*" arithm_expr
   62            | arithm_expr • "/" arithm_expr
   63            | arithm_expr • "%" arithm_expr
   97 cmp_expr: cmp_expr ">" ">" arithm_expr •

    "+"  shift, and go to state 94
    "-"  shift, and go to state 95
    "*"  shift, and go to state 96
    "/"  shift, and go to state 97
    "%"  shift, and go to state 98

    $default  reduce using rule 97 (cmp_expr)


State 208

  100 merge_arr: merge_arr • "+" merge_arr
  101          | merge_arr • TOKEN_ERROR "+" merge_arr
  102          | merge_arr • "+" TOKEN_ERROR merge_arr
  102          | merge_arr "+" TOKEN_ERROR merge_arr •
  103          | merge_arr • "++" merge_arr

    "+"          shift, and go to state 108
    "++"         shift, and go to state 109
    TOKEN_ERROR  shift, and go to state 132

    "+"          [reduce using rule 102 (merge_arr)]
    "++"         [reduce using rule 102 (merge_arr)]
    TOKEN_ERROR  [reduce using rule 102 (merge_arr)]
    $default     reduce using rule 102 (merge_arr)


State 209

  100 merge_arr: merge_arr • "+" merge_arr
  101          | merge_arr • TOKEN_ERROR "+" merge_arr
  101          | merge_arr TOKEN_ERROR "+" merge_arr •
  102          | merge_arr • "+" TOKEN_ERROR merge_arr
  103          | merge_arr • "++" merge_arr

    "++"         shift, and go to state 109
    TOKEN_ERROR  shift, and go to state 132

    TOKEN_ERROR  [reduce using rule 101 (merge_arr)]
    $default     reduce using rule 101 (merge_arr)


State 210

    3 program: program merge_arr TOKEN_ERROR merge_arr NEWLINE •

    $default  reduce using rule 3 (program)


State 211

   14 pos_elem: IDENTIFIER "[" IDENTIFIER • "]"

    "]"  shift, and go to state 222


State 212

   13 pos_elem: IDENTIFIER "[" INTEGER • "]"

    "]"  shift, and go to state 223


State 213

   44 print_params: print_params • "," print_params
   44             | print_params "," print_params •

    $default  reduce using rule 44 (print_params)


State 214

   88 cmp_expr: cmp_expr • ">" cmp_expr
   89         | cmp_expr • "<" cmp_expr
   90         | cmp_expr • "<=" cmp_expr
   91         | cmp_expr • ">=" cmp_expr
   92         | cmp_expr • "==" cmp_expr
   93         | cmp_expr • "!=" cmp_expr
   94         | cmp_expr • "||" cmp_expr
   95         | cmp_expr • "&&" cmp_expr
   97         | cmp_expr • ">" ">" arithm_expr
   98         | cmp_expr • "<" "<" arithm_expr
  127 for_statement: SFOR "(" assign ";" cmp_expr • ";" oper_eq ")" decl_statement

    "<"   shift, and go to state 100
    ">"   shift, and go to state 101
    "&&"  shift, and go to state 102
    "<="  shift, and go to state 103
    "||"  shift, and go to state 104
    ">="  shift, and go to state 105
    "=="  shift, and go to state 106
    "!="  shift, and go to state 107
    ";"   shift, and go to state 224


State 215

   37 cmp_params: cmp_params • "," cmp_params
   37           | cmp_params "," cmp_params •

    $default  reduce using rule 37 (cmp_params)


State 216

   13 pos_elem: IDENTIFIER • "[" INTEGER "]"
   14         | IDENTIFIER • "[" IDENTIFIER "]"
   81 val: IDENTIFIER •

    "["  shift, and go to state 186

    $default  reduce using rule 81 (val)


State 217

   83 val: arr_elements •

    $default  reduce using rule 83 (val)


State 218

   84 val: val • "," val
   84    | val "," val •

    $default  reduce using rule 84 (val)


State 219

   51 type_params: type IDENTIFIER •

    $default  reduce using rule 51 (type_params)


State 220

   50 params: "(" type_params ")" •

    $default  reduce using rule 50 (params)


State 221

   52 type_params: type_params "," • type_params

    SDOUBLE  shift, and go to state 8
    SINT     shift, and go to state 9
    SLONG    shift, and go to state 11
    SFLOAT   shift, and go to state 12
    SSHORT   shift, and go to state 14

    type         go to state 203
    type_params  go to state 225


State 222

   14 pos_elem: IDENTIFIER "[" IDENTIFIER "]" •

    $default  reduce using rule 14 (pos_elem)


State 223

   13 pos_elem: IDENTIFIER "[" INTEGER "]" •

    $default  reduce using rule 13 (pos_elem)


State 224

  127 for_statement: SFOR "(" assign ";" cmp_expr ";" • oper_eq ")" decl_statement

    IDENTIFIER  shift, and go to state 63
    "--"        shift, and go to state 17
    "++"        shift, and go to state 20

    var      go to state 226
    oper_eq  go to state 227


State 225

   52 type_params: type_params • "," type_params
   52            | type_params "," type_params •

    $default  reduce using rule 52 (type_params)


State 226

   12 var: var • "," var
   72 oper_eq: var • "++"
   73        | var • "--"
   76        | var • "+=" number
   77        | var • "-=" number
   78        | var • "*=" number
   79        | var • "/=" number

    "*="  shift, and go to state 83
    "--"  shift, and go to state 84
    "/="  shift, and go to state 85
    "+="  shift, and go to state 87
    "-="  shift, and go to state 88
    "++"  shift, and go to state 89
    ","   shift, and go to state 90


State 227

  127 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq • ")" decl_statement

    ")"  shift, and go to state 228


State 228

  127 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" • decl_statement

    IDENTIFIER  shift, and go to state 4
    INTEGER     shift, and go to state 5
    FLOAT       shift, and go to state 6
    SIF         shift, and go to state 7
    SDOUBLE     shift, and go to state 8
    SINT        shift, and go to state 9
    SFUNC       shift, and go to state 10
    SLONG       shift, and go to state 11
    SFLOAT      shift, and go to state 12
    SFOR        shift, and go to state 13
    SSHORT      shift, and go to state 14
    SWHILE      shift, and go to state 15
    "+"         shift, and go to state 16
    "--"        shift, and go to state 17
    "-"         shift, and go to state 18
    "!"         shift, and go to state 19
    "++"        shift, and go to state 20
    "["         shift, and go to state 21
    "{"         shift, and go to state 22
    SSCAN       shift, and go to state 23
    SPRINT      shift, and go to state 24
    SLEN        shift, and go to state 25
    SCMP        shift, and go to state 26
    NEWLINE     shift, and go to state 27

    decl_var         go to state 28
    type             go to state 29
    var              go to state 30
    arr_elements     go to state 31
    build_func       go to state 32
    func             go to state 33
    decl_func        go to state 34
    name_func        go to state 35
    sign             go to state 36
    arithm_expr      go to state 37
    assign           go to state 38
    oper_eq          go to state 39
    cmp_expr         go to state 40
    merge_arr        go to state 75
    decl_statement   go to state 229
    if_statement     go to state 44
    block_statement  go to state 45
    while_statement  go to state 46
    for_statement    go to state 47


State 229

  127 for_statement: SFOR "(" assign ";" cmp_expr ";" oper_eq ")" decl_statement •

    $default  reduce using rule 127 (for_statement)
